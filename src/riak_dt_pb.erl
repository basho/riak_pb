%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(riak_dt_pb).

-export([encode_msg/1, encode_msg/2]).
-export([encode/1]). %% epb compatibility
-export([encode_mapfield/1]).
-export([encode_mapentry/1]).
-export([encode_dtfetchreq/1]).
-export([encode_dtvalue/1]).
-export([encode_dtfetchresp/1]).
-export([encode_counterop/1]).
-export([encode_setop/1]).
-export([encode_gsetop/1]).
-export([encode_hllop/1]).
-export([encode_mapupdate/1]).
-export([encode_mapop/1]).
-export([encode_dtop/1]).
-export([encode_dtupdatereq/1]).
-export([encode_dtupdateresp/1]).

-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([decode/2]). %% epb compatibility
-export([decode_mapfield/1]).
-export([decode_mapentry/1]).
-export([decode_dtfetchreq/1]).
-export([decode_dtvalue/1]).
-export([decode_dtfetchresp/1]).
-export([decode_counterop/1]).
-export([decode_setop/1]).
-export([decode_gsetop/1]).
-export([decode_hllop/1]).
-export([decode_mapupdate/1]).
-export([decode_mapop/1]).
-export([decode_dtop/1]).
-export([decode_dtupdatereq/1]).
-export([decode_dtupdateresp/1]).

-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_MapField.MapFieldType'/1, 'enum_value_by_symbol_MapField.MapFieldType'/1]).
-export(['enum_symbol_by_value_DtFetchResp.DataType'/1, 'enum_value_by_symbol_DtFetchResp.DataType'/1]).
-export(['enum_symbol_by_value_MapUpdate.FlagOp'/1, 'enum_value_by_symbol_MapUpdate.FlagOp'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_dt_pb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #mapfield{} -> e_msg_mapfield(Msg, TrUserData);
      #mapentry{} -> e_msg_mapentry(Msg, TrUserData);
      #dtfetchreq{} -> e_msg_dtfetchreq(Msg, TrUserData);
      #dtvalue{} -> e_msg_dtvalue(Msg, TrUserData);
      #dtfetchresp{} -> e_msg_dtfetchresp(Msg, TrUserData);
      #counterop{} -> e_msg_counterop(Msg, TrUserData);
      #setop{} -> e_msg_setop(Msg, TrUserData);
      #gsetop{} -> e_msg_gsetop(Msg, TrUserData);
      #hllop{} -> e_msg_hllop(Msg, TrUserData);
      #mapupdate{} -> e_msg_mapupdate(Msg, TrUserData);
      #mapop{} -> e_msg_mapop(Msg, TrUserData);
      #dtop{} -> e_msg_dtop(Msg, TrUserData);
      #dtupdatereq{} -> e_msg_dtupdatereq(Msg, TrUserData);
      #dtupdateresp{} -> e_msg_dtupdateresp(Msg, TrUserData)
    end.


%% epb compatibility
-spec encode(_) -> binary().
encode(Msg) -> encode_msg(Msg).

-spec encode_mapfield(_) -> binary().
encode_mapfield(Msg) -> encode_msg(Msg).

-spec encode_mapentry(_) -> binary().
encode_mapentry(Msg) -> encode_msg(Msg).

-spec encode_dtfetchreq(_) -> binary().
encode_dtfetchreq(Msg) -> encode_msg(Msg).

-spec encode_dtvalue(_) -> binary().
encode_dtvalue(Msg) -> encode_msg(Msg).

-spec encode_dtfetchresp(_) -> binary().
encode_dtfetchresp(Msg) -> encode_msg(Msg).

-spec encode_counterop(_) -> binary().
encode_counterop(Msg) -> encode_msg(Msg).

-spec encode_setop(_) -> binary().
encode_setop(Msg) -> encode_msg(Msg).

-spec encode_gsetop(_) -> binary().
encode_gsetop(Msg) -> encode_msg(Msg).

-spec encode_hllop(_) -> binary().
encode_hllop(Msg) -> encode_msg(Msg).

-spec encode_mapupdate(_) -> binary().
encode_mapupdate(Msg) -> encode_msg(Msg).

-spec encode_mapop(_) -> binary().
encode_mapop(Msg) -> encode_msg(Msg).

-spec encode_dtop(_) -> binary().
encode_dtop(Msg) -> encode_msg(Msg).

-spec encode_dtupdatereq(_) -> binary().
encode_dtupdatereq(Msg) -> encode_msg(Msg).

-spec encode_dtupdateresp(_) -> binary().
encode_dtupdateresp(Msg) -> encode_msg(Msg).


e_msg_mapfield(Msg, TrUserData) ->
    e_msg_mapfield(Msg, <<>>, TrUserData).


e_msg_mapfield(#mapfield{name = F1, type = F2}, Bin,
	       TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_enum_MapField.MapFieldType'(TrF2, <<B1/binary, 16>>)
    end.

e_msg_mapentry(Msg, TrUserData) ->
    e_msg_mapentry(Msg, <<>>, TrUserData).


e_msg_mapentry(#mapentry{field = F1, counter_value = F2,
			 set_value = F3, register_value = F4, flag_value = F5,
			 map_value = F6},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_mapentry_field(TrF1, <<Bin/binary, 10>>,
				   TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_sint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_mapentry_set_value(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true -> e_field_mapentry_map_value(TrF6, B5, TrUserData)
      end
    end.

e_msg_dtfetchreq(Msg, TrUserData) ->
    e_msg_dtfetchreq(Msg, <<>>, TrUserData).


e_msg_dtfetchreq(#dtfetchreq{bucket = F1, key = F2,
			     type = F3, r = F4, pr = F5, basic_quorum = F6,
			     notfound_ok = F7, timeout = F8, sloppy_quorum = F9,
			     n_val = F10, include_context = F11},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_bytes(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_varint(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     e_type_bool(TrF11, <<B10/binary, 88>>)
	   end
    end.

e_msg_dtvalue(Msg, TrUserData) ->
    e_msg_dtvalue(Msg, <<>>, TrUserData).


e_msg_dtvalue(#dtvalue{counter_value = F1,
		       set_value = F2, map_value = F3, hll_value = F4,
		       gset_value = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_sint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_dtvalue_set_value(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_dtvalue_map_value(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true -> e_field_dtvalue_gset_value(TrF5, B4, TrUserData)
      end
    end.

e_msg_dtfetchresp(Msg, TrUserData) ->
    e_msg_dtfetchresp(Msg, <<>>, TrUserData).


e_msg_dtfetchresp(#dtfetchresp{context = F1, type = F2,
			       value = F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   'e_enum_DtFetchResp.DataType'(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_dtfetchresp_value(TrF3, <<B2/binary, 26>>,
					TrUserData)
	   end
    end.

e_msg_counterop(Msg, TrUserData) ->
    e_msg_counterop(Msg, <<>>, TrUserData).


e_msg_counterop(#counterop{increment = F1}, Bin,
		TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_sint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_setop(Msg, TrUserData) ->
    e_msg_setop(Msg, <<>>, TrUserData).


e_msg_setop(#setop{adds = F1, removes = F2}, Bin,
	    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_setop_adds(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_setop_removes(TrF2, B1, TrUserData)
      end
    end.

e_msg_gsetop(Msg, TrUserData) ->
    e_msg_gsetop(Msg, <<>>, TrUserData).


e_msg_gsetop(#gsetop{adds = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_gsetop_adds(TrF1, Bin, TrUserData)
      end
    end.

e_msg_hllop(Msg, TrUserData) ->
    e_msg_hllop(Msg, <<>>, TrUserData).


e_msg_hllop(#hllop{adds = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_hllop_adds(TrF1, Bin, TrUserData)
      end
    end.

e_msg_mapupdate(Msg, TrUserData) ->
    e_msg_mapupdate(Msg, <<>>, TrUserData).


e_msg_mapupdate(#mapupdate{field = F1, counter_op = F2,
			   set_op = F3, register_op = F4, flag_op = F5,
			   map_op = F6},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_mapupdate_field(TrF1, <<Bin/binary, 10>>,
				    TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_mapupdate_counter_op(TrF2, <<B1/binary, 18>>,
						TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_mapupdate_set_op(TrF3, <<B2/binary, 26>>,
					    TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  'e_enum_MapUpdate.FlagOp'(TrF5, <<B4/binary, 40>>)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_mfield_mapupdate_map_op(TrF6, <<B5/binary, 50>>,
				       TrUserData)
	   end
    end.

e_msg_mapop(Msg, TrUserData) ->
    e_msg_mapop(Msg, <<>>, TrUserData).


e_msg_mapop(#mapop{removes = F1, updates = F2}, Bin,
	    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_mapop_removes(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_mapop_updates(TrF2, B1, TrUserData)
      end
    end.

e_msg_dtop(Msg, TrUserData) ->
    e_msg_dtop(Msg, <<>>, TrUserData).


e_msg_dtop(#dtop{counter_op = F1, set_op = F2,
		 map_op = F3, hll_op = F4, gset_op = F5},
	   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_dtop_counter_op(TrF1, <<Bin/binary, 10>>,
					   TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_dtop_set_op(TrF2, <<B1/binary, 18>>,
				       TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_dtop_map_op(TrF3, <<B2/binary, 26>>,
				       TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_dtop_hll_op(TrF4, <<B3/binary, 34>>,
				       TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_dtop_gset_op(TrF5, <<B4/binary, 42>>,
				   TrUserData)
	   end
    end.

e_msg_dtupdatereq(Msg, TrUserData) ->
    e_msg_dtupdatereq(Msg, <<>>, TrUserData).


e_msg_dtupdatereq(#dtupdatereq{bucket = F1, key = F2,
			       type = F3, context = F4, op = F5, w = F6,
			       dw = F7, pw = F8, return_body = F9,
			       timeout = F10, sloppy_quorum = F11, n_val = F12,
			       include_context = F13},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_bytes(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_mfield_dtupdatereq_op(TrF5, <<B4/binary, 42>>,
				   TrUserData)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_varint(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_varint(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    if F13 == undefined -> B12;
       true ->
	   begin
	     TrF13 = id(F13, TrUserData),
	     e_type_bool(TrF13, <<B12/binary, 104>>)
	   end
    end.

e_msg_dtupdateresp(Msg, TrUserData) ->
    e_msg_dtupdateresp(Msg, <<>>, TrUserData).


e_msg_dtupdateresp(#dtupdateresp{key = F1, context = F2,
				 counter_value = F3, set_value = F4,
				 map_value = F5, hll_value = F6,
				 gset_value = F7},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_sint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_dtupdateresp_set_value(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  e_field_dtupdateresp_map_value(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_varint(TrF6, <<B5/binary, 48>>)
		end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true ->
	     e_field_dtupdateresp_gset_value(TrF7, B6, TrUserData)
      end
    end.

e_mfield_mapentry_field(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapfield(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mapentry_set_value([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_mapentry_set_value(Rest, Bin3, TrUserData);
e_field_mapentry_set_value([], Bin, _TrUserData) -> Bin.

e_mfield_mapentry_map_value(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapentry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mapentry_map_value([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_mapentry_map_value(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_mapentry_map_value(Rest, Bin3, TrUserData);
e_field_mapentry_map_value([], Bin, _TrUserData) -> Bin.

e_field_dtvalue_set_value([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_dtvalue_set_value(Rest, Bin3, TrUserData);
e_field_dtvalue_set_value([], Bin, _TrUserData) -> Bin.

e_mfield_dtvalue_map_value(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapentry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_dtvalue_map_value([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_dtvalue_map_value(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_dtvalue_map_value(Rest, Bin3, TrUserData);
e_field_dtvalue_map_value([], Bin, _TrUserData) -> Bin.

e_field_dtvalue_gset_value([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_dtvalue_gset_value(Rest, Bin3, TrUserData);
e_field_dtvalue_gset_value([], Bin, _TrUserData) -> Bin.

e_mfield_dtfetchresp_value(Msg, Bin, TrUserData) ->
    SubBin = e_msg_dtvalue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_setop_adds([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_setop_adds(Rest, Bin3, TrUserData);
e_field_setop_adds([], Bin, _TrUserData) -> Bin.

e_field_setop_removes([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_setop_removes(Rest, Bin3, TrUserData);
e_field_setop_removes([], Bin, _TrUserData) -> Bin.

e_field_gsetop_adds([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_gsetop_adds(Rest, Bin3, TrUserData);
e_field_gsetop_adds([], Bin, _TrUserData) -> Bin.

e_field_hllop_adds([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_hllop_adds(Rest, Bin3, TrUserData);
e_field_hllop_adds([], Bin, _TrUserData) -> Bin.

e_mfield_mapupdate_field(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapfield(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mapupdate_counter_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_counterop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mapupdate_set_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_setop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mapupdate_map_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_mapop_removes(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapfield(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mapop_removes([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_mapop_removes(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_mapop_removes(Rest, Bin3, TrUserData);
e_field_mapop_removes([], Bin, _TrUserData) -> Bin.

e_mfield_mapop_updates(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapupdate(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_mapop_updates([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_mapop_updates(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_mapop_updates(Rest, Bin3, TrUserData);
e_field_mapop_updates([], Bin, _TrUserData) -> Bin.

e_mfield_dtop_counter_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_counterop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_dtop_set_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_setop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_dtop_map_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_dtop_hll_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_hllop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_dtop_gset_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_gsetop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_dtupdatereq_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_dtop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_dtupdateresp_set_value([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_dtupdateresp_set_value(Rest, Bin3, TrUserData);
e_field_dtupdateresp_set_value([], Bin, _TrUserData) ->
    Bin.

e_mfield_dtupdateresp_map_value(Msg, Bin, TrUserData) ->
    SubBin = e_msg_mapentry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_dtupdateresp_map_value([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_dtupdateresp_map_value(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_dtupdateresp_map_value(Rest, Bin3, TrUserData);
e_field_dtupdateresp_map_value([], Bin, _TrUserData) ->
    Bin.

e_field_dtupdateresp_gset_value([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_dtupdateresp_gset_value(Rest, Bin3, TrUserData);
e_field_dtupdateresp_gset_value([], Bin, _TrUserData) ->
    Bin.



'e_enum_MapField.MapFieldType'('COUNTER', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_MapField.MapFieldType'('SET', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_MapField.MapFieldType'('REGISTER', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_MapField.MapFieldType'('FLAG', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_MapField.MapFieldType'('MAP', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_MapField.MapFieldType'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_DtFetchResp.DataType'('COUNTER', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_DtFetchResp.DataType'('SET', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_DtFetchResp.DataType'('MAP', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_DtFetchResp.DataType'('HLL', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_DtFetchResp.DataType'('GSET', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_DtFetchResp.DataType'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_MapUpdate.FlagOp'('ENABLE', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_MapUpdate.FlagOp'('DISABLE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_MapUpdate.FlagOp'(V, Bin) -> e_varint(V, Bin).

e_type_sint(Value, Bin) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
    e_varint(Value * -2 - 1, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      mapfield -> d_msg_mapfield(Bin, TrUserData);
      mapentry -> d_msg_mapentry(Bin, TrUserData);
      dtfetchreq -> d_msg_dtfetchreq(Bin, TrUserData);
      dtvalue -> d_msg_dtvalue(Bin, TrUserData);
      dtfetchresp -> d_msg_dtfetchresp(Bin, TrUserData);
      counterop -> d_msg_counterop(Bin, TrUserData);
      setop -> d_msg_setop(Bin, TrUserData);
      gsetop -> d_msg_gsetop(Bin, TrUserData);
      hllop -> d_msg_hllop(Bin, TrUserData);
      mapupdate -> d_msg_mapupdate(Bin, TrUserData);
      mapop -> d_msg_mapop(Bin, TrUserData);
      dtop -> d_msg_dtop(Bin, TrUserData);
      dtupdatereq -> d_msg_dtupdatereq(Bin, TrUserData);
      dtupdateresp -> d_msg_dtupdateresp(Bin, TrUserData)
    end.


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    decode_msg(Bin, MsgName).

decode_mapfield(Bin) when is_binary(Bin) ->
    decode_msg(Bin, mapfield).

decode_mapentry(Bin) when is_binary(Bin) ->
    decode_msg(Bin, mapentry).

decode_dtfetchreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtfetchreq).

decode_dtvalue(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtvalue).

decode_dtfetchresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtfetchresp).

decode_counterop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, counterop).

decode_setop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, setop).

decode_gsetop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, gsetop).

decode_hllop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, hllop).

decode_mapupdate(Bin) when is_binary(Bin) ->
    decode_msg(Bin, mapupdate).

decode_mapop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, mapop).

decode_dtop(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtop).

decode_dtupdatereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtupdatereq).

decode_dtupdateresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, dtupdateresp).



d_msg_mapfield(Bin, TrUserData) ->
    dfp_read_field_def_mapfield(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_mapfield(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_mapfield_name(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_mapfield(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, TrUserData) ->
    d_field_mapfield_type(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_mapfield(<<>>, 0, 0, F1, F2, _) ->
    #mapfield{name = F1, type = F2};
dfp_read_field_def_mapfield(Other, Z1, Z2, F1, F2,
			    TrUserData) ->
    dg_read_field_def_mapfield(Other, Z1, Z2, F1, F2,
			       TrUserData).

dg_read_field_def_mapfield(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mapfield(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
dg_read_field_def_mapfield(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mapfield_name(Rest, 0, 0, F1, F2, TrUserData);
      16 ->
	  d_field_mapfield_type(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mapfield(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_mapfield(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_mapfield(Rest, 0, 0, F1, F2,
					       TrUserData);
	    5 -> skip_32_mapfield(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_mapfield(<<>>, 0, 0, F1, F2, _) ->
    #mapfield{name = F1, type = F2}.

d_field_mapfield_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_mapfield_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_mapfield_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mapfield(Rest2, 0, 0, NewFValue, F2,
				TrUserData).


d_field_mapfield_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_mapfield_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_mapfield_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_MapField.MapFieldType'(Tmp),
    dfp_read_field_def_mapfield(Rest, 0, 0, F1, NewFValue,
				TrUserData).


skip_varint_mapfield(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    skip_varint_mapfield(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_mapfield(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, TrUserData) ->
    dfp_read_field_def_mapfield(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_length_delimited_mapfield(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_mapfield(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_mapfield(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mapfield(Rest2, 0, 0, F1, F2,
				TrUserData).


skip_32_mapfield(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_mapfield(Rest, Z1, Z2, F1, F2,
				TrUserData).


skip_64_mapfield(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 TrUserData) ->
    dfp_read_field_def_mapfield(Rest, Z1, Z2, F1, F2,
				TrUserData).


d_msg_mapentry(Bin, TrUserData) ->
    dfp_read_field_def_mapentry(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_mapentry(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_field(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
dfp_read_field_def_mapentry(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_counter_value(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, TrUserData);
dfp_read_field_def_mapentry(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_set_value(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, TrUserData);
dfp_read_field_def_mapentry(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_register_value(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, TrUserData);
dfp_read_field_def_mapentry(<<40, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_flag_value(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData);
dfp_read_field_def_mapentry(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapentry_map_value(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, TrUserData);
dfp_read_field_def_mapentry(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, TrUserData) ->
    #mapentry{field = F1, counter_value = F2,
	      set_value = lists_reverse(F3, TrUserData),
	      register_value = F4, flag_value = F5,
	      map_value = lists_reverse(F6, TrUserData)};
dfp_read_field_def_mapentry(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, TrUserData) ->
    dg_read_field_def_mapentry(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, TrUserData).

dg_read_field_def_mapentry(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mapentry(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_mapentry(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mapentry_field(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, TrUserData);
      16 ->
	  d_field_mapentry_counter_value(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, TrUserData);
      26 ->
	  d_field_mapentry_set_value(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
      34 ->
	  d_field_mapentry_register_value(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, TrUserData);
      40 ->
	  d_field_mapentry_flag_value(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, TrUserData);
      50 ->
	  d_field_mapentry_map_value(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mapentry(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     TrUserData);
	    1 ->
		skip_64_mapentry(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				 TrUserData);
	    2 ->
		skip_length_delimited_mapentry(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, TrUserData);
	    5 ->
		skip_32_mapentry(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				 TrUserData)
	  end
    end;
dg_read_field_def_mapentry(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, TrUserData) ->
    #mapentry{field = F1, counter_value = F2,
	      set_value = lists_reverse(F3, TrUserData),
	      register_value = F4, flag_value = F5,
	      map_value = lists_reverse(F6, TrUserData)}.

d_field_mapentry_field(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_field(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, TrUserData);
d_field_mapentry_field(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapfield(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapentry(Rest2, 0, 0,
				if F1 == undefined -> NewFValue;
				   true ->
				       merge_msg_mapfield(F1, NewFValue,
							  TrUserData)
				end,
				F2, F3, F4, F5, F6, TrUserData).


d_field_mapentry_counter_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_counter_value(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				   TrUserData);
d_field_mapentry_counter_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_mapentry(Rest, 0, 0, F1, NewFValue,
				F3, F4, F5, F6, TrUserData).


d_field_mapentry_set_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_set_value(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
d_field_mapentry_set_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mapentry(Rest2, 0, 0, F1, F2,
				cons(NewFValue, F3, TrUserData), F4, F5, F6,
				TrUserData).


d_field_mapentry_register_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_register_value(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
d_field_mapentry_register_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mapentry(Rest2, 0, 0, F1, F2, F3,
				NewFValue, F5, F6, TrUserData).


d_field_mapentry_flag_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_flag_value(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
d_field_mapentry_flag_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_mapentry(Rest, 0, 0, F1, F2, F3, F4,
				NewFValue, F6, TrUserData).


d_field_mapentry_map_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapentry_map_value(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
d_field_mapentry_map_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapentry(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapentry(Rest2, 0, 0, F1, F2, F3, F4,
				F5, cons(NewFValue, F6, TrUserData),
				TrUserData).


skip_varint_mapentry(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_mapentry(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, TrUserData);
skip_varint_mapentry(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapentry(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).


skip_length_delimited_mapentry(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_mapentry(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				   TrUserData);
skip_length_delimited_mapentry(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mapentry(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, TrUserData).


skip_32_mapentry(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapentry(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).


skip_64_mapentry(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapentry(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).


d_msg_dtfetchreq(Bin, TrUserData) ->
    dfp_read_field_def_dtfetchreq(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(true, TrUserData), TrUserData).

dfp_read_field_def_dtfetchreq(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_key(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_type(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_r(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<40, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_pr(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<48, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_basic_quorum(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11,
				    TrUserData);
dfp_read_field_def_dtfetchreq(<<56, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_notfound_ok(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11,
				   TrUserData);
dfp_read_field_def_dtfetchreq(<<64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_timeout(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<72, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_sloppy_quorum(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11,
				     TrUserData);
dfp_read_field_def_dtfetchreq(<<80, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_n_val(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_dtfetchreq(<<88, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_dtfetchreq_include_context(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       TrUserData);
dfp_read_field_def_dtfetchreq(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, _) ->
    #dtfetchreq{bucket = F1, key = F2, type = F3, r = F4,
		pr = F5, basic_quorum = F6, notfound_ok = F7,
		timeout = F8, sloppy_quorum = F9, n_val = F10,
		include_context = F11};
dfp_read_field_def_dtfetchreq(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dg_read_field_def_dtfetchreq(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).

dg_read_field_def_dtfetchreq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtfetchreq(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 TrUserData);
dg_read_field_def_dtfetchreq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dtfetchreq_bucket(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, TrUserData);
      18 ->
	  d_field_dtfetchreq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, TrUserData);
      26 ->
	  d_field_dtfetchreq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, TrUserData);
      32 ->
	  d_field_dtfetchreq_r(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, TrUserData);
      40 ->
	  d_field_dtfetchreq_pr(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, TrUserData);
      48 ->
	  d_field_dtfetchreq_basic_quorum(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11,
					  TrUserData);
      56 ->
	  d_field_dtfetchreq_notfound_ok(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11,
					 TrUserData);
      64 ->
	  d_field_dtfetchreq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, TrUserData);
      72 ->
	  d_field_dtfetchreq_sloppy_quorum(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   TrUserData);
      80 ->
	  d_field_dtfetchreq_n_val(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, TrUserData);
      88 ->
	  d_field_dtfetchreq_include_context(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtfetchreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, TrUserData);
	    1 ->
		skip_64_dtfetchreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, TrUserData);
	    2 ->
		skip_length_delimited_dtfetchreq(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11, TrUserData);
	    5 ->
		skip_32_dtfetchreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, TrUserData)
	  end
    end;
dg_read_field_def_dtfetchreq(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, _) ->
    #dtfetchreq{bucket = F1, key = F2, type = F3, r = F4,
		pr = F5, basic_quorum = F6, notfound_ok = F7,
		timeout = F8, sloppy_quorum = F9, n_val = F10,
		include_context = F11}.

d_field_dtfetchreq_bucket(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_bucket(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData);
d_field_dtfetchreq_bucket(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtfetchreq(Rest2, 0, 0, NewFValue,
				  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_key(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   TrUserData);
d_field_dtfetchreq_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtfetchreq(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				  F11, TrUserData).


d_field_dtfetchreq_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_type(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    TrUserData);
d_field_dtfetchreq_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtfetchreq(Rest2, 0, 0, F1, F2,
				  NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_r(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		     TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_r(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_r(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  NewFValue, F5, F6, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_pr(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		      TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_pr(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_pr(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11,
		      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, NewFValue, F6, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_basic_quorum(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_basic_quorum(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_basic_quorum(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
				F11, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, NewFValue, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_notfound_ok(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_notfound_ok(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_notfound_ok(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			       F11, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, NewFValue, F8, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_timeout(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_timeout(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       TrUserData);
d_field_dtfetchreq_timeout(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, NewFValue, F9, F10, F11,
				  TrUserData).


d_field_dtfetchreq_sloppy_quorum(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_sloppy_quorum(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_sloppy_quorum(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				 F11, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, NewFValue, F10, F11,
				  TrUserData).


d_field_dtfetchreq_n_val(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_n_val(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     TrUserData);
d_field_dtfetchreq_n_val(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11,
			 TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, NewFValue, F11,
				  TrUserData).


d_field_dtfetchreq_include_context(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, TrUserData)
    when N < 57 ->
    d_field_dtfetchreq_include_context(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, TrUserData);
d_field_dtfetchreq_include_context(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtfetchreq(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, NewFValue,
				  TrUserData).


skip_varint_dtfetchreq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData) ->
    skip_varint_dtfetchreq(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, TrUserData);
skip_varint_dtfetchreq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData) ->
    dfp_read_field_def_dtfetchreq(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_length_delimited_dtfetchreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, TrUserData)
    when N < 57 ->
    skip_length_delimited_dtfetchreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, TrUserData);
skip_length_delimited_dtfetchreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtfetchreq(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_32_dtfetchreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dfp_read_field_def_dtfetchreq(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_64_dtfetchreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dfp_read_field_def_dtfetchreq(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


d_msg_dtvalue(Bin, TrUserData) ->
    dfp_read_field_def_dtvalue(Bin, 0, 0,
			       id(undefined, TrUserData), id([], TrUserData),
			       id([], TrUserData), id(undefined, TrUserData),
			       id([], TrUserData), TrUserData).

dfp_read_field_def_dtvalue(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, TrUserData) ->
    d_field_dtvalue_counter_value(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_dtvalue(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, TrUserData) ->
    d_field_dtvalue_set_value(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
dfp_read_field_def_dtvalue(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, TrUserData) ->
    d_field_dtvalue_map_value(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
dfp_read_field_def_dtvalue(<<32, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, TrUserData) ->
    d_field_dtvalue_hll_value(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
dfp_read_field_def_dtvalue(<<42, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, F5, TrUserData) ->
    d_field_dtvalue_gset_value(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
dfp_read_field_def_dtvalue(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, TrUserData) ->
    #dtvalue{counter_value = F1,
	     set_value = lists_reverse(F2, TrUserData),
	     map_value = lists_reverse(F3, TrUserData),
	     hll_value = F4,
	     gset_value = lists_reverse(F5, TrUserData)};
dfp_read_field_def_dtvalue(Other, Z1, Z2, F1, F2, F3,
			   F4, F5, TrUserData) ->
    dg_read_field_def_dtvalue(Other, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData).

dg_read_field_def_dtvalue(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtvalue(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
dg_read_field_def_dtvalue(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_dtvalue_counter_value(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      18 ->
	  d_field_dtvalue_set_value(Rest, 0, 0, F1, F2, F3, F4,
				    F5, TrUserData);
      26 ->
	  d_field_dtvalue_map_value(Rest, 0, 0, F1, F2, F3, F4,
				    F5, TrUserData);
      32 ->
	  d_field_dtvalue_hll_value(Rest, 0, 0, F1, F2, F3, F4,
				    F5, TrUserData);
      42 ->
	  d_field_dtvalue_gset_value(Rest, 0, 0, F1, F2, F3, F4,
				     F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtvalue(Rest, 0, 0, F1, F2, F3, F4, F5,
				    TrUserData);
	    1 ->
		skip_64_dtvalue(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
	    2 ->
		skip_length_delimited_dtvalue(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData);
	    5 ->
		skip_32_dtvalue(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData)
	  end
    end;
dg_read_field_def_dtvalue(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, TrUserData) ->
    #dtvalue{counter_value = F1,
	     set_value = lists_reverse(F2, TrUserData),
	     map_value = lists_reverse(F3, TrUserData),
	     hll_value = F4,
	     gset_value = lists_reverse(F5, TrUserData)}.

d_field_dtvalue_counter_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtvalue_counter_value(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_dtvalue_counter_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_dtvalue(Rest, 0, 0, NewFValue, F2,
			       F3, F4, F5, TrUserData).


d_field_dtvalue_set_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtvalue_set_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
d_field_dtvalue_set_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtvalue(Rest2, 0, 0, F1,
			       cons(NewFValue, F2, TrUserData), F3, F4, F5,
			       TrUserData).


d_field_dtvalue_map_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtvalue_map_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
d_field_dtvalue_map_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapentry(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_dtvalue(Rest2, 0, 0, F1, F2,
			       cons(NewFValue, F3, TrUserData), F4, F5,
			       TrUserData).


d_field_dtvalue_hll_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtvalue_hll_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, TrUserData);
d_field_dtvalue_hll_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtvalue(Rest, 0, 0, F1, F2, F3,
			       NewFValue, F5, TrUserData).


d_field_dtvalue_gset_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtvalue_gset_value(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, TrUserData);
d_field_dtvalue_gset_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtvalue(Rest2, 0, 0, F1, F2, F3, F4,
			       cons(NewFValue, F5, TrUserData), TrUserData).


skip_varint_dtvalue(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_dtvalue(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			TrUserData);
skip_varint_dtvalue(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_dtvalue(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData).


skip_length_delimited_dtvalue(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_dtvalue(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
skip_length_delimited_dtvalue(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtvalue(Rest2, 0, 0, F1, F2, F3, F4,
			       F5, TrUserData).


skip_32_dtvalue(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, TrUserData) ->
    dfp_read_field_def_dtvalue(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData).


skip_64_dtvalue(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, F5, TrUserData) ->
    dfp_read_field_def_dtvalue(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData).


d_msg_dtfetchresp(Bin, TrUserData) ->
    dfp_read_field_def_dtfetchresp(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_dtfetchresp(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_dtfetchresp_context(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_dtfetchresp(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_dtfetchresp_type(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_dtfetchresp(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_dtfetchresp_value(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_dtfetchresp(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #dtfetchresp{context = F1, type = F2, value = F3};
dfp_read_field_def_dtfetchresp(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_dtfetchresp(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_dtfetchresp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtfetchresp(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_dtfetchresp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dtfetchresp_context(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      16 ->
	  d_field_dtfetchresp_type(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      26 ->
	  d_field_dtfetchresp_value(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtfetchresp(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_dtfetchresp(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_dtfetchresp(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    5 ->
		skip_32_dtfetchresp(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_dtfetchresp(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #dtfetchresp{context = F1, type = F2, value = F3}.

d_field_dtfetchresp_context(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_dtfetchresp_context(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_dtfetchresp_context(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtfetchresp(Rest2, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_dtfetchresp_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_dtfetchresp_type(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_dtfetchresp_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_DtFetchResp.DataType'(Tmp),
    dfp_read_field_def_dtfetchresp(Rest, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_dtfetchresp_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_dtfetchresp_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_dtfetchresp_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_dtvalue(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_dtfetchresp(Rest2, 0, 0, F1, F2,
				   if F3 == undefined -> NewFValue;
				      true ->
					  merge_msg_dtvalue(F3, NewFValue,
							    TrUserData)
				   end,
				   TrUserData).


skip_varint_dtfetchresp(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_dtfetchresp(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_dtfetchresp(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_dtfetchresp(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_dtfetchresp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_dtfetchresp(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_dtfetchresp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtfetchresp(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_32_dtfetchresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_dtfetchresp(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_dtfetchresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_dtfetchresp(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_counterop(Bin, TrUserData) ->
    dfp_read_field_def_counterop(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_counterop(<<8, Rest/binary>>, Z1, Z2,
			     F1, TrUserData) ->
    d_field_counterop_increment(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_counterop(<<>>, 0, 0, F1, _) ->
    #counterop{increment = F1};
dfp_read_field_def_counterop(Other, Z1, Z2, F1,
			     TrUserData) ->
    dg_read_field_def_counterop(Other, Z1, Z2, F1,
				TrUserData).

dg_read_field_def_counterop(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_counterop(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
dg_read_field_def_counterop(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_counterop_increment(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_counterop(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_counterop(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_counterop(Rest, 0, 0, F1,
						TrUserData);
	    5 -> skip_32_counterop(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_counterop(<<>>, 0, 0, F1, _) ->
    #counterop{increment = F1}.

d_field_counterop_increment(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_counterop_increment(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_counterop_increment(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_counterop(Rest, 0, 0, NewFValue,
				 TrUserData).


skip_varint_counterop(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    skip_varint_counterop(Rest, Z1, Z2, F1, TrUserData);
skip_varint_counterop(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, TrUserData) ->
    dfp_read_field_def_counterop(Rest, Z1, Z2, F1,
				 TrUserData).


skip_length_delimited_counterop(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_counterop(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_counterop(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_counterop(Rest2, 0, 0, F1,
				 TrUserData).


skip_32_counterop(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_counterop(Rest, Z1, Z2, F1,
				 TrUserData).


skip_64_counterop(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_counterop(Rest, Z1, Z2, F1,
				 TrUserData).


d_msg_setop(Bin, TrUserData) ->
    dfp_read_field_def_setop(Bin, 0, 0, id([], TrUserData),
			     id([], TrUserData), TrUserData).

dfp_read_field_def_setop(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_setop_adds(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_setop(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_setop_removes(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_setop(<<>>, 0, 0, F1, F2,
			 TrUserData) ->
    #setop{adds = lists_reverse(F1, TrUserData),
	   removes = lists_reverse(F2, TrUserData)};
dfp_read_field_def_setop(Other, Z1, Z2, F1, F2,
			 TrUserData) ->
    dg_read_field_def_setop(Other, Z1, Z2, F1, F2,
			    TrUserData).

dg_read_field_def_setop(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_setop(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
dg_read_field_def_setop(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_setop_adds(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_setop_removes(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_setop(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_setop(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_setop(Rest, 0, 0, F1, F2,
					    TrUserData);
	    5 -> skip_32_setop(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_setop(<<>>, 0, 0, F1, F2,
			TrUserData) ->
    #setop{adds = lists_reverse(F1, TrUserData),
	   removes = lists_reverse(F2, TrUserData)}.

d_field_setop_adds(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_setop_adds(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_setop_adds(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_setop(Rest2, 0, 0,
			     cons(NewFValue, F1, TrUserData), F2, TrUserData).


d_field_setop_removes(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_setop_removes(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_setop_removes(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_setop(Rest2, 0, 0, F1,
			     cons(NewFValue, F2, TrUserData), TrUserData).


skip_varint_setop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    skip_varint_setop(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_setop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    dfp_read_field_def_setop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_length_delimited_setop(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_setop(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
skip_length_delimited_setop(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_setop(Rest2, 0, 0, F1, F2,
			     TrUserData).


skip_32_setop(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_setop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_64_setop(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_setop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


d_msg_gsetop(Bin, TrUserData) ->
    dfp_read_field_def_gsetop(Bin, 0, 0, id([], TrUserData),
			      TrUserData).

dfp_read_field_def_gsetop(<<10, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    d_field_gsetop_adds(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_gsetop(<<>>, 0, 0, F1, TrUserData) ->
    #gsetop{adds = lists_reverse(F1, TrUserData)};
dfp_read_field_def_gsetop(Other, Z1, Z2, F1,
			  TrUserData) ->
    dg_read_field_def_gsetop(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_gsetop(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gsetop(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
dg_read_field_def_gsetop(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_gsetop_adds(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_gsetop(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_gsetop(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_gsetop(Rest, 0, 0, F1,
					     TrUserData);
	    5 -> skip_32_gsetop(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_gsetop(<<>>, 0, 0, F1, TrUserData) ->
    #gsetop{adds = lists_reverse(F1, TrUserData)}.

d_field_gsetop_adds(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData)
    when N < 57 ->
    d_field_gsetop_adds(Rest, N + 7, X bsl N + Acc, F1,
			TrUserData);
d_field_gsetop_adds(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_gsetop(Rest2, 0, 0,
			      cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_gsetop(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, TrUserData) ->
    skip_varint_gsetop(Rest, Z1, Z2, F1, TrUserData);
skip_varint_gsetop(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, TrUserData) ->
    dfp_read_field_def_gsetop(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_gsetop(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gsetop(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
skip_length_delimited_gsetop(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gsetop(Rest2, 0, 0, F1, TrUserData).


skip_32_gsetop(<<_:32, Rest/binary>>, Z1, Z2, F1,
	       TrUserData) ->
    dfp_read_field_def_gsetop(Rest, Z1, Z2, F1, TrUserData).


skip_64_gsetop(<<_:64, Rest/binary>>, Z1, Z2, F1,
	       TrUserData) ->
    dfp_read_field_def_gsetop(Rest, Z1, Z2, F1, TrUserData).


d_msg_hllop(Bin, TrUserData) ->
    dfp_read_field_def_hllop(Bin, 0, 0, id([], TrUserData),
			     TrUserData).

dfp_read_field_def_hllop(<<10, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    d_field_hllop_adds(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_hllop(<<>>, 0, 0, F1, TrUserData) ->
    #hllop{adds = lists_reverse(F1, TrUserData)};
dfp_read_field_def_hllop(Other, Z1, Z2, F1,
			 TrUserData) ->
    dg_read_field_def_hllop(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_hllop(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_hllop(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
dg_read_field_def_hllop(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_hllop_adds(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_hllop(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_hllop(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_hllop(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_hllop(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_hllop(<<>>, 0, 0, F1, TrUserData) ->
    #hllop{adds = lists_reverse(F1, TrUserData)}.

d_field_hllop_adds(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, TrUserData)
    when N < 57 ->
    d_field_hllop_adds(Rest, N + 7, X bsl N + Acc, F1,
		       TrUserData);
d_field_hllop_adds(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_hllop(Rest2, 0, 0,
			     cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_hllop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    skip_varint_hllop(Rest, Z1, Z2, F1, TrUserData);
skip_varint_hllop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_hllop(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_hllop(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_hllop(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
skip_length_delimited_hllop(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_hllop(Rest2, 0, 0, F1, TrUserData).


skip_32_hllop(<<_:32, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_hllop(Rest, Z1, Z2, F1, TrUserData).


skip_64_hllop(<<_:64, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_hllop(Rest, Z1, Z2, F1, TrUserData).


d_msg_mapupdate(Bin, TrUserData) ->
    dfp_read_field_def_mapupdate(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_mapupdate(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_field(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_counter_op(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_set_op(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_register_op(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_flag_op(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_mapupdate_map_op(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, TrUserData);
dfp_read_field_def_mapupdate(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, _) ->
    #mapupdate{field = F1, counter_op = F2, set_op = F3,
	       register_op = F4, flag_op = F5, map_op = F6};
dfp_read_field_def_mapupdate(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, TrUserData) ->
    dg_read_field_def_mapupdate(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData).

dg_read_field_def_mapupdate(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mapupdate(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_mapupdate(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mapupdate_field(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, TrUserData);
      18 ->
	  d_field_mapupdate_counter_op(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, TrUserData);
      26 ->
	  d_field_mapupdate_set_op(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      34 ->
	  d_field_mapupdate_register_op(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, TrUserData);
      40 ->
	  d_field_mapupdate_flag_op(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, TrUserData);
      50 ->
	  d_field_mapupdate_map_op(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_mapupdate(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, TrUserData);
	    1 ->
		skip_64_mapupdate(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData);
	    2 ->
		skip_length_delimited_mapupdate(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, TrUserData);
	    5 ->
		skip_32_mapupdate(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  TrUserData)
	  end
    end;
dg_read_field_def_mapupdate(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, _) ->
    #mapupdate{field = F1, counter_op = F2, set_op = F3,
	       register_op = F4, flag_op = F5, map_op = F6}.

d_field_mapupdate_field(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_field(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, TrUserData);
d_field_mapupdate_field(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapfield(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapupdate(Rest2, 0, 0,
				 if F1 == undefined -> NewFValue;
				    true ->
					merge_msg_mapfield(F1, NewFValue,
							   TrUserData)
				 end,
				 F2, F3, F4, F5, F6, TrUserData).


d_field_mapupdate_counter_op(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_counter_op(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
d_field_mapupdate_counter_op(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_counterop(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapupdate(Rest2, 0, 0, F1,
				 if F2 == undefined -> NewFValue;
				    true ->
					merge_msg_counterop(F2, NewFValue,
							    TrUserData)
				 end,
				 F3, F4, F5, F6, TrUserData).


d_field_mapupdate_set_op(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_set_op(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_field_mapupdate_set_op(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_setop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_mapupdate(Rest2, 0, 0, F1, F2,
				 if F3 == undefined -> NewFValue;
				    true ->
					merge_msg_setop(F3, NewFValue,
							TrUserData)
				 end,
				 F4, F5, F6, TrUserData).


d_field_mapupdate_register_op(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_register_op(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				  TrUserData);
d_field_mapupdate_register_op(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_mapupdate(Rest2, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, TrUserData).


d_field_mapupdate_flag_op(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_flag_op(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, TrUserData);
d_field_mapupdate_flag_op(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_MapUpdate.FlagOp'(Tmp),
    dfp_read_field_def_mapupdate(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, TrUserData).


d_field_mapupdate_map_op(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_mapupdate_map_op(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, TrUserData);
d_field_mapupdate_map_op(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_mapupdate(Rest2, 0, 0, F1, F2, F3,
				 F4, F5,
				 if F6 == undefined -> NewFValue;
				    true ->
					merge_msg_mapop(F6, NewFValue,
							TrUserData)
				 end,
				 TrUserData).


skip_varint_mapupdate(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_mapupdate(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, TrUserData);
skip_varint_mapupdate(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapupdate(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_length_delimited_mapupdate(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_mapupdate(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
skip_length_delimited_mapupdate(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mapupdate(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_32_mapupdate(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapupdate(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


skip_64_mapupdate(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_mapupdate(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).


d_msg_mapop(Bin, TrUserData) ->
    dfp_read_field_def_mapop(Bin, 0, 0, id([], TrUserData),
			     id([], TrUserData), TrUserData).

dfp_read_field_def_mapop(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_mapop_removes(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_mapop(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_mapop_updates(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_mapop(<<>>, 0, 0, F1, F2,
			 TrUserData) ->
    #mapop{removes = lists_reverse(F1, TrUserData),
	   updates = lists_reverse(F2, TrUserData)};
dfp_read_field_def_mapop(Other, Z1, Z2, F1, F2,
			 TrUserData) ->
    dg_read_field_def_mapop(Other, Z1, Z2, F1, F2,
			    TrUserData).

dg_read_field_def_mapop(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_mapop(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
dg_read_field_def_mapop(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_mapop_removes(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_mapop_updates(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_mapop(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_mapop(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_mapop(Rest, 0, 0, F1, F2,
					    TrUserData);
	    5 -> skip_32_mapop(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_mapop(<<>>, 0, 0, F1, F2,
			TrUserData) ->
    #mapop{removes = lists_reverse(F1, TrUserData),
	   updates = lists_reverse(F2, TrUserData)}.

d_field_mapop_removes(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_mapop_removes(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_mapop_removes(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapfield(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapop(Rest2, 0, 0,
			     cons(NewFValue, F1, TrUserData), F2, TrUserData).


d_field_mapop_updates(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_mapop_updates(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_mapop_updates(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapupdate(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_mapop(Rest2, 0, 0, F1,
			     cons(NewFValue, F2, TrUserData), TrUserData).


skip_varint_mapop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    skip_varint_mapop(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_mapop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    dfp_read_field_def_mapop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_length_delimited_mapop(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_mapop(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
skip_length_delimited_mapop(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_mapop(Rest2, 0, 0, F1, F2,
			     TrUserData).


skip_32_mapop(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_mapop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_64_mapop(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_mapop(Rest, Z1, Z2, F1, F2,
			     TrUserData).


d_msg_dtop(Bin, TrUserData) ->
    dfp_read_field_def_dtop(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_dtop(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, TrUserData) ->
    d_field_dtop_counter_op(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, TrUserData);
dfp_read_field_def_dtop(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, TrUserData) ->
    d_field_dtop_set_op(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			TrUserData);
dfp_read_field_def_dtop(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, TrUserData) ->
    d_field_dtop_map_op(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			TrUserData);
dfp_read_field_def_dtop(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, TrUserData) ->
    d_field_dtop_hll_op(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			TrUserData);
dfp_read_field_def_dtop(<<42, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, TrUserData) ->
    d_field_dtop_gset_op(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 TrUserData);
dfp_read_field_def_dtop(<<>>, 0, 0, F1, F2, F3, F4, F5,
			_) ->
    #dtop{counter_op = F1, set_op = F2, map_op = F3,
	  hll_op = F4, gset_op = F5};
dfp_read_field_def_dtop(Other, Z1, Z2, F1, F2, F3, F4,
			F5, TrUserData) ->
    dg_read_field_def_dtop(Other, Z1, Z2, F1, F2, F3, F4,
			   F5, TrUserData).

dg_read_field_def_dtop(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtop(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, TrUserData);
dg_read_field_def_dtop(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dtop_counter_op(Rest, 0, 0, F1, F2, F3, F4, F5,
				  TrUserData);
      18 ->
	  d_field_dtop_set_op(Rest, 0, 0, F1, F2, F3, F4, F5,
			      TrUserData);
      26 ->
	  d_field_dtop_map_op(Rest, 0, 0, F1, F2, F3, F4, F5,
			      TrUserData);
      34 ->
	  d_field_dtop_hll_op(Rest, 0, 0, F1, F2, F3, F4, F5,
			      TrUserData);
      42 ->
	  d_field_dtop_gset_op(Rest, 0, 0, F1, F2, F3, F4, F5,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtop(Rest, 0, 0, F1, F2, F3, F4, F5,
				 TrUserData);
	    1 ->
		skip_64_dtop(Rest, 0, 0, F1, F2, F3, F4, F5,
			     TrUserData);
	    2 ->
		skip_length_delimited_dtop(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    5 ->
		skip_32_dtop(Rest, 0, 0, F1, F2, F3, F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_dtop(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       _) ->
    #dtop{counter_op = F1, set_op = F2, map_op = F3,
	  hll_op = F4, gset_op = F5}.

d_field_dtop_counter_op(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtop_counter_op(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, TrUserData);
d_field_dtop_counter_op(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_counterop(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_dtop(Rest2, 0, 0,
			    if F1 == undefined -> NewFValue;
			       true ->
				   merge_msg_counterop(F1, NewFValue,
						       TrUserData)
			    end,
			    F2, F3, F4, F5, TrUserData).


d_field_dtop_set_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtop_set_op(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, TrUserData);
d_field_dtop_set_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_setop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_dtop(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   merge_msg_setop(F2, NewFValue, TrUserData)
			    end,
			    F3, F4, F5, TrUserData).


d_field_dtop_map_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtop_map_op(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, TrUserData);
d_field_dtop_map_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_dtop(Rest2, 0, 0, F1, F2,
			    if F3 == undefined -> NewFValue;
			       true ->
				   merge_msg_mapop(F3, NewFValue, TrUserData)
			    end,
			    F4, F5, TrUserData).


d_field_dtop_hll_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtop_hll_op(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, TrUserData);
d_field_dtop_hll_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_hllop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_dtop(Rest2, 0, 0, F1, F2, F3,
			    if F4 == undefined -> NewFValue;
			       true ->
				   merge_msg_hllop(F4, NewFValue, TrUserData)
			    end,
			    F5, TrUserData).


d_field_dtop_gset_op(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_dtop_gset_op(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, TrUserData);
d_field_dtop_gset_op(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_gsetop(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_dtop(Rest2, 0, 0, F1, F2, F3, F4,
			    if F5 == undefined -> NewFValue;
			       true ->
				   merge_msg_gsetop(F5, NewFValue, TrUserData)
			    end,
			    TrUserData).


skip_varint_dtop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, TrUserData) ->
    skip_varint_dtop(Rest, Z1, Z2, F1, F2, F3, F4, F5,
		     TrUserData);
skip_varint_dtop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_dtop(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, TrUserData).


skip_length_delimited_dtop(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_dtop(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, TrUserData);
skip_length_delimited_dtop(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtop(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    TrUserData).


skip_32_dtop(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, TrUserData) ->
    dfp_read_field_def_dtop(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, TrUserData).


skip_64_dtop(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, TrUserData) ->
    dfp_read_field_def_dtop(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, TrUserData).


d_msg_dtupdatereq(Bin, TrUserData) ->
    dfp_read_field_def_dtupdatereq(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(false, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(true, TrUserData), TrUserData).

dfp_read_field_def_dtupdatereq(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13,
			       TrUserData);
dfp_read_field_def_dtupdatereq(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_key(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_type(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
dfp_read_field_def_dtupdatereq(<<34, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_context(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				TrUserData);
dfp_read_field_def_dtupdatereq(<<42, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_op(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<48, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_w(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<56, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_dw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<64, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_pw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<72, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_return_body(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<80, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_timeout(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				TrUserData);
dfp_read_field_def_dtupdatereq(<<88, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_sloppy_quorum(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<96, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_n_val(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13,
			      TrUserData);
dfp_read_field_def_dtupdatereq(<<104, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData) ->
    d_field_dtupdatereq_include_context(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, TrUserData);
dfp_read_field_def_dtupdatereq(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #dtupdatereq{bucket = F1, key = F2, type = F3,
		 context = F4, op = F5, w = F6, dw = F7, pw = F8,
		 return_body = F9, timeout = F10, sloppy_quorum = F11,
		 n_val = F12, include_context = F13};
dfp_read_field_def_dtupdatereq(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			       TrUserData) ->
    dg_read_field_def_dtupdatereq(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData).

dg_read_field_def_dtupdatereq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtupdatereq(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, TrUserData);
dg_read_field_def_dtupdatereq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dtupdatereq_bucket(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     TrUserData);
      18 ->
	  d_field_dtupdatereq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
      26 ->
	  d_field_dtupdatereq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
      34 ->
	  d_field_dtupdatereq_context(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      TrUserData);
      42 ->
	  d_field_dtupdatereq_op(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      48 ->
	  d_field_dtupdatereq_w(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
      56 ->
	  d_field_dtupdatereq_dw(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      64 ->
	  d_field_dtupdatereq_pw(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      72 ->
	  d_field_dtupdatereq_return_body(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, TrUserData);
      80 ->
	  d_field_dtupdatereq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      TrUserData);
      88 ->
	  d_field_dtupdatereq_sloppy_quorum(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, TrUserData);
      96 ->
	  d_field_dtupdatereq_n_val(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    TrUserData);
      104 ->
	  d_field_dtupdatereq_include_context(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtupdatereq(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13,
					TrUserData);
	    1 ->
		skip_64_dtupdatereq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, TrUserData);
	    2 ->
		skip_length_delimited_dtupdatereq(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13,
						  TrUserData);
	    5 ->
		skip_32_dtupdatereq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, TrUserData)
	  end
    end;
dg_read_field_def_dtupdatereq(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #dtupdatereq{bucket = F1, key = F2, type = F3,
		 context = F4, op = F5, w = F6, dw = F7, pw = F8,
		 return_body = F9, timeout = F10, sloppy_quorum = F11,
		 n_val = F12, include_context = F13}.

d_field_dtupdatereq_bucket(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_bucket(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, TrUserData);
d_field_dtupdatereq_bucket(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, TrUserData).


d_field_dtupdatereq_key(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_key(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    TrUserData);
d_field_dtupdatereq_key(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				   F11, F12, F13, TrUserData).


d_field_dtupdatereq_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_type(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
d_field_dtupdatereq_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, TrUserData).


d_field_dtupdatereq_context(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_context(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, TrUserData);
d_field_dtupdatereq_context(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11,
			    F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_op(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_op(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_dtupdatereq_op(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_dtop(Bs, TrUserData), TrUserData),
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, F1, F2, F3,
				   F4,
				   if F5 == undefined -> NewFValue;
				      true ->
					  merge_msg_dtop(F5, NewFValue,
							 TrUserData)
				   end,
				   F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData).


d_field_dtupdatereq_w(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_w(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  TrUserData);
d_field_dtupdatereq_w(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, F8, F9, F10, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_dw(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_dw(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_dtupdatereq_dw(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10, F11, F12,
		       F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_pw(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_pw(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_dtupdatereq_pw(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11, F12,
		       F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, NewFValue, F9, F10, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_return_body(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_return_body(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
d_field_dtupdatereq_return_body(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, NewFValue, F10, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_timeout(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_timeout(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, TrUserData);
d_field_dtupdatereq_timeout(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11,
			    F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				   F13, TrUserData).


d_field_dtupdatereq_sloppy_quorum(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_sloppy_quorum(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, TrUserData);
d_field_dtupdatereq_sloppy_quorum(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, _, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				   F13, TrUserData).


d_field_dtupdatereq_n_val(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_n_val(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, TrUserData);
d_field_dtupdatereq_n_val(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
			  F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				   F13, TrUserData).


d_field_dtupdatereq_include_context(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_dtupdatereq_include_context(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13,
					TrUserData);
d_field_dtupdatereq_include_context(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_dtupdatereq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   NewFValue, TrUserData).


skip_varint_dtupdatereq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData) ->
    skip_varint_dtupdatereq(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
skip_varint_dtupdatereq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData) ->
    dfp_read_field_def_dtupdatereq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData).


skip_length_delimited_dtupdatereq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    skip_length_delimited_dtupdatereq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, TrUserData);
skip_length_delimited_dtupdatereq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtupdatereq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData).


skip_32_dtupdatereq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData) ->
    dfp_read_field_def_dtupdatereq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData).


skip_64_dtupdatereq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData) ->
    dfp_read_field_def_dtupdatereq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData).


d_msg_dtupdateresp(Bin, TrUserData) ->
    dfp_read_field_def_dtupdateresp(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id([], TrUserData), id([], TrUserData),
				    id(undefined, TrUserData),
				    id([], TrUserData), TrUserData).

dfp_read_field_def_dtupdateresp(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_key(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_context(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_counter_value(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_set_value(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_map_value(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_hll_value(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<58, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_dtupdateresp_gset_value(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_dtupdateresp(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, TrUserData) ->
    #dtupdateresp{key = F1, context = F2,
		  counter_value = F3,
		  set_value = lists_reverse(F4, TrUserData),
		  map_value = lists_reverse(F5, TrUserData),
		  hll_value = F6,
		  gset_value = lists_reverse(F7, TrUserData)};
dfp_read_field_def_dtupdateresp(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_dtupdateresp(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_dtupdateresp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dtupdateresp(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
dg_read_field_def_dtupdateresp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dtupdateresp_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, TrUserData);
      18 ->
	  d_field_dtupdateresp_context(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      24 ->
	  d_field_dtupdateresp_counter_value(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, TrUserData);
      34 ->
	  d_field_dtupdateresp_set_value(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      42 ->
	  d_field_dtupdateresp_map_value(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      48 ->
	  d_field_dtupdateresp_hll_value(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      58 ->
	  d_field_dtupdateresp_gset_value(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dtupdateresp(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, TrUserData);
	    1 ->
		skip_64_dtupdateresp(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData);
	    2 ->
		skip_length_delimited_dtupdateresp(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
	    5 ->
		skip_32_dtupdateresp(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData)
	  end
    end;
dg_read_field_def_dtupdateresp(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, TrUserData) ->
    #dtupdateresp{key = F1, context = F2,
		  counter_value = F3,
		  set_value = lists_reverse(F4, TrUserData),
		  map_value = lists_reverse(F5, TrUserData),
		  hll_value = F6,
		  gset_value = lists_reverse(F7, TrUserData)}.

d_field_dtupdateresp_key(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_key(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, TrUserData);
d_field_dtupdateresp_key(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, TrUserData).


d_field_dtupdateresp_context(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_context(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_dtupdateresp_context(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, TrUserData).


d_field_dtupdateresp_counter_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_counter_value(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
d_field_dtupdateresp_counter_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7,
				   TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_dtupdateresp(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, TrUserData).


d_field_dtupdateresp_set_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_set_value(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_dtupdateresp_set_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, F1, F2, F3,
				    cons(NewFValue, F4, TrUserData), F5, F6, F7,
				    TrUserData).


d_field_dtupdateresp_map_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_map_value(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_dtupdateresp_map_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_mapentry(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, F1, F2, F3,
				    F4, cons(NewFValue, F5, TrUserData), F6, F7,
				    TrUserData).


d_field_dtupdateresp_hll_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_hll_value(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_dtupdateresp_hll_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_dtupdateresp(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, TrUserData).


d_field_dtupdateresp_gset_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_dtupdateresp_gset_value(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
d_field_dtupdateresp_gset_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, cons(NewFValue, F7, TrUserData),
				    TrUserData).


skip_varint_dtupdateresp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_dtupdateresp(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
skip_varint_dtupdateresp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_dtupdateresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_dtupdateresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_dtupdateresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
skip_length_delimited_dtupdateresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dtupdateresp(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, TrUserData).


skip_32_dtupdateresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_dtupdateresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_64_dtupdateresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_dtupdateresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).




'd_enum_MapField.MapFieldType'(1) -> 'COUNTER';
'd_enum_MapField.MapFieldType'(2) -> 'SET';
'd_enum_MapField.MapFieldType'(3) -> 'REGISTER';
'd_enum_MapField.MapFieldType'(4) -> 'FLAG';
'd_enum_MapField.MapFieldType'(5) -> 'MAP';
'd_enum_MapField.MapFieldType'(V) -> V.

'd_enum_DtFetchResp.DataType'(1) -> 'COUNTER';
'd_enum_DtFetchResp.DataType'(2) -> 'SET';
'd_enum_DtFetchResp.DataType'(3) -> 'MAP';
'd_enum_DtFetchResp.DataType'(4) -> 'HLL';
'd_enum_DtFetchResp.DataType'(5) -> 'GSET';
'd_enum_DtFetchResp.DataType'(V) -> V.

'd_enum_MapUpdate.FlagOp'(1) -> 'ENABLE';
'd_enum_MapUpdate.FlagOp'(2) -> 'DISABLE';
'd_enum_MapUpdate.FlagOp'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #mapfield{} ->
	  merge_msg_mapfield(Prev, New, TrUserData);
      #mapentry{} ->
	  merge_msg_mapentry(Prev, New, TrUserData);
      #dtfetchreq{} ->
	  merge_msg_dtfetchreq(Prev, New, TrUserData);
      #dtvalue{} -> merge_msg_dtvalue(Prev, New, TrUserData);
      #dtfetchresp{} ->
	  merge_msg_dtfetchresp(Prev, New, TrUserData);
      #counterop{} ->
	  merge_msg_counterop(Prev, New, TrUserData);
      #setop{} -> merge_msg_setop(Prev, New, TrUserData);
      #gsetop{} -> merge_msg_gsetop(Prev, New, TrUserData);
      #hllop{} -> merge_msg_hllop(Prev, New, TrUserData);
      #mapupdate{} ->
	  merge_msg_mapupdate(Prev, New, TrUserData);
      #mapop{} -> merge_msg_mapop(Prev, New, TrUserData);
      #dtop{} -> merge_msg_dtop(Prev, New, TrUserData);
      #dtupdatereq{} ->
	  merge_msg_dtupdatereq(Prev, New, TrUserData);
      #dtupdateresp{} ->
	  merge_msg_dtupdateresp(Prev, New, TrUserData)
    end.

merge_msg_mapfield(#mapfield{},
		   #mapfield{name = NFname, type = NFtype}, _) ->
    #mapfield{name = NFname, type = NFtype}.

merge_msg_mapentry(#mapentry{field = PFfield,
			     counter_value = PFcounter_value,
			     set_value = PFset_value,
			     register_value = PFregister_value,
			     flag_value = PFflag_value,
			     map_value = PFmap_value},
		   #mapentry{field = NFfield,
			     counter_value = NFcounter_value,
			     set_value = NFset_value,
			     register_value = NFregister_value,
			     flag_value = NFflag_value,
			     map_value = NFmap_value},
		   TrUserData) ->
    #mapentry{field =
		  if PFfield /= undefined, NFfield /= undefined ->
			 merge_msg_mapfield(PFfield, NFfield, TrUserData);
		     PFfield == undefined -> NFfield;
		     NFfield == undefined -> PFfield
		  end,
	      counter_value =
		  if NFcounter_value =:= undefined -> PFcounter_value;
		     true -> NFcounter_value
		  end,
	      set_value =
		  'erlang_++'(PFset_value, NFset_value, TrUserData),
	      register_value =
		  if NFregister_value =:= undefined -> PFregister_value;
		     true -> NFregister_value
		  end,
	      flag_value =
		  if NFflag_value =:= undefined -> PFflag_value;
		     true -> NFflag_value
		  end,
	      map_value =
		  'erlang_++'(PFmap_value, NFmap_value, TrUserData)}.

merge_msg_dtfetchreq(#dtfetchreq{r = PFr, pr = PFpr,
				 basic_quorum = PFbasic_quorum,
				 notfound_ok = PFnotfound_ok,
				 timeout = PFtimeout,
				 sloppy_quorum = PFsloppy_quorum,
				 n_val = PFn_val,
				 include_context = PFinclude_context},
		     #dtfetchreq{bucket = NFbucket, key = NFkey,
				 type = NFtype, r = NFr, pr = NFpr,
				 basic_quorum = NFbasic_quorum,
				 notfound_ok = NFnotfound_ok,
				 timeout = NFtimeout,
				 sloppy_quorum = NFsloppy_quorum,
				 n_val = NFn_val,
				 include_context = NFinclude_context},
		     _) ->
    #dtfetchreq{bucket = NFbucket, key = NFkey,
		type = NFtype,
		r =
		    if NFr =:= undefined -> PFr;
		       true -> NFr
		    end,
		pr =
		    if NFpr =:= undefined -> PFpr;
		       true -> NFpr
		    end,
		basic_quorum =
		    if NFbasic_quorum =:= undefined -> PFbasic_quorum;
		       true -> NFbasic_quorum
		    end,
		notfound_ok =
		    if NFnotfound_ok =:= undefined -> PFnotfound_ok;
		       true -> NFnotfound_ok
		    end,
		timeout =
		    if NFtimeout =:= undefined -> PFtimeout;
		       true -> NFtimeout
		    end,
		sloppy_quorum =
		    if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
		       true -> NFsloppy_quorum
		    end,
		n_val =
		    if NFn_val =:= undefined -> PFn_val;
		       true -> NFn_val
		    end,
		include_context =
		    if NFinclude_context =:= undefined -> PFinclude_context;
		       true -> NFinclude_context
		    end}.

merge_msg_dtvalue(#dtvalue{counter_value =
			       PFcounter_value,
			   set_value = PFset_value, map_value = PFmap_value,
			   hll_value = PFhll_value, gset_value = PFgset_value},
		  #dtvalue{counter_value = NFcounter_value,
			   set_value = NFset_value, map_value = NFmap_value,
			   hll_value = NFhll_value, gset_value = NFgset_value},
		  TrUserData) ->
    #dtvalue{counter_value =
		 if NFcounter_value =:= undefined -> PFcounter_value;
		    true -> NFcounter_value
		 end,
	     set_value =
		 'erlang_++'(PFset_value, NFset_value, TrUserData),
	     map_value =
		 'erlang_++'(PFmap_value, NFmap_value, TrUserData),
	     hll_value =
		 if NFhll_value =:= undefined -> PFhll_value;
		    true -> NFhll_value
		 end,
	     gset_value =
		 'erlang_++'(PFgset_value, NFgset_value, TrUserData)}.

merge_msg_dtfetchresp(#dtfetchresp{context = PFcontext,
				   value = PFvalue},
		      #dtfetchresp{context = NFcontext, type = NFtype,
				   value = NFvalue},
		      TrUserData) ->
    #dtfetchresp{context =
		     if NFcontext =:= undefined -> PFcontext;
			true -> NFcontext
		     end,
		 type = NFtype,
		 value =
		     if PFvalue /= undefined, NFvalue /= undefined ->
			    merge_msg_dtvalue(PFvalue, NFvalue, TrUserData);
			PFvalue == undefined -> NFvalue;
			NFvalue == undefined -> PFvalue
		     end}.

merge_msg_counterop(#counterop{increment = PFincrement},
		    #counterop{increment = NFincrement}, _) ->
    #counterop{increment =
		   if NFincrement =:= undefined -> PFincrement;
		      true -> NFincrement
		   end}.

merge_msg_setop(#setop{adds = PFadds,
		       removes = PFremoves},
		#setop{adds = NFadds, removes = NFremoves},
		TrUserData) ->
    #setop{adds = 'erlang_++'(PFadds, NFadds, TrUserData),
	   removes =
	       'erlang_++'(PFremoves, NFremoves, TrUserData)}.

merge_msg_gsetop(#gsetop{adds = PFadds},
		 #gsetop{adds = NFadds}, TrUserData) ->
    #gsetop{adds = 'erlang_++'(PFadds, NFadds, TrUserData)}.

merge_msg_hllop(#hllop{adds = PFadds},
		#hllop{adds = NFadds}, TrUserData) ->
    #hllop{adds = 'erlang_++'(PFadds, NFadds, TrUserData)}.

merge_msg_mapupdate(#mapupdate{field = PFfield,
			       counter_op = PFcounter_op, set_op = PFset_op,
			       register_op = PFregister_op, flag_op = PFflag_op,
			       map_op = PFmap_op},
		    #mapupdate{field = NFfield, counter_op = NFcounter_op,
			       set_op = NFset_op, register_op = NFregister_op,
			       flag_op = NFflag_op, map_op = NFmap_op},
		    TrUserData) ->
    #mapupdate{field =
		   if PFfield /= undefined, NFfield /= undefined ->
			  merge_msg_mapfield(PFfield, NFfield, TrUserData);
		      PFfield == undefined -> NFfield;
		      NFfield == undefined -> PFfield
		   end,
	       counter_op =
		   if PFcounter_op /= undefined,
		      NFcounter_op /= undefined ->
			  merge_msg_counterop(PFcounter_op, NFcounter_op,
					      TrUserData);
		      PFcounter_op == undefined -> NFcounter_op;
		      NFcounter_op == undefined -> PFcounter_op
		   end,
	       set_op =
		   if PFset_op /= undefined, NFset_op /= undefined ->
			  merge_msg_setop(PFset_op, NFset_op, TrUserData);
		      PFset_op == undefined -> NFset_op;
		      NFset_op == undefined -> PFset_op
		   end,
	       register_op =
		   if NFregister_op =:= undefined -> PFregister_op;
		      true -> NFregister_op
		   end,
	       flag_op =
		   if NFflag_op =:= undefined -> PFflag_op;
		      true -> NFflag_op
		   end,
	       map_op =
		   if PFmap_op /= undefined, NFmap_op /= undefined ->
			  merge_msg_mapop(PFmap_op, NFmap_op, TrUserData);
		      PFmap_op == undefined -> NFmap_op;
		      NFmap_op == undefined -> PFmap_op
		   end}.

merge_msg_mapop(#mapop{removes = PFremoves,
		       updates = PFupdates},
		#mapop{removes = NFremoves, updates = NFupdates},
		TrUserData) ->
    #mapop{removes =
	       'erlang_++'(PFremoves, NFremoves, TrUserData),
	   updates =
	       'erlang_++'(PFupdates, NFupdates, TrUserData)}.

merge_msg_dtop(#dtop{counter_op = PFcounter_op,
		     set_op = PFset_op, map_op = PFmap_op, hll_op = PFhll_op,
		     gset_op = PFgset_op},
	       #dtop{counter_op = NFcounter_op, set_op = NFset_op,
		     map_op = NFmap_op, hll_op = NFhll_op,
		     gset_op = NFgset_op},
	       TrUserData) ->
    #dtop{counter_op =
	      if PFcounter_op /= undefined,
		 NFcounter_op /= undefined ->
		     merge_msg_counterop(PFcounter_op, NFcounter_op,
					 TrUserData);
		 PFcounter_op == undefined -> NFcounter_op;
		 NFcounter_op == undefined -> PFcounter_op
	      end,
	  set_op =
	      if PFset_op /= undefined, NFset_op /= undefined ->
		     merge_msg_setop(PFset_op, NFset_op, TrUserData);
		 PFset_op == undefined -> NFset_op;
		 NFset_op == undefined -> PFset_op
	      end,
	  map_op =
	      if PFmap_op /= undefined, NFmap_op /= undefined ->
		     merge_msg_mapop(PFmap_op, NFmap_op, TrUserData);
		 PFmap_op == undefined -> NFmap_op;
		 NFmap_op == undefined -> PFmap_op
	      end,
	  hll_op =
	      if PFhll_op /= undefined, NFhll_op /= undefined ->
		     merge_msg_hllop(PFhll_op, NFhll_op, TrUserData);
		 PFhll_op == undefined -> NFhll_op;
		 NFhll_op == undefined -> PFhll_op
	      end,
	  gset_op =
	      if PFgset_op /= undefined, NFgset_op /= undefined ->
		     merge_msg_gsetop(PFgset_op, NFgset_op, TrUserData);
		 PFgset_op == undefined -> NFgset_op;
		 NFgset_op == undefined -> PFgset_op
	      end}.

merge_msg_dtupdatereq(#dtupdatereq{key = PFkey,
				   context = PFcontext, op = PFop, w = PFw,
				   dw = PFdw, pw = PFpw,
				   return_body = PFreturn_body,
				   timeout = PFtimeout,
				   sloppy_quorum = PFsloppy_quorum,
				   n_val = PFn_val,
				   include_context = PFinclude_context},
		      #dtupdatereq{bucket = NFbucket, key = NFkey,
				   type = NFtype, context = NFcontext,
				   op = NFop, w = NFw, dw = NFdw, pw = NFpw,
				   return_body = NFreturn_body,
				   timeout = NFtimeout,
				   sloppy_quorum = NFsloppy_quorum,
				   n_val = NFn_val,
				   include_context = NFinclude_context},
		      TrUserData) ->
    #dtupdatereq{bucket = NFbucket,
		 key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 type = NFtype,
		 context =
		     if NFcontext =:= undefined -> PFcontext;
			true -> NFcontext
		     end,
		 op =
		     if PFop /= undefined, NFop /= undefined ->
			    merge_msg_dtop(PFop, NFop, TrUserData);
			PFop == undefined -> NFop;
			NFop == undefined -> PFop
		     end,
		 w =
		     if NFw =:= undefined -> PFw;
			true -> NFw
		     end,
		 dw =
		     if NFdw =:= undefined -> PFdw;
			true -> NFdw
		     end,
		 pw =
		     if NFpw =:= undefined -> PFpw;
			true -> NFpw
		     end,
		 return_body =
		     if NFreturn_body =:= undefined -> PFreturn_body;
			true -> NFreturn_body
		     end,
		 timeout =
		     if NFtimeout =:= undefined -> PFtimeout;
			true -> NFtimeout
		     end,
		 sloppy_quorum =
		     if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
			true -> NFsloppy_quorum
		     end,
		 n_val =
		     if NFn_val =:= undefined -> PFn_val;
			true -> NFn_val
		     end,
		 include_context =
		     if NFinclude_context =:= undefined -> PFinclude_context;
			true -> NFinclude_context
		     end}.

merge_msg_dtupdateresp(#dtupdateresp{key = PFkey,
				     context = PFcontext,
				     counter_value = PFcounter_value,
				     set_value = PFset_value,
				     map_value = PFmap_value,
				     hll_value = PFhll_value,
				     gset_value = PFgset_value},
		       #dtupdateresp{key = NFkey, context = NFcontext,
				     counter_value = NFcounter_value,
				     set_value = NFset_value,
				     map_value = NFmap_value,
				     hll_value = NFhll_value,
				     gset_value = NFgset_value},
		       TrUserData) ->
    #dtupdateresp{key =
		      if NFkey =:= undefined -> PFkey;
			 true -> NFkey
		      end,
		  context =
		      if NFcontext =:= undefined -> PFcontext;
			 true -> NFcontext
		      end,
		  counter_value =
		      if NFcounter_value =:= undefined -> PFcounter_value;
			 true -> NFcounter_value
		      end,
		  set_value =
		      'erlang_++'(PFset_value, NFset_value, TrUserData),
		  map_value =
		      'erlang_++'(PFmap_value, NFmap_value, TrUserData),
		  hll_value =
		      if NFhll_value =:= undefined -> PFhll_value;
			 true -> NFhll_value
		      end,
		  gset_value =
		      'erlang_++'(PFgset_value, NFgset_value, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #mapfield{} ->
	  v_msg_mapfield(Msg, [mapfield], TrUserData);
      #mapentry{} ->
	  v_msg_mapentry(Msg, [mapentry], TrUserData);
      #dtfetchreq{} ->
	  v_msg_dtfetchreq(Msg, [dtfetchreq], TrUserData);
      #dtvalue{} -> v_msg_dtvalue(Msg, [dtvalue], TrUserData);
      #dtfetchresp{} ->
	  v_msg_dtfetchresp(Msg, [dtfetchresp], TrUserData);
      #counterop{} ->
	  v_msg_counterop(Msg, [counterop], TrUserData);
      #setop{} -> v_msg_setop(Msg, [setop], TrUserData);
      #gsetop{} -> v_msg_gsetop(Msg, [gsetop], TrUserData);
      #hllop{} -> v_msg_hllop(Msg, [hllop], TrUserData);
      #mapupdate{} ->
	  v_msg_mapupdate(Msg, [mapupdate], TrUserData);
      #mapop{} -> v_msg_mapop(Msg, [mapop], TrUserData);
      #dtop{} -> v_msg_dtop(Msg, [dtop], TrUserData);
      #dtupdatereq{} ->
	  v_msg_dtupdatereq(Msg, [dtupdatereq], TrUserData);
      #dtupdateresp{} ->
	  v_msg_dtupdateresp(Msg, [dtupdateresp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_mapfield/3}).
v_msg_mapfield(#mapfield{name = F1, type = F2}, Path,
	       _) ->
    v_type_bytes(F1, [name | Path]),
    'v_enum_MapField.MapFieldType'(F2, [type | Path]),
    ok;
v_msg_mapfield(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mapfield}, X, Path).

-dialyzer({nowarn_function,v_msg_mapentry/3}).
v_msg_mapentry(#mapentry{field = F1, counter_value = F2,
			 set_value = F3, register_value = F4, flag_value = F5,
			 map_value = F6},
	       Path, TrUserData) ->
    v_msg_mapfield(F1, [field | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_sint64(F2, [counter_value | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_bytes(Elem, [set_value | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F3, Path)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [register_value | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [flag_value | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_mapentry(Elem, [map_value | Path],
			       TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, mapentry}}, F6,
			 Path)
    end,
    ok;
v_msg_mapentry(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mapentry}, X, Path).

-dialyzer({nowarn_function,v_msg_dtfetchreq/3}).
v_msg_dtfetchreq(#dtfetchreq{bucket = F1, key = F2,
			     type = F3, r = F4, pr = F5, basic_quorum = F6,
			     notfound_ok = F7, timeout = F8, sloppy_quorum = F9,
			     n_val = F10, include_context = F11},
		 Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    v_type_bytes(F3, [type | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [r | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [pr | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [basic_quorum | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [notfound_ok | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [timeout | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [sloppy_quorum | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [n_val | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [include_context | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_dtvalue/3}).
v_msg_dtvalue(#dtvalue{counter_value = F1,
		       set_value = F2, map_value = F3, hll_value = F4,
		       gset_value = F5},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_sint64(F1, [counter_value | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_bytes(Elem, [set_value | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F2, Path)
    end,
    if is_list(F3) ->
	   _ = [v_msg_mapentry(Elem, [map_value | Path],
			       TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, mapentry}}, F3,
			 Path)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [hll_value | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_bytes(Elem, [gset_value | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F5, Path)
    end,
    ok;
v_msg_dtvalue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, dtvalue}, X, Path).

-dialyzer({nowarn_function,v_msg_dtfetchresp/3}).
v_msg_dtfetchresp(#dtfetchresp{context = F1, type = F2,
			       value = F3},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [context | Path])
    end,
    'v_enum_DtFetchResp.DataType'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_dtvalue(F3, [value | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_counterop/3}).
v_msg_counterop(#counterop{increment = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_sint64(F1, [increment | Path])
    end,
    ok;
v_msg_counterop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, counterop}, X, Path).

-dialyzer({nowarn_function,v_msg_setop/3}).
v_msg_setop(#setop{adds = F1, removes = F2}, Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [adds | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    if is_list(F2) ->
	   _ = [v_type_bytes(Elem, [removes | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F2, Path)
    end,
    ok;
v_msg_setop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, setop}, X, Path).

-dialyzer({nowarn_function,v_msg_gsetop/3}).
v_msg_gsetop(#gsetop{adds = F1}, Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [adds | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    ok;
v_msg_gsetop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gsetop}, X, Path).

-dialyzer({nowarn_function,v_msg_hllop/3}).
v_msg_hllop(#hllop{adds = F1}, Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [adds | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    ok;
v_msg_hllop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, hllop}, X, Path).

-dialyzer({nowarn_function,v_msg_mapupdate/3}).
v_msg_mapupdate(#mapupdate{field = F1, counter_op = F2,
			   set_op = F3, register_op = F4, flag_op = F5,
			   map_op = F6},
		Path, TrUserData) ->
    v_msg_mapfield(F1, [field | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_msg_counterop(F2, [counter_op | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_setop(F3, [set_op | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [register_op | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_enum_MapUpdate.FlagOp'(F5, [flag_op | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_mapop(F6, [map_op | Path], TrUserData)
    end,
    ok;
v_msg_mapupdate(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mapupdate}, X, Path).

-dialyzer({nowarn_function,v_msg_mapop/3}).
v_msg_mapop(#mapop{removes = F1, updates = F2}, Path,
	    TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_mapfield(Elem, [removes | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, mapfield}}, F1,
			 Path)
    end,
    if is_list(F2) ->
	   _ = [v_msg_mapupdate(Elem, [updates | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, mapupdate}}, F2,
			 Path)
    end,
    ok;
v_msg_mapop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, mapop}, X, Path).

-dialyzer({nowarn_function,v_msg_dtop/3}).
v_msg_dtop(#dtop{counter_op = F1, set_op = F2,
		 map_op = F3, hll_op = F4, gset_op = F5},
	   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_counterop(F1, [counter_op | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_setop(F2, [set_op | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_mapop(F3, [map_op | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_hllop(F4, [hll_op | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_gsetop(F5, [gset_op | Path], TrUserData)
    end,
    ok;
v_msg_dtop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, dtop}, X, Path).

-dialyzer({nowarn_function,v_msg_dtupdatereq/3}).
v_msg_dtupdatereq(#dtupdatereq{bucket = F1, key = F2,
			       type = F3, context = F4, op = F5, w = F6,
			       dw = F7, pw = F8, return_body = F9,
			       timeout = F10, sloppy_quorum = F11, n_val = F12,
			       include_context = F13},
		  Path, TrUserData) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [key | Path])
    end,
    v_type_bytes(F3, [type | Path]),
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [context | Path])
    end,
    v_msg_dtop(F5, [op | Path], TrUserData),
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [w | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [dw | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [pw | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [return_body | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [timeout | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [sloppy_quorum | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [n_val | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [include_context | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_dtupdateresp/3}).
v_msg_dtupdateresp(#dtupdateresp{key = F1, context = F2,
				 counter_value = F3, set_value = F4,
				 map_value = F5, hll_value = F6,
				 gset_value = F7},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [context | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_sint64(F3, [counter_value | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_bytes(Elem, [set_value | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F4, Path)
    end,
    if is_list(F5) ->
	   _ = [v_msg_mapentry(Elem, [map_value | Path],
			       TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, mapentry}}, F5,
			 Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [hll_value | Path])
    end,
    if is_list(F7) ->
	   _ = [v_type_bytes(Elem, [gset_value | Path])
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F7, Path)
    end,
    ok.

-dialyzer({nowarn_function,'v_enum_MapField.MapFieldType'/2}).
'v_enum_MapField.MapFieldType'('COUNTER', _Path) -> ok;
'v_enum_MapField.MapFieldType'('SET', _Path) -> ok;
'v_enum_MapField.MapFieldType'('REGISTER', _Path) -> ok;
'v_enum_MapField.MapFieldType'('FLAG', _Path) -> ok;
'v_enum_MapField.MapFieldType'('MAP', _Path) -> ok;
'v_enum_MapField.MapFieldType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_MapField.MapFieldType'(X, Path) ->
    mk_type_error({invalid_enum, 'MapField.MapFieldType'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_DtFetchResp.DataType'/2}).
'v_enum_DtFetchResp.DataType'('COUNTER', _Path) -> ok;
'v_enum_DtFetchResp.DataType'('SET', _Path) -> ok;
'v_enum_DtFetchResp.DataType'('MAP', _Path) -> ok;
'v_enum_DtFetchResp.DataType'('HLL', _Path) -> ok;
'v_enum_DtFetchResp.DataType'('GSET', _Path) -> ok;
'v_enum_DtFetchResp.DataType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_DtFetchResp.DataType'(X, Path) ->
    mk_type_error({invalid_enum, 'DtFetchResp.DataType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_MapUpdate.FlagOp'/2}).
'v_enum_MapUpdate.FlagOp'('ENABLE', _Path) -> ok;
'v_enum_MapUpdate.FlagOp'('DISABLE', _Path) -> ok;
'v_enum_MapUpdate.FlagOp'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_MapUpdate.FlagOp'(X, Path) ->
    mk_type_error({invalid_enum, 'MapUpdate.FlagOp'}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint64/2}).
v_type_sint64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_sint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint64, signed, 64},
		  N, Path);
v_type_sint64(X, Path) ->
    mk_type_error({bad_integer, sint64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'MapField.MapFieldType'},
      [{'COUNTER', 1}, {'SET', 2}, {'REGISTER', 3},
       {'FLAG', 4}, {'MAP', 5}]},
     {{enum, 'DtFetchResp.DataType'},
      [{'COUNTER', 1}, {'SET', 2}, {'MAP', 3}, {'HLL', 4},
       {'GSET', 5}]},
     {{enum, 'MapUpdate.FlagOp'},
      [{'ENABLE', 1}, {'DISABLE', 2}]},
     {{msg, mapfield},
      [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3},
	{type, {enum, 'MapField.MapFieldType'}},
	{occurrence, required}, {opts, []}]]},
     {{msg, mapentry},
      [[{name, field}, {fnum, 1}, {rnum, 2},
	{type, {msg, mapfield}}, {occurrence, required},
	{opts, []}],
       [{name, counter_value}, {fnum, 2}, {rnum, 3},
	{type, sint64}, {occurrence, optional}, {opts, []}],
       [{name, set_value}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, register_value}, {fnum, 4}, {rnum, 5},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, flag_value}, {fnum, 5}, {rnum, 6}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, map_value}, {fnum, 6}, {rnum, 7},
	{type, {msg, mapentry}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, dtfetchreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, r}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 5}, {rnum, 6}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 6}, {rnum, 7},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 8}, {rnum, 9}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 9}, {rnum, 10},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 10}, {rnum, 11}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, include_context}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional},
	{opts, [{default, true}]}]]},
     {{msg, dtvalue},
      [[{name, counter_value}, {fnum, 1}, {rnum, 2},
	{type, sint64}, {occurrence, optional}, {opts, []}],
       [{name, set_value}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, map_value}, {fnum, 3}, {rnum, 4},
	{type, {msg, mapentry}}, {occurrence, repeated},
	{opts, []}],
       [{name, hll_value}, {fnum, 4}, {rnum, 5},
	{type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, gset_value}, {fnum, 5}, {rnum, 6},
	{type, bytes}, {occurrence, repeated}, {opts, []}]]},
     {{msg, dtfetchresp},
      [[{name, context}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3},
	{type, {enum, 'DtFetchResp.DataType'}},
	{occurrence, required}, {opts, []}],
       [{name, value}, {fnum, 3}, {rnum, 4},
	{type, {msg, dtvalue}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, counterop},
      [[{name, increment}, {fnum, 1}, {rnum, 2},
	{type, sint64}, {occurrence, optional}, {opts, []}]]},
     {{msg, setop},
      [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, removes}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, gsetop},
      [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, hllop},
      [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, mapupdate},
      [[{name, field}, {fnum, 1}, {rnum, 2},
	{type, {msg, mapfield}}, {occurrence, required},
	{opts, []}],
       [{name, counter_op}, {fnum, 2}, {rnum, 3},
	{type, {msg, counterop}}, {occurrence, optional},
	{opts, []}],
       [{name, set_op}, {fnum, 3}, {rnum, 4},
	{type, {msg, setop}}, {occurrence, optional},
	{opts, []}],
       [{name, register_op}, {fnum, 4}, {rnum, 5},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, flag_op}, {fnum, 5}, {rnum, 6},
	{type, {enum, 'MapUpdate.FlagOp'}},
	{occurrence, optional}, {opts, []}],
       [{name, map_op}, {fnum, 6}, {rnum, 7},
	{type, {msg, mapop}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, mapop},
      [[{name, removes}, {fnum, 1}, {rnum, 2},
	{type, {msg, mapfield}}, {occurrence, repeated},
	{opts, []}],
       [{name, updates}, {fnum, 2}, {rnum, 3},
	{type, {msg, mapupdate}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, dtop},
      [[{name, counter_op}, {fnum, 1}, {rnum, 2},
	{type, {msg, counterop}}, {occurrence, optional},
	{opts, []}],
       [{name, set_op}, {fnum, 2}, {rnum, 3},
	{type, {msg, setop}}, {occurrence, optional},
	{opts, []}],
       [{name, map_op}, {fnum, 3}, {rnum, 4},
	{type, {msg, mapop}}, {occurrence, optional},
	{opts, []}],
       [{name, hll_op}, {fnum, 4}, {rnum, 5},
	{type, {msg, hllop}}, {occurrence, optional},
	{opts, []}],
       [{name, gset_op}, {fnum, 5}, {rnum, 6},
	{type, {msg, gsetop}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, dtupdatereq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, context}, {fnum, 4}, {rnum, 5}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, op}, {fnum, 5}, {rnum, 6}, {type, {msg, dtop}},
	{occurrence, required}, {opts, []}],
       [{name, w}, {fnum, 6}, {rnum, 7}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 7}, {rnum, 8}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, return_body}, {fnum, 9}, {rnum, 10},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, timeout}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, include_context}, {fnum, 13}, {rnum, 14},
	{type, bool}, {occurrence, optional},
	{opts, [{default, true}]}]]},
     {{msg, dtupdateresp},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, context}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, counter_value}, {fnum, 3}, {rnum, 4},
	{type, sint64}, {occurrence, optional}, {opts, []}],
       [{name, set_value}, {fnum, 4}, {rnum, 5}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, map_value}, {fnum, 5}, {rnum, 6},
	{type, {msg, mapentry}}, {occurrence, repeated},
	{opts, []}],
       [{name, hll_value}, {fnum, 6}, {rnum, 7},
	{type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, gset_value}, {fnum, 7}, {rnum, 8},
	{type, bytes}, {occurrence, repeated}, {opts, []}]]}].


get_msg_names() ->
    [mapfield, mapentry, dtfetchreq, dtvalue, dtfetchresp,
     counterop, setop, gsetop, hllop, mapupdate, mapop, dtop,
     dtupdatereq, dtupdateresp].


get_enum_names() ->
    ['MapField.MapFieldType', 'DtFetchResp.DataType',
     'MapUpdate.FlagOp'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(mapfield) ->
    [[{name, name}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3},
      {type, {enum, 'MapField.MapFieldType'}},
      {occurrence, required}, {opts, []}]];
find_msg_def(mapentry) ->
    [[{name, field}, {fnum, 1}, {rnum, 2},
      {type, {msg, mapfield}}, {occurrence, required},
      {opts, []}],
     [{name, counter_value}, {fnum, 2}, {rnum, 3},
      {type, sint64}, {occurrence, optional}, {opts, []}],
     [{name, set_value}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, register_value}, {fnum, 4}, {rnum, 5},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, flag_value}, {fnum, 5}, {rnum, 6}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, map_value}, {fnum, 6}, {rnum, 7},
      {type, {msg, mapentry}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(dtfetchreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, r}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 5}, {rnum, 6}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 6}, {rnum, 7},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 8}, {rnum, 9}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 9}, {rnum, 10},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 10}, {rnum, 11}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, include_context}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional},
      {opts, [{default, true}]}]];
find_msg_def(dtvalue) ->
    [[{name, counter_value}, {fnum, 1}, {rnum, 2},
      {type, sint64}, {occurrence, optional}, {opts, []}],
     [{name, set_value}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, map_value}, {fnum, 3}, {rnum, 4},
      {type, {msg, mapentry}}, {occurrence, repeated},
      {opts, []}],
     [{name, hll_value}, {fnum, 4}, {rnum, 5},
      {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, gset_value}, {fnum, 5}, {rnum, 6},
      {type, bytes}, {occurrence, repeated}, {opts, []}]];
find_msg_def(dtfetchresp) ->
    [[{name, context}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3},
      {type, {enum, 'DtFetchResp.DataType'}},
      {occurrence, required}, {opts, []}],
     [{name, value}, {fnum, 3}, {rnum, 4},
      {type, {msg, dtvalue}}, {occurrence, optional},
      {opts, []}]];
find_msg_def(counterop) ->
    [[{name, increment}, {fnum, 1}, {rnum, 2},
      {type, sint64}, {occurrence, optional}, {opts, []}]];
find_msg_def(setop) ->
    [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, removes}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, repeated}, {opts, []}]];
find_msg_def(gsetop) ->
    [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}]];
find_msg_def(hllop) ->
    [[{name, adds}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}]];
find_msg_def(mapupdate) ->
    [[{name, field}, {fnum, 1}, {rnum, 2},
      {type, {msg, mapfield}}, {occurrence, required},
      {opts, []}],
     [{name, counter_op}, {fnum, 2}, {rnum, 3},
      {type, {msg, counterop}}, {occurrence, optional},
      {opts, []}],
     [{name, set_op}, {fnum, 3}, {rnum, 4},
      {type, {msg, setop}}, {occurrence, optional},
      {opts, []}],
     [{name, register_op}, {fnum, 4}, {rnum, 5},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, flag_op}, {fnum, 5}, {rnum, 6},
      {type, {enum, 'MapUpdate.FlagOp'}},
      {occurrence, optional}, {opts, []}],
     [{name, map_op}, {fnum, 6}, {rnum, 7},
      {type, {msg, mapop}}, {occurrence, optional},
      {opts, []}]];
find_msg_def(mapop) ->
    [[{name, removes}, {fnum, 1}, {rnum, 2},
      {type, {msg, mapfield}}, {occurrence, repeated},
      {opts, []}],
     [{name, updates}, {fnum, 2}, {rnum, 3},
      {type, {msg, mapupdate}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(dtop) ->
    [[{name, counter_op}, {fnum, 1}, {rnum, 2},
      {type, {msg, counterop}}, {occurrence, optional},
      {opts, []}],
     [{name, set_op}, {fnum, 2}, {rnum, 3},
      {type, {msg, setop}}, {occurrence, optional},
      {opts, []}],
     [{name, map_op}, {fnum, 3}, {rnum, 4},
      {type, {msg, mapop}}, {occurrence, optional},
      {opts, []}],
     [{name, hll_op}, {fnum, 4}, {rnum, 5},
      {type, {msg, hllop}}, {occurrence, optional},
      {opts, []}],
     [{name, gset_op}, {fnum, 5}, {rnum, 6},
      {type, {msg, gsetop}}, {occurrence, optional},
      {opts, []}]];
find_msg_def(dtupdatereq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, context}, {fnum, 4}, {rnum, 5}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, op}, {fnum, 5}, {rnum, 6}, {type, {msg, dtop}},
      {occurrence, required}, {opts, []}],
     [{name, w}, {fnum, 6}, {rnum, 7}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 7}, {rnum, 8}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, return_body}, {fnum, 9}, {rnum, 10},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, timeout}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, include_context}, {fnum, 13}, {rnum, 14},
      {type, bool}, {occurrence, optional},
      {opts, [{default, true}]}]];
find_msg_def(dtupdateresp) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, context}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, counter_value}, {fnum, 3}, {rnum, 4},
      {type, sint64}, {occurrence, optional}, {opts, []}],
     [{name, set_value}, {fnum, 4}, {rnum, 5}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, map_value}, {fnum, 5}, {rnum, 6},
      {type, {msg, mapentry}}, {occurrence, repeated},
      {opts, []}],
     [{name, hll_value}, {fnum, 6}, {rnum, 7},
      {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, gset_value}, {fnum, 7}, {rnum, 8},
      {type, bytes}, {occurrence, repeated}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('MapField.MapFieldType') ->
    [{'COUNTER', 1}, {'SET', 2}, {'REGISTER', 3},
     {'FLAG', 4}, {'MAP', 5}];
find_enum_def('DtFetchResp.DataType') ->
    [{'COUNTER', 1}, {'SET', 2}, {'MAP', 3}, {'HLL', 4},
     {'GSET', 5}];
find_enum_def('MapUpdate.FlagOp') ->
    [{'ENABLE', 1}, {'DISABLE', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('MapField.MapFieldType', Value) ->
    'enum_symbol_by_value_MapField.MapFieldType'(Value);
enum_symbol_by_value('DtFetchResp.DataType', Value) ->
    'enum_symbol_by_value_DtFetchResp.DataType'(Value);
enum_symbol_by_value('MapUpdate.FlagOp', Value) ->
    'enum_symbol_by_value_MapUpdate.FlagOp'(Value).


enum_value_by_symbol('MapField.MapFieldType', Sym) ->
    'enum_value_by_symbol_MapField.MapFieldType'(Sym);
enum_value_by_symbol('DtFetchResp.DataType', Sym) ->
    'enum_value_by_symbol_DtFetchResp.DataType'(Sym);
enum_value_by_symbol('MapUpdate.FlagOp', Sym) ->
    'enum_value_by_symbol_MapUpdate.FlagOp'(Sym).


'enum_symbol_by_value_MapField.MapFieldType'(1) ->
    'COUNTER';
'enum_symbol_by_value_MapField.MapFieldType'(2) ->
    'SET';
'enum_symbol_by_value_MapField.MapFieldType'(3) ->
    'REGISTER';
'enum_symbol_by_value_MapField.MapFieldType'(4) ->
    'FLAG';
'enum_symbol_by_value_MapField.MapFieldType'(5) ->
    'MAP'.


'enum_value_by_symbol_MapField.MapFieldType'('COUNTER') ->
    1;
'enum_value_by_symbol_MapField.MapFieldType'('SET') ->
    2;
'enum_value_by_symbol_MapField.MapFieldType'('REGISTER') ->
    3;
'enum_value_by_symbol_MapField.MapFieldType'('FLAG') ->
    4;
'enum_value_by_symbol_MapField.MapFieldType'('MAP') ->
    5.

'enum_symbol_by_value_DtFetchResp.DataType'(1) ->
    'COUNTER';
'enum_symbol_by_value_DtFetchResp.DataType'(2) -> 'SET';
'enum_symbol_by_value_DtFetchResp.DataType'(3) -> 'MAP';
'enum_symbol_by_value_DtFetchResp.DataType'(4) -> 'HLL';
'enum_symbol_by_value_DtFetchResp.DataType'(5) ->
    'GSET'.


'enum_value_by_symbol_DtFetchResp.DataType'('COUNTER') ->
    1;
'enum_value_by_symbol_DtFetchResp.DataType'('SET') -> 2;
'enum_value_by_symbol_DtFetchResp.DataType'('MAP') -> 3;
'enum_value_by_symbol_DtFetchResp.DataType'('HLL') -> 4;
'enum_value_by_symbol_DtFetchResp.DataType'('GSET') ->
    5.

'enum_symbol_by_value_MapUpdate.FlagOp'(1) -> 'ENABLE';
'enum_symbol_by_value_MapUpdate.FlagOp'(2) -> 'DISABLE'.


'enum_value_by_symbol_MapUpdate.FlagOp'('ENABLE') -> 1;
'enum_value_by_symbol_MapUpdate.FlagOp'('DISABLE') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
