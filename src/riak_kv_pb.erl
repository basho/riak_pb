%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(riak_kv_pb).

-export([encode_msg/1, encode_msg/2]).
-export([encode/1]). %% epb compatibility
-export([encode_rpblink/1]).
-export([encode_rpbpair/1]).
-export([encode_rpbcontent/1]).
-export([encode_rpbgetresp/1]).
-export([encode_rpbindexobject/1]).
-export([encode_rpbmodfun/1]).
-export([encode_rpbcommithook/1]).
-export([encode_rpbbucketprops/1]).
-export([encode_rpbresetbucketreq/1]).
-export([encode_rpbcsbucketreq/1]).
-export([encode_rpbsetclientidreq/1]).
-export([encode_rpbcounterupdatereq/1]).
-export([encode_rpblistbucketsreq/1]).
-export([encode_rpbbucketkeypreflistitem/1]).
-export([encode_rpbgetbucketkeypreflistresp/1]).
-export([encode_rpblistbucketsresp/1]).
-export([encode_rpbputresp/1]).
-export([encode_rpbgetclientidresp/1]).
-export([encode_rpbcoverageentry/1]).
-export([encode_rpbsetbuckettypereq/1]).
-export([encode_rpbgetbuckettypereq/1]).
-export([encode_rpbdelreq/1]).
-export([encode_rpbputreq/1]).
-export([encode_rpbgetreq/1]).
-export([encode_rpbgetbucketkeypreflistreq/1]).
-export([encode_rpbindexresp/1]).
-export([encode_rpbgetserverinforesp/1]).
-export([encode_rpbcsbucketresp/1]).
-export([encode_rpbmapredresp/1]).
-export([encode_rpbcoveragereq/1]).
-export([encode_rpbsetbucketreq/1]).
-export([encode_rpbgetbucketreq/1]).
-export([encode_rpblistkeysresp/1]).
-export([encode_rpbindexreq/1]).
-export([encode_rpbcountergetreq/1]).
-export([encode_rpblistkeysreq/1]).
-export([encode_rpbauthreq/1]).
-export([encode_rpbmapredreq/1]).
-export([encode_rpbcounterupdateresp/1]).
-export([encode_rpbgetbucketresp/1]).
-export([encode_rpbcountergetresp/1]).
-export([encode_rpbindexbodyresp/1]).
-export([encode_rpbcoverageresp/1]).
-export([encode_rpberrorresp/1]).

-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([decode/2]). %% epb compatibility
-export([decode_rpblink/1]).
-export([decode_rpbpair/1]).
-export([decode_rpbcontent/1]).
-export([decode_rpbgetresp/1]).
-export([decode_rpbindexobject/1]).
-export([decode_rpbmodfun/1]).
-export([decode_rpbcommithook/1]).
-export([decode_rpbbucketprops/1]).
-export([decode_rpbresetbucketreq/1]).
-export([decode_rpbcsbucketreq/1]).
-export([decode_rpbsetclientidreq/1]).
-export([decode_rpbcounterupdatereq/1]).
-export([decode_rpblistbucketsreq/1]).
-export([decode_rpbbucketkeypreflistitem/1]).
-export([decode_rpbgetbucketkeypreflistresp/1]).
-export([decode_rpblistbucketsresp/1]).
-export([decode_rpbputresp/1]).
-export([decode_rpbgetclientidresp/1]).
-export([decode_rpbcoverageentry/1]).
-export([decode_rpbsetbuckettypereq/1]).
-export([decode_rpbgetbuckettypereq/1]).
-export([decode_rpbdelreq/1]).
-export([decode_rpbputreq/1]).
-export([decode_rpbgetreq/1]).
-export([decode_rpbgetbucketkeypreflistreq/1]).
-export([decode_rpbindexresp/1]).
-export([decode_rpbgetserverinforesp/1]).
-export([decode_rpbcsbucketresp/1]).
-export([decode_rpbmapredresp/1]).
-export([decode_rpbcoveragereq/1]).
-export([decode_rpbsetbucketreq/1]).
-export([decode_rpbgetbucketreq/1]).
-export([decode_rpblistkeysresp/1]).
-export([decode_rpbindexreq/1]).
-export([decode_rpbcountergetreq/1]).
-export([decode_rpblistkeysreq/1]).
-export([decode_rpbauthreq/1]).
-export([decode_rpbmapredreq/1]).
-export([decode_rpbcounterupdateresp/1]).
-export([decode_rpbgetbucketresp/1]).
-export([decode_rpbcountergetresp/1]).
-export([decode_rpbindexbodyresp/1]).
-export([decode_rpbcoverageresp/1]).
-export([decode_rpberrorresp/1]).

-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_RpbIndexReq.IndexQueryType'/1, 'enum_value_by_symbol_RpbIndexReq.IndexQueryType'/1]).
-export(['enum_symbol_by_value_RpbBucketProps.RpbReplMode'/1, 'enum_value_by_symbol_RpbBucketProps.RpbReplMode'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_kv_pb.hrl").

%% enumerated types
-type 'RpbIndexReq.IndexQueryType'() :: 'eq' | 'range'.
-type 'RpbBucketProps.RpbReplMode'() :: 'FALSE' | 'REALTIME' | 'FULLSYNC' | 'TRUE'.
-export_type(['RpbIndexReq.IndexQueryType'/0, 'RpbBucketProps.RpbReplMode'/0]).

%% message types
-type rpblink() :: #rpblink{}.
-type rpbpair() :: #rpbpair{}.
-type rpbcontent() :: #rpbcontent{}.
-type rpbgetresp() :: #rpbgetresp{}.
-type rpbindexobject() :: #rpbindexobject{}.
-type rpbmodfun() :: #rpbmodfun{}.
-type rpbcommithook() :: #rpbcommithook{}.
-type rpbbucketprops() :: #rpbbucketprops{}.
-type rpbresetbucketreq() :: #rpbresetbucketreq{}.
-type rpbcsbucketreq() :: #rpbcsbucketreq{}.
-type rpbsetclientidreq() :: #rpbsetclientidreq{}.
-type rpbcounterupdatereq() :: #rpbcounterupdatereq{}.
-type rpblistbucketsreq() :: #rpblistbucketsreq{}.
-type rpbbucketkeypreflistitem() :: #rpbbucketkeypreflistitem{}.
-type rpbgetbucketkeypreflistresp() :: #rpbgetbucketkeypreflistresp{}.
-type rpblistbucketsresp() :: #rpblistbucketsresp{}.
-type rpbputresp() :: #rpbputresp{}.
-type rpbgetclientidresp() :: #rpbgetclientidresp{}.
-type rpbcoverageentry() :: #rpbcoverageentry{}.
-type rpbsetbuckettypereq() :: #rpbsetbuckettypereq{}.
-type rpbgetbuckettypereq() :: #rpbgetbuckettypereq{}.
-type rpbdelreq() :: #rpbdelreq{}.
-type rpbputreq() :: #rpbputreq{}.
-type rpbgetreq() :: #rpbgetreq{}.
-type rpbgetbucketkeypreflistreq() :: #rpbgetbucketkeypreflistreq{}.
-type rpbindexresp() :: #rpbindexresp{}.
-type rpbgetserverinforesp() :: #rpbgetserverinforesp{}.
-type rpbcsbucketresp() :: #rpbcsbucketresp{}.
-type rpbmapredresp() :: #rpbmapredresp{}.
-type rpbcoveragereq() :: #rpbcoveragereq{}.
-type rpbsetbucketreq() :: #rpbsetbucketreq{}.
-type rpbgetbucketreq() :: #rpbgetbucketreq{}.
-type rpblistkeysresp() :: #rpblistkeysresp{}.
-type rpbindexreq() :: #rpbindexreq{}.
-type rpbcountergetreq() :: #rpbcountergetreq{}.
-type rpblistkeysreq() :: #rpblistkeysreq{}.
-type rpbauthreq() :: #rpbauthreq{}.
-type rpbmapredreq() :: #rpbmapredreq{}.
-type rpbcounterupdateresp() :: #rpbcounterupdateresp{}.
-type rpbgetbucketresp() :: #rpbgetbucketresp{}.
-type rpbcountergetresp() :: #rpbcountergetresp{}.
-type rpbindexbodyresp() :: #rpbindexbodyresp{}.
-type rpbcoverageresp() :: #rpbcoverageresp{}.
-type rpberrorresp() :: #rpberrorresp{}.
-export_type(['rpblink'/0, 'rpbpair'/0, 'rpbcontent'/0, 'rpbgetresp'/0, 'rpbindexobject'/0, 'rpbmodfun'/0, 'rpbcommithook'/0, 'rpbbucketprops'/0, 'rpbresetbucketreq'/0, 'rpbcsbucketreq'/0, 'rpbsetclientidreq'/0, 'rpbcounterupdatereq'/0, 'rpblistbucketsreq'/0, 'rpbbucketkeypreflistitem'/0, 'rpbgetbucketkeypreflistresp'/0, 'rpblistbucketsresp'/0, 'rpbputresp'/0, 'rpbgetclientidresp'/0, 'rpbcoverageentry'/0, 'rpbsetbuckettypereq'/0, 'rpbgetbuckettypereq'/0, 'rpbdelreq'/0, 'rpbputreq'/0, 'rpbgetreq'/0, 'rpbgetbucketkeypreflistreq'/0, 'rpbindexresp'/0, 'rpbgetserverinforesp'/0, 'rpbcsbucketresp'/0, 'rpbmapredresp'/0, 'rpbcoveragereq'/0, 'rpbsetbucketreq'/0, 'rpbgetbucketreq'/0, 'rpblistkeysresp'/0, 'rpbindexreq'/0, 'rpbcountergetreq'/0, 'rpblistkeysreq'/0, 'rpbauthreq'/0, 'rpbmapredreq'/0, 'rpbcounterupdateresp'/0, 'rpbgetbucketresp'/0, 'rpbcountergetresp'/0, 'rpbindexbodyresp'/0, 'rpbcoverageresp'/0, 'rpberrorresp'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpblink{} -> e_msg_rpblink(Msg, TrUserData);
      #rpbpair{} -> e_msg_rpbpair(Msg, TrUserData);
      #rpbcontent{} -> e_msg_rpbcontent(Msg, TrUserData);
      #rpbgetresp{} -> e_msg_rpbgetresp(Msg, TrUserData);
      #rpbindexobject{} ->
	  e_msg_rpbindexobject(Msg, TrUserData);
      #rpbmodfun{} -> e_msg_rpbmodfun(Msg, TrUserData);
      #rpbcommithook{} ->
	  e_msg_rpbcommithook(Msg, TrUserData);
      #rpbbucketprops{} ->
	  e_msg_rpbbucketprops(Msg, TrUserData);
      #rpbresetbucketreq{} ->
	  e_msg_rpbresetbucketreq(Msg, TrUserData);
      #rpbcsbucketreq{} ->
	  e_msg_rpbcsbucketreq(Msg, TrUserData);
      #rpbsetclientidreq{} ->
	  e_msg_rpbsetclientidreq(Msg, TrUserData);
      #rpbcounterupdatereq{} ->
	  e_msg_rpbcounterupdatereq(Msg, TrUserData);
      #rpblistbucketsreq{} ->
	  e_msg_rpblistbucketsreq(Msg, TrUserData);
      #rpbbucketkeypreflistitem{} ->
	  e_msg_rpbbucketkeypreflistitem(Msg, TrUserData);
      #rpbgetbucketkeypreflistresp{} ->
	  e_msg_rpbgetbucketkeypreflistresp(Msg, TrUserData);
      #rpblistbucketsresp{} ->
	  e_msg_rpblistbucketsresp(Msg, TrUserData);
      #rpbputresp{} -> e_msg_rpbputresp(Msg, TrUserData);
      #rpbgetclientidresp{} ->
	  e_msg_rpbgetclientidresp(Msg, TrUserData);
      #rpbcoverageentry{} ->
	  e_msg_rpbcoverageentry(Msg, TrUserData);
      #rpbsetbuckettypereq{} ->
	  e_msg_rpbsetbuckettypereq(Msg, TrUserData);
      #rpbgetbuckettypereq{} ->
	  e_msg_rpbgetbuckettypereq(Msg, TrUserData);
      #rpbdelreq{} -> e_msg_rpbdelreq(Msg, TrUserData);
      #rpbputreq{} -> e_msg_rpbputreq(Msg, TrUserData);
      #rpbgetreq{} -> e_msg_rpbgetreq(Msg, TrUserData);
      #rpbgetbucketkeypreflistreq{} ->
	  e_msg_rpbgetbucketkeypreflistreq(Msg, TrUserData);
      #rpbindexresp{} -> e_msg_rpbindexresp(Msg, TrUserData);
      #rpbgetserverinforesp{} ->
	  e_msg_rpbgetserverinforesp(Msg, TrUserData);
      #rpbcsbucketresp{} ->
	  e_msg_rpbcsbucketresp(Msg, TrUserData);
      #rpbmapredresp{} ->
	  e_msg_rpbmapredresp(Msg, TrUserData);
      #rpbcoveragereq{} ->
	  e_msg_rpbcoveragereq(Msg, TrUserData);
      #rpbsetbucketreq{} ->
	  e_msg_rpbsetbucketreq(Msg, TrUserData);
      #rpbgetbucketreq{} ->
	  e_msg_rpbgetbucketreq(Msg, TrUserData);
      #rpblistkeysresp{} ->
	  e_msg_rpblistkeysresp(Msg, TrUserData);
      #rpbindexreq{} -> e_msg_rpbindexreq(Msg, TrUserData);
      #rpbcountergetreq{} ->
	  e_msg_rpbcountergetreq(Msg, TrUserData);
      #rpblistkeysreq{} ->
	  e_msg_rpblistkeysreq(Msg, TrUserData);
      #rpbauthreq{} -> e_msg_rpbauthreq(Msg, TrUserData);
      #rpbmapredreq{} -> e_msg_rpbmapredreq(Msg, TrUserData);
      #rpbcounterupdateresp{} ->
	  e_msg_rpbcounterupdateresp(Msg, TrUserData);
      #rpbgetbucketresp{} ->
	  e_msg_rpbgetbucketresp(Msg, TrUserData);
      #rpbcountergetresp{} ->
	  e_msg_rpbcountergetresp(Msg, TrUserData);
      #rpbindexbodyresp{} ->
	  e_msg_rpbindexbodyresp(Msg, TrUserData);
      #rpbcoverageresp{} ->
	  e_msg_rpbcoverageresp(Msg, TrUserData);
      #rpberrorresp{} -> e_msg_rpberrorresp(Msg, TrUserData)
    end.


%% epb compatibility
-spec encode(_) -> binary().
encode(Msg) -> encode_msg(Msg).

-spec encode_rpblink(_) -> binary().
encode_rpblink(Msg) -> encode_msg(Msg).

-spec encode_rpbpair(_) -> binary().
encode_rpbpair(Msg) -> encode_msg(Msg).

-spec encode_rpbcontent(_) -> binary().
encode_rpbcontent(Msg) -> encode_msg(Msg).

-spec encode_rpbgetresp(_) -> binary().
encode_rpbgetresp(Msg) -> encode_msg(Msg).

-spec encode_rpbindexobject(_) -> binary().
encode_rpbindexobject(Msg) -> encode_msg(Msg).

-spec encode_rpbmodfun(_) -> binary().
encode_rpbmodfun(Msg) -> encode_msg(Msg).

-spec encode_rpbcommithook(_) -> binary().
encode_rpbcommithook(Msg) -> encode_msg(Msg).

-spec encode_rpbbucketprops(_) -> binary().
encode_rpbbucketprops(Msg) -> encode_msg(Msg).

-spec encode_rpbresetbucketreq(_) -> binary().
encode_rpbresetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbcsbucketreq(_) -> binary().
encode_rpbcsbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbsetclientidreq(_) -> binary().
encode_rpbsetclientidreq(Msg) -> encode_msg(Msg).

-spec encode_rpbcounterupdatereq(_) -> binary().
encode_rpbcounterupdatereq(Msg) -> encode_msg(Msg).

-spec encode_rpblistbucketsreq(_) -> binary().
encode_rpblistbucketsreq(Msg) -> encode_msg(Msg).

-spec encode_rpbbucketkeypreflistitem(_) -> binary().
encode_rpbbucketkeypreflistitem(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketkeypreflistresp(_) -> binary().
encode_rpbgetbucketkeypreflistresp(Msg) ->
    encode_msg(Msg).

-spec encode_rpblistbucketsresp(_) -> binary().
encode_rpblistbucketsresp(Msg) -> encode_msg(Msg).

-spec encode_rpbputresp(_) -> binary().
encode_rpbputresp(Msg) -> encode_msg(Msg).

-spec encode_rpbgetclientidresp(_) -> binary().
encode_rpbgetclientidresp(Msg) -> encode_msg(Msg).

-spec encode_rpbcoverageentry(_) -> binary().
encode_rpbcoverageentry(Msg) -> encode_msg(Msg).

-spec encode_rpbsetbuckettypereq(_) -> binary().
encode_rpbsetbuckettypereq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbuckettypereq(_) -> binary().
encode_rpbgetbuckettypereq(Msg) -> encode_msg(Msg).

-spec encode_rpbdelreq(_) -> binary().
encode_rpbdelreq(Msg) -> encode_msg(Msg).

-spec encode_rpbputreq(_) -> binary().
encode_rpbputreq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetreq(_) -> binary().
encode_rpbgetreq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketkeypreflistreq(_) -> binary().
encode_rpbgetbucketkeypreflistreq(Msg) ->
    encode_msg(Msg).

-spec encode_rpbindexresp(_) -> binary().
encode_rpbindexresp(Msg) -> encode_msg(Msg).

-spec encode_rpbgetserverinforesp(_) -> binary().
encode_rpbgetserverinforesp(Msg) -> encode_msg(Msg).

-spec encode_rpbcsbucketresp(_) -> binary().
encode_rpbcsbucketresp(Msg) -> encode_msg(Msg).

-spec encode_rpbmapredresp(_) -> binary().
encode_rpbmapredresp(Msg) -> encode_msg(Msg).

-spec encode_rpbcoveragereq(_) -> binary().
encode_rpbcoveragereq(Msg) -> encode_msg(Msg).

-spec encode_rpbsetbucketreq(_) -> binary().
encode_rpbsetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketreq(_) -> binary().
encode_rpbgetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpblistkeysresp(_) -> binary().
encode_rpblistkeysresp(Msg) -> encode_msg(Msg).

-spec encode_rpbindexreq(_) -> binary().
encode_rpbindexreq(Msg) -> encode_msg(Msg).

-spec encode_rpbcountergetreq(_) -> binary().
encode_rpbcountergetreq(Msg) -> encode_msg(Msg).

-spec encode_rpblistkeysreq(_) -> binary().
encode_rpblistkeysreq(Msg) -> encode_msg(Msg).

-spec encode_rpbauthreq(_) -> binary().
encode_rpbauthreq(Msg) -> encode_msg(Msg).

-spec encode_rpbmapredreq(_) -> binary().
encode_rpbmapredreq(Msg) -> encode_msg(Msg).

-spec encode_rpbcounterupdateresp(_) -> binary().
encode_rpbcounterupdateresp(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketresp(_) -> binary().
encode_rpbgetbucketresp(Msg) -> encode_msg(Msg).

-spec encode_rpbcountergetresp(_) -> binary().
encode_rpbcountergetresp(Msg) -> encode_msg(Msg).

-spec encode_rpbindexbodyresp(_) -> binary().
encode_rpbindexbodyresp(Msg) -> encode_msg(Msg).

-spec encode_rpbcoverageresp(_) -> binary().
encode_rpbcoverageresp(Msg) -> encode_msg(Msg).

-spec encode_rpberrorresp(_) -> binary().
encode_rpberrorresp(Msg) -> encode_msg(Msg).


e_msg_rpblink(Msg, TrUserData) ->
    e_msg_rpblink(Msg, <<>>, TrUserData).


e_msg_rpblink(#rpblink{bucket = F1, key = F2, tag = F3},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbpair(Msg, TrUserData) ->
    e_msg_rpbpair(Msg, <<>>, TrUserData).


e_msg_rpbpair(#rpbpair{key = F1, value = F2}, Bin,
	      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbcontent(Msg, TrUserData) ->
    e_msg_rpbcontent(Msg, <<>>, TrUserData).


e_msg_rpbcontent(#rpbcontent{value = F1,
			     content_type = F2, charset = F3,
			     content_encoding = F4, vtag = F5, links = F6,
			     last_mod = F7, last_mod_usecs = F8, usermeta = F9,
			     indexes = F10, deleted = F11, ttl = F12},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bytes(TrF5, <<B4/binary, 42>>)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_rpbcontent_links(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_varint(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   if TrF9 == [] -> B8;
	      true ->
		  e_field_rpbcontent_usermeta(TrF9, B8, TrUserData)
	   end
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    if TrF10 == [] -> B9;
	       true ->
		   e_field_rpbcontent_indexes(TrF10, B9, TrUserData)
	    end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     e_varint(TrF12, <<B11/binary, 96>>)
	   end
    end.

e_msg_rpbgetresp(Msg, TrUserData) ->
    e_msg_rpbgetresp(Msg, <<>>, TrUserData).


e_msg_rpbgetresp(#rpbgetresp{content = F1, vclock = F2,
			     unchanged = F3},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpbgetresp_content(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bool(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_rpbindexobject(Msg, TrUserData) ->
    e_msg_rpbindexobject(Msg, <<>>, TrUserData).


e_msg_rpbindexobject(#rpbindexobject{key = F1,
				     object = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_rpbindexobject_object(TrF2, <<B1/binary, 18>>,
				     TrUserData)
    end.

e_msg_rpbmodfun(Msg, TrUserData) ->
    e_msg_rpbmodfun(Msg, <<>>, TrUserData).


e_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_rpbcommithook(Msg, TrUserData) ->
    e_msg_rpbcommithook(Msg, <<>>, TrUserData).


e_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_rpbcommithook_modfun(TrF1, <<Bin/binary, 10>>,
						TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbbucketprops(Msg, TrUserData) ->
    e_msg_rpbbucketprops(Msg, <<>>, TrUserData).


e_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28,
				     hll_precision = F29, ttl = F30},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bool(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_rpbbucketprops_precommit(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_rpbbucketprops_postcommit(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_mfield_rpbbucketprops_chash_keyfun(TrF8,
						       <<B7/binary, 66>>,
						       TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_mfield_rpbbucketprops_linkfun(TrF9, <<B8/binary, 74>>,
						  TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_varint(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_varint(TrF13, <<B12/binary, 104>>)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_varint(TrF14, <<B13/binary, 112>>)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_varint(TrF15, <<B14/binary, 120>>)
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   e_varint(TrF16, <<B15/binary, 128, 1>>)
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   e_varint(TrF17, <<B16/binary, 136, 1>>)
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   e_varint(TrF18, <<B17/binary, 144, 1>>)
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   e_varint(TrF19, <<B18/binary, 152, 1>>)
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   e_type_bool(TrF20, <<B19/binary, 160, 1>>)
		 end
	  end,
    B21 = if F21 == undefined -> B20;
	     true ->
		 begin
		   TrF21 = id(F21, TrUserData),
		   e_type_bool(TrF21, <<B20/binary, 168, 1>>)
		 end
	  end,
    B22 = if F22 == undefined -> B21;
	     true ->
		 begin
		   TrF22 = id(F22, TrUserData),
		   e_type_bytes(TrF22, <<B21/binary, 178, 1>>)
		 end
	  end,
    B23 = if F23 == undefined -> B22;
	     true ->
		 begin
		   TrF23 = id(F23, TrUserData),
		   e_type_bool(TrF23, <<B22/binary, 184, 1>>)
		 end
	  end,
    B24 = if F24 == undefined -> B23;
	     true ->
		 begin
		   TrF24 = id(F24, TrUserData),
		   'e_enum_RpbBucketProps.RpbReplMode'(TrF24,
						       <<B23/binary, 192, 1>>)
		 end
	  end,
    B25 = if F25 == undefined -> B24;
	     true ->
		 begin
		   TrF25 = id(F25, TrUserData),
		   e_type_bytes(TrF25, <<B24/binary, 202, 1>>)
		 end
	  end,
    B26 = if F26 == undefined -> B25;
	     true ->
		 begin
		   TrF26 = id(F26, TrUserData),
		   e_type_bytes(TrF26, <<B25/binary, 210, 1>>)
		 end
	  end,
    B27 = if F27 == undefined -> B26;
	     true ->
		 begin
		   TrF27 = id(F27, TrUserData),
		   e_type_bool(TrF27, <<B26/binary, 216, 1>>)
		 end
	  end,
    B28 = if F28 == undefined -> B27;
	     true ->
		 begin
		   TrF28 = id(F28, TrUserData),
		   e_type_bool(TrF28, <<B27/binary, 224, 1>>)
		 end
	  end,
    B29 = if F29 == undefined -> B28;
	     true ->
		 begin
		   TrF29 = id(F29, TrUserData),
		   e_varint(TrF29, <<B28/binary, 232, 1>>)
		 end
	  end,
    if F30 == undefined -> B29;
       true ->
	   begin
	     TrF30 = id(F30, TrUserData),
	     e_varint(TrF30, <<B29/binary, 240, 1>>)
	   end
    end.

e_msg_rpbresetbucketreq(Msg, TrUserData) ->
    e_msg_rpbresetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbcsbucketreq(Msg, TrUserData) ->
    e_msg_rpbcsbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbcsbucketreq(#rpbcsbucketreq{bucket = F1,
				     start_key = F2, end_key = F3,
				     start_incl = F4, end_incl = F5,
				     continuation = F6, max_results = F7,
				     timeout = F8, type = F9,
				     cover_context = F10},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bool(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bytes(TrF6, <<B5/binary, 50>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_varint(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bytes(TrF9, <<B8/binary, 74>>)
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     e_type_bytes(TrF10, <<B9/binary, 82>>)
	   end
    end.

e_msg_rpbsetclientidreq(Msg, TrUserData) ->
    e_msg_rpbsetclientidreq(Msg, <<>>, TrUserData).


e_msg_rpbsetclientidreq(#rpbsetclientidreq{client_id =
					       F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_rpbcounterupdatereq(Msg, TrUserData) ->
    e_msg_rpbcounterupdatereq(Msg, <<>>, TrUserData).


e_msg_rpbcounterupdatereq(#rpbcounterupdatereq{bucket =
						   F1,
					       key = F2, amount = F3, w = F4,
					       dw = F5, pw = F6,
					       returnvalue = F7},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_sint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_varint(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_varint(TrF6, <<B5/binary, 48>>)
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     e_type_bool(TrF7, <<B6/binary, 56>>)
	   end
    end.

e_msg_rpblistbucketsreq(Msg, TrUserData) ->
    e_msg_rpblistbucketsreq(Msg, <<>>, TrUserData).


e_msg_rpblistbucketsreq(#rpblistbucketsreq{timeout = F1,
					   stream = F2, type = F3},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbbucketkeypreflistitem(Msg, TrUserData) ->
    e_msg_rpbbucketkeypreflistitem(Msg, <<>>, TrUserData).


e_msg_rpbbucketkeypreflistitem(#rpbbucketkeypreflistitem{partition
							     = F1,
							 node = F2,
							 primary = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bool(TrF3, <<B2/binary, 24>>)
    end.

e_msg_rpbgetbucketkeypreflistresp(Msg, TrUserData) ->
    e_msg_rpbgetbucketkeypreflistresp(Msg, <<>>,
				      TrUserData).


e_msg_rpbgetbucketkeypreflistresp(#rpbgetbucketkeypreflistresp{preflist
								   = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_rpbgetbucketkeypreflistresp_preflist(TrF1, Bin,
							  TrUserData)
      end
    end.

e_msg_rpblistbucketsresp(Msg, TrUserData) ->
    e_msg_rpblistbucketsresp(Msg, <<>>, TrUserData).


e_msg_rpblistbucketsresp(#rpblistbucketsresp{buckets =
						 F1,
					     done = F2},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpblistbucketsresp_buckets(TrF1, Bin,
						     TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bool(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_rpbputresp(Msg, TrUserData) ->
    e_msg_rpbputresp(Msg, <<>>, TrUserData).


e_msg_rpbputresp(#rpbputresp{content = F1, vclock = F2,
			     key = F3},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpbputresp_content(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbgetclientidresp(Msg, TrUserData) ->
    e_msg_rpbgetclientidresp(Msg, <<>>, TrUserData).


e_msg_rpbgetclientidresp(#rpbgetclientidresp{client_id =
						 F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_rpbcoverageentry(Msg, TrUserData) ->
    e_msg_rpbcoverageentry(Msg, <<>>, TrUserData).


e_msg_rpbcoverageentry(#rpbcoverageentry{ip = F1,
					 port = F2, keyspace_desc = F3,
					 cover_context = F4},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_bytes(TrF4, <<B3/binary, 34>>)
    end.

e_msg_rpbsetbuckettypereq(Msg, TrUserData) ->
    e_msg_rpbsetbuckettypereq(Msg, <<>>, TrUserData).


e_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_rpbsetbuckettypereq_props(TrF2,
					 <<B1/binary, 18>>, TrUserData)
    end.

e_msg_rpbgetbuckettypereq(Msg, TrUserData) ->
    e_msg_rpbgetbuckettypereq(Msg, <<>>, TrUserData).


e_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_rpbdelreq(Msg, TrUserData) ->
    e_msg_rpbdelreq(Msg, <<>>, TrUserData).


e_msg_rpbdelreq(#rpbdelreq{bucket = F1, key = F2,
			   rw = F3, vclock = F4, r = F5, w = F6, pr = F7,
			   pw = F8, dw = F9, timeout = F10, sloppy_quorum = F11,
			   n_val = F12, type = F13},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_varint(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_varint(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_varint(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_varint(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    if F13 == undefined -> B12;
       true ->
	   begin
	     TrF13 = id(F13, TrUserData),
	     e_type_bytes(TrF13, <<B12/binary, 106>>)
	   end
    end.

e_msg_rpbputreq(Msg, TrUserData) ->
    e_msg_rpbputreq(Msg, <<>>, TrUserData).


e_msg_rpbputreq(#rpbputreq{bucket = F1, key = F2,
			   vclock = F3, content = F4, w = F5, dw = F6,
			   return_body = F7, pw = F8, if_not_modified = F9,
			   if_none_match = F10, return_head = F11,
			   timeout = F12, asis = F13, sloppy_quorum = F14,
			   n_val = F15, type = F16},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_mfield_rpbputreq_content(TrF4, <<B3/binary, 34>>,
				      TrUserData)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_varint(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_varint(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_varint(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_bool(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_type_bool(TrF13, <<B12/binary, 104>>)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_type_bool(TrF14, <<B13/binary, 112>>)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_varint(TrF15, <<B14/binary, 120>>)
		 end
	  end,
    if F16 == undefined -> B15;
       true ->
	   begin
	     TrF16 = id(F16, TrUserData),
	     e_type_bytes(TrF16, <<B15/binary, 130, 1>>)
	   end
    end.

e_msg_rpbgetreq(Msg, TrUserData) ->
    e_msg_rpbgetreq(Msg, <<>>, TrUserData).


e_msg_rpbgetreq(#rpbgetreq{bucket = F1, key = F2,
			   r = F3, pr = F4, basic_quorum = F5, notfound_ok = F6,
			   if_modified = F7, head = F8, deletedvclock = F9,
			   timeout = F10, sloppy_quorum = F11, n_val = F12,
			   type = F13},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bytes(TrF7, <<B6/binary, 58>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_bool(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    if F13 == undefined -> B12;
       true ->
	   begin
	     TrF13 = id(F13, TrUserData),
	     e_type_bytes(TrF13, <<B12/binary, 106>>)
	   end
    end.

e_msg_rpbgetbucketkeypreflistreq(Msg, TrUserData) ->
    e_msg_rpbgetbucketkeypreflistreq(Msg, <<>>, TrUserData).


e_msg_rpbgetbucketkeypreflistreq(#rpbgetbucketkeypreflistreq{bucket
								 = F1,
							     key = F2,
							     type = F3},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbindexresp(Msg, TrUserData) ->
    e_msg_rpbindexresp(Msg, <<>>, TrUserData).


e_msg_rpbindexresp(#rpbindexresp{keys = F1,
				 results = F2, continuation = F3, done = F4},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_rpbindexresp_keys(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_rpbindexresp_results(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bool(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_rpbgetserverinforesp(Msg, TrUserData) ->
    e_msg_rpbgetserverinforesp(Msg, <<>>, TrUserData).


e_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbcsbucketresp(Msg, TrUserData) ->
    e_msg_rpbcsbucketresp(Msg, <<>>, TrUserData).


e_msg_rpbcsbucketresp(#rpbcsbucketresp{objects = F1,
				       continuation = F2, done = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpbcsbucketresp_objects(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bool(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_rpbmapredresp(Msg, TrUserData) ->
    e_msg_rpbmapredresp(Msg, <<>>, TrUserData).


e_msg_rpbmapredresp(#rpbmapredresp{phase = F1,
				   response = F2, done = F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bool(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_rpbcoveragereq(Msg, TrUserData) ->
    e_msg_rpbcoveragereq(Msg, <<>>, TrUserData).


e_msg_rpbcoveragereq(#rpbcoveragereq{type = F1,
				     bucket = F2, min_partitions = F3,
				     replace_cover = F4,
				     unavailable_cover = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_rpbcoveragereq_unavailable_cover(TrF5, B4,
						      TrUserData)
      end
    end.

e_msg_rpbsetbucketreq(Msg, TrUserData) ->
    e_msg_rpbsetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_rpbsetbucketreq_props(TrF2, <<B1/binary, 18>>,
					  TrUserData)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbgetbucketreq(Msg, TrUserData) ->
    e_msg_rpbgetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpblistkeysresp(Msg, TrUserData) ->
    e_msg_rpblistkeysresp(Msg, <<>>, TrUserData).


e_msg_rpblistkeysresp(#rpblistkeysresp{keys = F1,
				       done = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpblistkeysresp_keys(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bool(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_rpbindexreq(Msg, TrUserData) ->
    e_msg_rpbindexreq(Msg, <<>>, TrUserData).


e_msg_rpbindexreq(#rpbindexreq{bucket = F1, index = F2,
			       qtype = F3, key = F4, range_min = F5,
			       range_max = F6, return_terms = F7, stream = F8,
			       max_results = F9, continuation = F10,
			       timeout = F11, type = F12, term_regex = F13,
			       pagination_sort = F14, cover_context = F15,
			       return_body = F16},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   'e_enum_RpbIndexReq.IndexQueryType'(TrF3,
					       <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bytes(TrF5, <<B4/binary, 42>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bytes(TrF6, <<B5/binary, 50>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_bool(TrF8, <<B7/binary, 64>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_varint(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_bytes(TrF10, <<B9/binary, 82>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_varint(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_type_bytes(TrF12, <<B11/binary, 98>>)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_type_bytes(TrF13, <<B12/binary, 106>>)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_type_bool(TrF14, <<B13/binary, 112>>)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_type_bytes(TrF15, <<B14/binary, 122>>)
		 end
	  end,
    if F16 == undefined -> B15;
       true ->
	   begin
	     TrF16 = id(F16, TrUserData),
	     e_type_bool(TrF16, <<B15/binary, 128, 1>>)
	   end
    end.

e_msg_rpbcountergetreq(Msg, TrUserData) ->
    e_msg_rpbcountergetreq(Msg, <<>>, TrUserData).


e_msg_rpbcountergetreq(#rpbcountergetreq{bucket = F1,
					 key = F2, r = F3, pr = F4,
					 basic_quorum = F5, notfound_ok = F6},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_bool(TrF6, <<B5/binary, 48>>)
	   end
    end.

e_msg_rpblistkeysreq(Msg, TrUserData) ->
    e_msg_rpblistkeysreq(Msg, <<>>, TrUserData).


e_msg_rpblistkeysreq(#rpblistkeysreq{bucket = F1,
				     timeout = F2, type = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbauthreq(Msg, TrUserData) ->
    e_msg_rpbauthreq(Msg, <<>>, TrUserData).


e_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_rpbmapredreq(Msg, TrUserData) ->
    e_msg_rpbmapredreq(Msg, <<>>, TrUserData).


e_msg_rpbmapredreq(#rpbmapredreq{request = F1,
				 content_type = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_rpbcounterupdateresp(Msg, TrUserData) ->
    e_msg_rpbcounterupdateresp(Msg, <<>>, TrUserData).


e_msg_rpbcounterupdateresp(#rpbcounterupdateresp{value =
						     F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_sint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rpbgetbucketresp(Msg, TrUserData) ->
    e_msg_rpbgetbucketresp(Msg, <<>>, TrUserData).


e_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_rpbgetbucketresp_props(TrF1,
				      <<Bin/binary, 10>>, TrUserData)
    end.

e_msg_rpbcountergetresp(Msg, TrUserData) ->
    e_msg_rpbcountergetresp(Msg, <<>>, TrUserData).


e_msg_rpbcountergetresp(#rpbcountergetresp{value = F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_sint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rpbindexbodyresp(Msg, TrUserData) ->
    e_msg_rpbindexbodyresp(Msg, <<>>, TrUserData).


e_msg_rpbindexbodyresp(#rpbindexbodyresp{objects = F1,
					 continuation = F2, done = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_rpbindexbodyresp_objects(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bytes(TrF2, <<B1/binary, 18>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bool(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_rpbcoverageresp(Msg, TrUserData) ->
    e_msg_rpbcoverageresp(Msg, <<>>, TrUserData).


e_msg_rpbcoverageresp(#rpbcoverageresp{entries = F1},
		      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_rpbcoverageresp_entries(TrF1, Bin, TrUserData)
      end
    end.

e_msg_rpberrorresp(Msg, TrUserData) ->
    e_msg_rpberrorresp(Msg, <<>>, TrUserData).


e_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_mfield_rpbcontent_links(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpblink(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbcontent_links([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_rpbcontent_links(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_rpbcontent_links(Rest, Bin3, TrUserData);
e_field_rpbcontent_links([], Bin, _TrUserData) -> Bin.

e_mfield_rpbcontent_usermeta(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbpair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbcontent_usermeta([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_rpbcontent_usermeta(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_rpbcontent_usermeta(Rest, Bin3, TrUserData);
e_field_rpbcontent_usermeta([], Bin, _TrUserData) ->
    Bin.

e_mfield_rpbcontent_indexes(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbpair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbcontent_indexes([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_rpbcontent_indexes(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_rpbcontent_indexes(Rest, Bin3, TrUserData);
e_field_rpbcontent_indexes([], Bin, _TrUserData) -> Bin.

e_mfield_rpbgetresp_content(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbcontent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbgetresp_content([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbgetresp_content(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_rpbgetresp_content(Rest, Bin3, TrUserData);
e_field_rpbgetresp_content([], Bin, _TrUserData) -> Bin.

e_mfield_rpbindexobject_object(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbgetresp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbcommithook_modfun(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_precommit(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_precommit([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_rpbbucketprops_precommit(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_rpbbucketprops_precommit(Rest, Bin3,
				     TrUserData);
e_field_rpbbucketprops_precommit([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_rpbbucketprops_postcommit(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_postcommit([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_rpbbucketprops_postcommit(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_rpbbucketprops_postcommit(Rest, Bin3,
				      TrUserData);
e_field_rpbbucketprops_postcommit([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_rpbbucketprops_chash_keyfun(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_linkfun(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbgetbucketkeypreflistresp_preflist(Msg, Bin,
					      TrUserData) ->
    SubBin = e_msg_rpbbucketkeypreflistitem(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbgetbucketkeypreflistresp_preflist([Elem
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_rpbgetbucketkeypreflistresp_preflist(id(Elem,
							 TrUserData),
						      Bin2, TrUserData),
    e_field_rpbgetbucketkeypreflistresp_preflist(Rest, Bin3,
						 TrUserData);
e_field_rpbgetbucketkeypreflistresp_preflist([], Bin,
					     _TrUserData) ->
    Bin.

e_field_rpblistbucketsresp_buckets([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_rpblistbucketsresp_buckets(Rest, Bin3,
				       TrUserData);
e_field_rpblistbucketsresp_buckets([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_rpbputresp_content(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbcontent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbputresp_content([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbputresp_content(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_rpbputresp_content(Rest, Bin3, TrUserData);
e_field_rpbputresp_content([], Bin, _TrUserData) -> Bin.

e_mfield_rpbsetbuckettypereq_props(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbputreq_content(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbcontent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbindexresp_keys([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_rpbindexresp_keys(Rest, Bin3, TrUserData);
e_field_rpbindexresp_keys([], Bin, _TrUserData) -> Bin.

e_mfield_rpbindexresp_results(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbpair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbindexresp_results([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_rpbindexresp_results(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_rpbindexresp_results(Rest, Bin3, TrUserData);
e_field_rpbindexresp_results([], Bin, _TrUserData) ->
    Bin.

e_mfield_rpbcsbucketresp_objects(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_rpbindexobject(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbcsbucketresp_objects([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbcsbucketresp_objects(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_rpbcsbucketresp_objects(Rest, Bin3, TrUserData);
e_field_rpbcsbucketresp_objects([], Bin, _TrUserData) ->
    Bin.

e_field_rpbcoveragereq_unavailable_cover([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_rpbcoveragereq_unavailable_cover(Rest, Bin3,
					     TrUserData);
e_field_rpbcoveragereq_unavailable_cover([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_rpbsetbucketreq_props(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpblistkeysresp_keys([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_rpblistkeysresp_keys(Rest, Bin3, TrUserData);
e_field_rpblistkeysresp_keys([], Bin, _TrUserData) ->
    Bin.

e_mfield_rpbgetbucketresp_props(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbindexbodyresp_objects(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_rpbindexobject(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbindexbodyresp_objects([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbindexbodyresp_objects(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_rpbindexbodyresp_objects(Rest, Bin3,
				     TrUserData);
e_field_rpbindexbodyresp_objects([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_rpbcoverageresp_entries(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_rpbcoverageentry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbcoverageresp_entries([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rpbcoverageresp_entries(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_rpbcoverageresp_entries(Rest, Bin3, TrUserData);
e_field_rpbcoverageresp_entries([], Bin, _TrUserData) ->
    Bin.



'e_enum_RpbIndexReq.IndexQueryType'(eq, Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RpbIndexReq.IndexQueryType'(range, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RpbIndexReq.IndexQueryType'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_RpbBucketProps.RpbReplMode'('FALSE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RpbBucketProps.RpbReplMode'('REALTIME', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RpbBucketProps.RpbReplMode'('FULLSYNC', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_RpbBucketProps.RpbReplMode'('TRUE', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_RpbBucketProps.RpbReplMode'(V, Bin) ->
    e_varint(V, Bin).

e_type_sint(Value, Bin) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
    e_varint(Value * -2 - 1, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      rpblink -> d_msg_rpblink(Bin, TrUserData);
      rpbpair -> d_msg_rpbpair(Bin, TrUserData);
      rpbcontent -> d_msg_rpbcontent(Bin, TrUserData);
      rpbgetresp -> d_msg_rpbgetresp(Bin, TrUserData);
      rpbindexobject -> d_msg_rpbindexobject(Bin, TrUserData);
      rpbmodfun -> d_msg_rpbmodfun(Bin, TrUserData);
      rpbcommithook -> d_msg_rpbcommithook(Bin, TrUserData);
      rpbbucketprops -> d_msg_rpbbucketprops(Bin, TrUserData);
      rpbresetbucketreq ->
	  d_msg_rpbresetbucketreq(Bin, TrUserData);
      rpbcsbucketreq -> d_msg_rpbcsbucketreq(Bin, TrUserData);
      rpbsetclientidreq ->
	  d_msg_rpbsetclientidreq(Bin, TrUserData);
      rpbcounterupdatereq ->
	  d_msg_rpbcounterupdatereq(Bin, TrUserData);
      rpblistbucketsreq ->
	  d_msg_rpblistbucketsreq(Bin, TrUserData);
      rpbbucketkeypreflistitem ->
	  d_msg_rpbbucketkeypreflistitem(Bin, TrUserData);
      rpbgetbucketkeypreflistresp ->
	  d_msg_rpbgetbucketkeypreflistresp(Bin, TrUserData);
      rpblistbucketsresp ->
	  d_msg_rpblistbucketsresp(Bin, TrUserData);
      rpbputresp -> d_msg_rpbputresp(Bin, TrUserData);
      rpbgetclientidresp ->
	  d_msg_rpbgetclientidresp(Bin, TrUserData);
      rpbcoverageentry ->
	  d_msg_rpbcoverageentry(Bin, TrUserData);
      rpbsetbuckettypereq ->
	  d_msg_rpbsetbuckettypereq(Bin, TrUserData);
      rpbgetbuckettypereq ->
	  d_msg_rpbgetbuckettypereq(Bin, TrUserData);
      rpbdelreq -> d_msg_rpbdelreq(Bin, TrUserData);
      rpbputreq -> d_msg_rpbputreq(Bin, TrUserData);
      rpbgetreq -> d_msg_rpbgetreq(Bin, TrUserData);
      rpbgetbucketkeypreflistreq ->
	  d_msg_rpbgetbucketkeypreflistreq(Bin, TrUserData);
      rpbindexresp -> d_msg_rpbindexresp(Bin, TrUserData);
      rpbgetserverinforesp ->
	  d_msg_rpbgetserverinforesp(Bin, TrUserData);
      rpbcsbucketresp ->
	  d_msg_rpbcsbucketresp(Bin, TrUserData);
      rpbmapredresp -> d_msg_rpbmapredresp(Bin, TrUserData);
      rpbcoveragereq -> d_msg_rpbcoveragereq(Bin, TrUserData);
      rpbsetbucketreq ->
	  d_msg_rpbsetbucketreq(Bin, TrUserData);
      rpbgetbucketreq ->
	  d_msg_rpbgetbucketreq(Bin, TrUserData);
      rpblistkeysresp ->
	  d_msg_rpblistkeysresp(Bin, TrUserData);
      rpbindexreq -> d_msg_rpbindexreq(Bin, TrUserData);
      rpbcountergetreq ->
	  d_msg_rpbcountergetreq(Bin, TrUserData);
      rpblistkeysreq -> d_msg_rpblistkeysreq(Bin, TrUserData);
      rpbauthreq -> d_msg_rpbauthreq(Bin, TrUserData);
      rpbmapredreq -> d_msg_rpbmapredreq(Bin, TrUserData);
      rpbcounterupdateresp ->
	  d_msg_rpbcounterupdateresp(Bin, TrUserData);
      rpbgetbucketresp ->
	  d_msg_rpbgetbucketresp(Bin, TrUserData);
      rpbcountergetresp ->
	  d_msg_rpbcountergetresp(Bin, TrUserData);
      rpbindexbodyresp ->
	  d_msg_rpbindexbodyresp(Bin, TrUserData);
      rpbcoverageresp ->
	  d_msg_rpbcoverageresp(Bin, TrUserData);
      rpberrorresp -> d_msg_rpberrorresp(Bin, TrUserData)
    end.


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    decode_msg(Bin, MsgName).

decode_rpblink(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpblink).

decode_rpbpair(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbpair).

decode_rpbcontent(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcontent).

decode_rpbgetresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetresp).

decode_rpbindexobject(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbindexobject).

decode_rpbmodfun(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbmodfun).

decode_rpbcommithook(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcommithook).

decode_rpbbucketprops(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbbucketprops).

decode_rpbresetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbresetbucketreq).

decode_rpbcsbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcsbucketreq).

decode_rpbsetclientidreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbsetclientidreq).

decode_rpbcounterupdatereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcounterupdatereq).

decode_rpblistbucketsreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpblistbucketsreq).

decode_rpbbucketkeypreflistitem(Bin)
    when is_binary(Bin) ->
    decode_msg(Bin, rpbbucketkeypreflistitem).

decode_rpbgetbucketkeypreflistresp(Bin)
    when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketkeypreflistresp).

decode_rpblistbucketsresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpblistbucketsresp).

decode_rpbputresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbputresp).

decode_rpbgetclientidresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetclientidresp).

decode_rpbcoverageentry(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcoverageentry).

decode_rpbsetbuckettypereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbsetbuckettypereq).

decode_rpbgetbuckettypereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbuckettypereq).

decode_rpbdelreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbdelreq).

decode_rpbputreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbputreq).

decode_rpbgetreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetreq).

decode_rpbgetbucketkeypreflistreq(Bin)
    when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketkeypreflistreq).

decode_rpbindexresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbindexresp).

decode_rpbgetserverinforesp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetserverinforesp).

decode_rpbcsbucketresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcsbucketresp).

decode_rpbmapredresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbmapredresp).

decode_rpbcoveragereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcoveragereq).

decode_rpbsetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbsetbucketreq).

decode_rpbgetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketreq).

decode_rpblistkeysresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpblistkeysresp).

decode_rpbindexreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbindexreq).

decode_rpbcountergetreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcountergetreq).

decode_rpblistkeysreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpblistkeysreq).

decode_rpbauthreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbauthreq).

decode_rpbmapredreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbmapredreq).

decode_rpbcounterupdateresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcounterupdateresp).

decode_rpbgetbucketresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketresp).

decode_rpbcountergetresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcountergetresp).

decode_rpbindexbodyresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbindexbodyresp).

decode_rpbcoverageresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcoverageresp).

decode_rpberrorresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpberrorresp).



d_msg_rpblink(Bin, TrUserData) ->
    dfp_read_field_def_rpblink(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpblink(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_rpblink_bucket(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_rpblink(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_rpblink_key(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_rpblink(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_rpblink_tag(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_rpblink(<<>>, 0, 0, F1, F2, F3, _) ->
    #rpblink{bucket = F1, key = F2, tag = F3};
dfp_read_field_def_rpblink(Other, Z1, Z2, F1, F2, F3,
			   TrUserData) ->
    dg_read_field_def_rpblink(Other, Z1, Z2, F1, F2, F3,
			      TrUserData).

dg_read_field_def_rpblink(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpblink(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
dg_read_field_def_rpblink(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpblink_bucket(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      18 ->
	  d_field_rpblink_key(Rest, 0, 0, F1, F2, F3, TrUserData);
      26 ->
	  d_field_rpblink_tag(Rest, 0, 0, F1, F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpblink(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 ->
		skip_64_rpblink(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_rpblink(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    5 -> skip_32_rpblink(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_rpblink(<<>>, 0, 0, F1, F2, F3, _) ->
    #rpblink{bucket = F1, key = F2, tag = F3}.

d_field_rpblink_bucket(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblink_bucket(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_rpblink_bucket(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblink(Rest2, 0, 0, NewFValue, F2,
			       F3, TrUserData).


d_field_rpblink_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblink_key(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_rpblink_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblink(Rest2, 0, 0, F1, NewFValue,
			       F3, TrUserData).


d_field_rpblink_tag(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblink_tag(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_rpblink_tag(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblink(Rest2, 0, 0, F1, F2,
			       NewFValue, TrUserData).


skip_varint_rpblink(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    skip_varint_rpblink(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
skip_varint_rpblink(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblink(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_length_delimited_rpblink(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpblink(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rpblink(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpblink(Rest2, 0, 0, F1, F2, F3,
			       TrUserData).


skip_32_rpblink(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_rpblink(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_64_rpblink(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_rpblink(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


d_msg_rpbpair(Bin, TrUserData) ->
    dfp_read_field_def_rpbpair(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbpair(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rpbpair_key(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbpair(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rpbpair_value(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbpair(<<>>, 0, 0, F1, F2, _) ->
    #rpbpair{key = F1, value = F2};
dfp_read_field_def_rpbpair(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_rpbpair(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_rpbpair(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbpair(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_rpbpair(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbpair_key(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_rpbpair_value(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbpair(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbpair(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbpair(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_rpbpair(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbpair(<<>>, 0, 0, F1, F2, _) ->
    #rpbpair{key = F1, value = F2}.

d_field_rpbpair_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbpair_key(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_rpbpair_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_rpbpair_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbpair_value(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_rpbpair_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_rpbpair(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_rpbpair(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rpbpair(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_rpbpair(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbpair(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbpair(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_rpbpair(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_rpbpair(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_rpbcontent(Bin, TrUserData) ->
    dfp_read_field_def_rpbcontent(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), id([], TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), id([], TrUserData),
				  id([], TrUserData), id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcontent(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_content_type(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData);
dfp_read_field_def_rpbcontent(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_charset(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_content_encoding(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_vtag(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_links(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<56, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_last_mod(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12,
				TrUserData);
dfp_read_field_def_rpbcontent(<<64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_last_mod_usecs(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
dfp_read_field_def_rpbcontent(<<74, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_usermeta(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12,
				TrUserData);
dfp_read_field_def_rpbcontent(<<82, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_indexes(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<88, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_deleted(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<96, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, TrUserData) ->
    d_field_rpbcontent_ttl(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
dfp_read_field_def_rpbcontent(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      TrUserData) ->
    #rpbcontent{value = F1, content_type = F2, charset = F3,
		content_encoding = F4, vtag = F5,
		links = lists_reverse(F6, TrUserData), last_mod = F7,
		last_mod_usecs = F8,
		usermeta = lists_reverse(F9, TrUserData),
		indexes = lists_reverse(F10, TrUserData), deleted = F11,
		ttl = F12};
dfp_read_field_def_rpbcontent(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      TrUserData) ->
    dg_read_field_def_rpbcontent(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 TrUserData).

dg_read_field_def_rpbcontent(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcontent(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, TrUserData);
dg_read_field_def_rpbcontent(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcontent_value(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, TrUserData);
      18 ->
	  d_field_rpbcontent_content_type(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  TrUserData);
      26 ->
	  d_field_rpbcontent_charset(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
      34 ->
	  d_field_rpbcontent_content_encoding(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      42 ->
	  d_field_rpbcontent_vtag(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, TrUserData);
      50 ->
	  d_field_rpbcontent_links(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, TrUserData);
      56 ->
	  d_field_rpbcontent_last_mod(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
      64 ->
	  d_field_rpbcontent_last_mod_usecs(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, TrUserData);
      74 ->
	  d_field_rpbcontent_usermeta(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12,
				      TrUserData);
      82 ->
	  d_field_rpbcontent_indexes(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
      88 ->
	  d_field_rpbcontent_deleted(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
      96 ->
	  d_field_rpbcontent_ttl(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcontent(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12,
				       TrUserData);
	    1 ->
		skip_64_rpbcontent(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, TrUserData);
	    2 ->
		skip_length_delimited_rpbcontent(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11, F12, TrUserData);
	    5 ->
		skip_32_rpbcontent(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, TrUserData)
	  end
    end;
dg_read_field_def_rpbcontent(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, TrUserData) ->
    #rpbcontent{value = F1, content_type = F2, charset = F3,
		content_encoding = F4, vtag = F5,
		links = lists_reverse(F6, TrUserData), last_mod = F7,
		last_mod_usecs = F8,
		usermeta = lists_reverse(F9, TrUserData),
		indexes = lists_reverse(F10, TrUserData), deleted = F11,
		ttl = F12}.

d_field_rpbcontent_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData)
    when N < 57 ->
    d_field_rpbcontent_value(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			     TrUserData);
d_field_rpbcontent_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, NewFValue,
				  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


d_field_rpbcontent_content_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_content_type(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, TrUserData);
d_field_rpbcontent_content_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				  F11, F12, TrUserData).


d_field_rpbcontent_charset(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_charset(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
d_field_rpbcontent_charset(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2,
				  NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				  F12, TrUserData).


d_field_rpbcontent_content_encoding(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_content_encoding(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_rpbcontent_content_encoding(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


d_field_rpbcontent_vtag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			TrUserData)
    when N < 57 ->
    d_field_rpbcontent_vtag(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			    TrUserData);
d_field_rpbcontent_vtag(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  F4, NewFValue, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


d_field_rpbcontent_links(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData)
    when N < 57 ->
    d_field_rpbcontent_links(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			     TrUserData);
d_field_rpbcontent_links(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpblink(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, cons(NewFValue, F6, TrUserData), F7,
				  F8, F9, F10, F11, F12, TrUserData).


d_field_rpbcontent_last_mod(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_last_mod(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, TrUserData);
d_field_rpbcontent_last_mod(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10, F11,
			    F12, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcontent(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				  TrUserData).


d_field_rpbcontent_last_mod_usecs(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_last_mod_usecs(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, TrUserData);
d_field_rpbcontent_last_mod_usecs(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				  F10, F11, F12, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcontent(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, NewFValue, F9, F10, F11, F12,
				  TrUserData).


d_field_rpbcontent_usermeta(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_usermeta(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, TrUserData);
d_field_rpbcontent_usermeta(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbpair(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8,
				  cons(NewFValue, F9, TrUserData), F10, F11,
				  F12, TrUserData).


d_field_rpbcontent_indexes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_indexes(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
d_field_rpbcontent_indexes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbpair(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9,
				  cons(NewFValue, F10, TrUserData), F11, F12,
				  TrUserData).


d_field_rpbcontent_deleted(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, TrUserData)
    when N < 57 ->
    d_field_rpbcontent_deleted(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, TrUserData);
d_field_rpbcontent_deleted(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, _, F12,
			   TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcontent(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				  TrUserData).


d_field_rpbcontent_ttl(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData)
    when N < 57 ->
    d_field_rpbcontent_ttl(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			   TrUserData);
d_field_rpbcontent_ttl(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
		       TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcontent(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				  TrUserData).


skip_varint_rpbcontent(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    skip_varint_rpbcontent(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, TrUserData);
skip_varint_rpbcontent(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       TrUserData) ->
    dfp_read_field_def_rpbcontent(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


skip_length_delimited_rpbcontent(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcontent(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, TrUserData);
skip_length_delimited_rpbcontent(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcontent(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


skip_32_rpbcontent(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		   TrUserData) ->
    dfp_read_field_def_rpbcontent(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


skip_64_rpbcontent(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		   TrUserData) ->
    dfp_read_field_def_rpbcontent(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  TrUserData).


d_msg_rpbgetresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetresp(Bin, 0, 0,
				  id([], TrUserData), id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetresp(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetresp_content(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_rpbgetresp(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetresp_vclock(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_rpbgetresp(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetresp_unchanged(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rpbgetresp(<<>>, 0, 0, F1, F2, F3,
			      TrUserData) ->
    #rpbgetresp{content = lists_reverse(F1, TrUserData),
		vclock = F2, unchanged = F3};
dfp_read_field_def_rpbgetresp(Other, Z1, Z2, F1, F2, F3,
			      TrUserData) ->
    dg_read_field_def_rpbgetresp(Other, Z1, Z2, F1, F2, F3,
				 TrUserData).

dg_read_field_def_rpbgetresp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetresp(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
dg_read_field_def_rpbgetresp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetresp_content(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      18 ->
	  d_field_rpbgetresp_vclock(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      24 ->
	  d_field_rpbgetresp_unchanged(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetresp(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    1 ->
		skip_64_rpbgetresp(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetresp(Rest, 0, 0, F1, F2, F3,
						 TrUserData);
	    5 ->
		skip_32_rpbgetresp(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetresp(<<>>, 0, 0, F1, F2, F3,
			     TrUserData) ->
    #rpbgetresp{content = lists_reverse(F1, TrUserData),
		vclock = F2, unchanged = F3}.

d_field_rpbgetresp_content(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetresp_content(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_rpbgetresp_content(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcontent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbgetresp(Rest2, 0, 0,
				  cons(NewFValue, F1, TrUserData), F2, F3,
				  TrUserData).


d_field_rpbgetresp_vclock(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetresp_vclock(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_rpbgetresp_vclock(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetresp(Rest2, 0, 0, F1,
				  NewFValue, F3, TrUserData).


d_field_rpbgetresp_unchanged(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetresp_unchanged(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rpbgetresp_unchanged(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetresp(Rest, 0, 0, F1, F2,
				  NewFValue, TrUserData).


skip_varint_rpbgetresp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbgetresp(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
skip_varint_rpbgetresp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


skip_length_delimited_rpbgetresp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetresp(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rpbgetresp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetresp(Rest2, 0, 0, F1, F2, F3,
				  TrUserData).


skip_32_rpbgetresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


skip_64_rpbgetresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


d_msg_rpbindexobject(Bin, TrUserData) ->
    dfp_read_field_def_rpbindexobject(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbindexobject(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbindexobject_key(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rpbindexobject(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbindexobject_object(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_rpbindexobject(<<>>, 0, 0, F1, F2,
				  _) ->
    #rpbindexobject{key = F1, object = F2};
dfp_read_field_def_rpbindexobject(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_rpbindexobject(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_rpbindexobject(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbindexobject(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbindexobject(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbindexobject_key(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_rpbindexobject_object(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbindexobject(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_rpbindexobject(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbindexobject(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_rpbindexobject(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbindexobject(<<>>, 0, 0, F1, F2,
				 _) ->
    #rpbindexobject{key = F1, object = F2}.

d_field_rpbindexobject_key(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbindexobject_key(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rpbindexobject_key(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexobject(Rest2, 0, 0,
				      NewFValue, F2, TrUserData).


d_field_rpbindexobject_object(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbindexobject_object(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbindexobject_object(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbgetresp(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbindexobject(Rest2, 0, 0, F1,
				      if F2 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbgetresp(F2, NewFValue,
								  TrUserData)
				      end,
				      TrUserData).


skip_varint_rpbindexobject(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbindexobject(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_rpbindexobject(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbindexobject(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_rpbindexobject(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbindexobject(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbindexobject(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbindexobject(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_rpbindexobject(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rpbindexobject(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_rpbindexobject(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_rpbindexobject(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_rpbmodfun(Bin, TrUserData) ->
    dfp_read_field_def_rpbmodfun(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbmodfun(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_rpbmodfun_module(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_rpbmodfun(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_rpbmodfun_function(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2, _) ->
    #rpbmodfun{module = F1, function = F2};
dfp_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_rpbmodfun(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbmodfun(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_rpbmodfun(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbmodfun_module(Rest, 0, 0, F1, F2,
				   TrUserData);
      18 ->
	  d_field_rpbmodfun_function(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbmodfun(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2, _) ->
    #rpbmodfun{module = F1, function = F2}.

d_field_rpbmodfun_module(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmodfun_module(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_rpbmodfun_module(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_rpbmodfun_function(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmodfun_function(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rpbmodfun_function(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_rpbmodfun(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_rpbmodfun(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rpbmodfun(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_rpbmodfun(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbmodfun(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbmodfun(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_rpbmodfun(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_rpbmodfun(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_rpbcommithook(Bin, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcommithook(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbcommithook_modfun(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpbcommithook(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbcommithook_name(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2,
				 _) ->
    #rpbcommithook{modfun = F1, name = F2};
dfp_read_field_def_rpbcommithook(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_rpbcommithook(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_rpbcommithook(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcommithook(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbcommithook(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcommithook_modfun(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_rpbcommithook_name(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcommithook(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_rpbcommithook(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbcommithook(Rest, 0, 0, F1, F2,
						    TrUserData);
	    5 ->
		skip_32_rpbcommithook(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2,
				_) ->
    #rpbcommithook{modfun = F1, name = F2}.

d_field_rpbcommithook_modfun(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbcommithook_modfun(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpbcommithook_modfun(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true ->
					    merge_msg_rpbmodfun(F1, NewFValue,
								TrUserData)
				     end,
				     F2, TrUserData).


d_field_rpbcommithook_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbcommithook_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rpbcommithook_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_rpbcommithook(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_rpbcommithook(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_rpbcommithook(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_rpbcommithook(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcommithook(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbcommithook(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_32_rpbcommithook(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_rpbcommithook(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_rpbbucketprops(Bin, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id([], TrUserData), id(false, TrUserData),
				      id([], TrUserData), id(false, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbbucketprops(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_n_val(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28, F29, F30,
				 TrUserData);
dfp_read_field_def_rpbbucketprops(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_allow_mult(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_last_write_wins(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30,
					   TrUserData);
dfp_read_field_def_rpbbucketprops(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_precommit(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_has_precommit(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<50, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_postcommit(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_has_postcommit(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30,
					  TrUserData);
dfp_read_field_def_rpbbucketprops(<<66, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_chash_keyfun(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<74, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_linkfun(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28, F29, F30,
				   TrUserData);
dfp_read_field_def_rpbbucketprops(<<80, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_old_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<88, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_young_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<96, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_big_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<104, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_small_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<112, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_pr(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<120, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_r(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<128, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_w(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<136, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_pw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<144, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_dw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<152, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_rw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<160, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_basic_quorum(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<168, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_notfound_ok(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<178, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_backend(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28, F29, F30,
				   TrUserData);
dfp_read_field_def_rpbbucketprops(<<184, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_search(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21, F22,
				  F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData);
dfp_read_field_def_rpbbucketprops(<<192, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_repl(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, F22, F23,
				F24, F25, F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<202, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_search_index(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<210, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_datatype(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
dfp_read_field_def_rpbbucketprops(<<216, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_consistent(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<224, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_write_once(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<232, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_hll_precision(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<240, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_ttl(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3,
		    precommit = lists_reverse(F4, TrUserData),
		    has_precommit = F5,
		    postcommit = lists_reverse(F6, TrUserData),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28, hll_precision = F29,
		    ttl = F30};
dfp_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData) ->
    dg_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, TrUserData).

dg_read_field_def_rpbbucketprops(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbbucketprops(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, TrUserData);
dg_read_field_def_rpbbucketprops(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbbucketprops_n_val(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       F22, F23, F24, F25, F26, F27, F28, F29,
				       F30, TrUserData);
      16 ->
	  d_field_rpbbucketprops_allow_mult(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      24 ->
	  d_field_rpbbucketprops_last_write_wins(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, TrUserData);
      34 ->
	  d_field_rpbbucketprops_precommit(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28, F29, F30, TrUserData);
      40 ->
	  d_field_rpbbucketprops_has_precommit(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, TrUserData);
      50 ->
	  d_field_rpbbucketprops_postcommit(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      56 ->
	  d_field_rpbbucketprops_has_postcommit(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28, F29, F30, TrUserData);
      66 ->
	  d_field_rpbbucketprops_chash_keyfun(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      74 ->
	  d_field_rpbbucketprops_linkfun(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27, F28,
					 F29, F30, TrUserData);
      80 ->
	  d_field_rpbbucketprops_old_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      88 ->
	  d_field_rpbbucketprops_young_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      96 ->
	  d_field_rpbbucketprops_big_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      104 ->
	  d_field_rpbbucketprops_small_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      112 ->
	  d_field_rpbbucketprops_pr(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      120 ->
	  d_field_rpbbucketprops_r(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28, F29, F30, TrUserData);
      128 ->
	  d_field_rpbbucketprops_w(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28, F29, F30, TrUserData);
      136 ->
	  d_field_rpbbucketprops_pw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      144 ->
	  d_field_rpbbucketprops_dw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      152 ->
	  d_field_rpbbucketprops_rw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      160 ->
	  d_field_rpbbucketprops_basic_quorum(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      168 ->
	  d_field_rpbbucketprops_notfound_ok(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30,
					     TrUserData);
      178 ->
	  d_field_rpbbucketprops_backend(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27, F28,
					 F29, F30, TrUserData);
      184 ->
	  d_field_rpbbucketprops_search(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, F22, F23, F24, F25, F26, F27, F28,
					F29, F30, TrUserData);
      192 ->
	  d_field_rpbbucketprops_repl(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      F22, F23, F24, F25, F26, F27, F28, F29,
				      F30, TrUserData);
      202 ->
	  d_field_rpbbucketprops_search_index(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      210 ->
	  d_field_rpbbucketprops_datatype(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28, F29, F30, TrUserData);
      216 ->
	  d_field_rpbbucketprops_consistent(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      224 ->
	  d_field_rpbbucketprops_write_once(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      232 ->
	  d_field_rpbbucketprops_hll_precision(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, TrUserData);
      240 ->
	  d_field_rpbbucketprops_ttl(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     F22, F23, F24, F25, F26, F27, F28, F29,
				     F30, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28, F29, F30, TrUserData);
	    1 ->
		skip_64_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       TrUserData);
	    2 ->
		skip_length_delimited_rpbbucketprops(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, TrUserData);
	    5 ->
		skip_32_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       TrUserData)
	  end
    end;
dg_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28, F29, F30,
				 TrUserData) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3,
		    precommit = lists_reverse(F4, TrUserData),
		    has_precommit = F5,
		    postcommit = lists_reverse(F6, TrUserData),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28, hll_precision = F29,
		    ttl = F30}.

d_field_rpbbucketprops_n_val(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			     TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_n_val(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, F22, F23, F24, F25, F26, F27, F28, F29,
				 F30, TrUserData);
d_field_rpbbucketprops_n_val(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_allow_mult(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_allow_mult(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_allow_mult(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, F6, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_last_write_wins(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_last_write_wins(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, TrUserData);
d_field_rpbbucketprops_last_write_wins(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30,
				       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_precommit(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_precommit(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_precommit(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcommithook(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, cons(NewFValue, F4, TrUserData), F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15, F16, F17, F18, F19, F20, F21, F22,
				      F23, F24, F25, F26, F27, F28, F29, F30,
				      TrUserData).


d_field_rpbbucketprops_has_precommit(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_has_precommit(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
d_field_rpbbucketprops_has_precommit(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_postcommit(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_postcommit(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_postcommit(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcommithook(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5,
				      cons(NewFValue, F6, TrUserData), F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_has_postcommit(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_has_postcommit(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27, F28,
					  F29, F30, TrUserData);
d_field_rpbbucketprops_has_postcommit(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_chash_keyfun(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_chash_keyfun(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_chash_keyfun(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7,
				      if F8 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F8, NewFValue,
								 TrUserData)
				      end,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_linkfun(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_linkfun(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_linkfun(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8,
				      if F9 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F9, NewFValue,
								 TrUserData)
				      end,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_old_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_old_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_old_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				  F11, F12, F13, F14, F15, F16, F17, F18, F19,
				  F20, F21, F22, F23, F24, F25, F26, F27, F28,
				  F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_young_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_young_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_young_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, _, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      NewFValue, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_big_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_big_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_big_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      NewFValue, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_small_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_small_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_small_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, _, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      NewFValue, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_pr(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_pr(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_pr(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, _, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, NewFValue, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_r(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_r(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_r(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, _, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, NewFValue, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_w(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_w(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_w(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, _, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, NewFValue, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_pw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_pw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_pw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, _, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, NewFValue, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_dw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_dw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_dw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, _, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, NewFValue, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_rw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_rw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_rw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, _, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, NewFValue,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_basic_quorum(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_basic_quorum(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_basic_quorum(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, _, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      NewFValue, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_notfound_ok(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_notfound_ok(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30,
				       TrUserData);
d_field_rpbbucketprops_notfound_ok(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, _, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      NewFValue, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_backend(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_backend(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_backend(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, _, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, NewFValue, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_search(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_search(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, F22, F23, F24, F25, F26,
				  F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_search(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, _, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, NewFValue, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_repl(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			    TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_repl(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, F22, F23, F24, F25, F26, F27, F28, F29,
				F30, TrUserData);
d_field_rpbbucketprops_repl(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, _, F25, F26, F27, F28, F29, F30,
			    TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RpbBucketProps.RpbReplMode'(Tmp),
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, NewFValue, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_search_index(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_search_index(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_search_index(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, _, F26, F27,
				    F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, NewFValue, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_datatype(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_datatype(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_datatype(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, _, F27, F28, F29,
				F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, NewFValue, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_consistent(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_consistent(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_consistent(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, _,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, NewFValue,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_write_once(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_write_once(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_write_once(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  _, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27,
				      NewFValue, F29, F30, TrUserData).


d_field_rpbbucketprops_hll_precision(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_hll_precision(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
d_field_rpbbucketprops_hll_precision(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, _, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      NewFValue, F30, TrUserData).


d_field_rpbbucketprops_ttl(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_ttl(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData);
d_field_rpbbucketprops_ttl(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, _,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, NewFValue, TrUserData).


skip_varint_rpbbucketprops(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData) ->
    skip_varint_rpbbucketprops(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28, F29, F30, TrUserData);
skip_varint_rpbbucketprops(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_length_delimited_rpbbucketprops(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbbucketprops(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
skip_length_delimited_rpbbucketprops(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_32_rpbbucketprops(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_64_rpbbucketprops(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


d_msg_rpbresetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbresetbucketreq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbresetbucketreq_bucket(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_rpbresetbucketreq(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbresetbucketreq_type(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1, F2,
				     _) ->
    #rpbresetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_rpbresetbucketreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbresetbucketreq(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbresetbucketreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbresetbucketreq_bucket(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_rpbresetbucketreq_type(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_rpbresetbucketreq(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1, F2,
				    _) ->
    #rpbresetbucketreq{bucket = F1, type = F2}.

d_field_rpbresetbucketreq_bucket(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbresetbucketreq_bucket(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbresetbucketreq_bucket(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_rpbresetbucketreq_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbresetbucketreq_type(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbresetbucketreq_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_rpbresetbucketreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbresetbucketreq(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_rpbresetbucketreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_rpbresetbucketreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbresetbucketreq(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbresetbucketreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_rpbresetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_rpbresetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_rpbcsbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbcsbucketreq(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(true, TrUserData),
				      id(false, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcsbucketreq(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_bucket(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_start_key(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_end_key(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_start_incl(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_end_incl(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10,
				    TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<50, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_continuation(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_max_results(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_timeout(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<74, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_type(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<82, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    d_field_rpbcsbucketreq_cover_context(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 TrUserData);
dfp_read_field_def_rpbcsbucketreq(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, _) ->
    #rpbcsbucketreq{bucket = F1, start_key = F2,
		    end_key = F3, start_incl = F4, end_incl = F5,
		    continuation = F6, max_results = F7, timeout = F8,
		    type = F9, cover_context = F10};
dfp_read_field_def_rpbcsbucketreq(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10,
				  TrUserData) ->
    dg_read_field_def_rpbcsbucketreq(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).

dg_read_field_def_rpbcsbucketreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcsbucketreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, TrUserData);
dg_read_field_def_rpbcsbucketreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcsbucketreq_bucket(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
      18 ->
	  d_field_rpbcsbucketreq_start_key(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
      26 ->
	  d_field_rpbcsbucketreq_end_key(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10,
					 TrUserData);
      32 ->
	  d_field_rpbcsbucketreq_start_incl(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      40 ->
	  d_field_rpbcsbucketreq_end_incl(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10,
					  TrUserData);
      50 ->
	  d_field_rpbcsbucketreq_continuation(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      TrUserData);
      56 ->
	  d_field_rpbcsbucketreq_max_results(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      64 ->
	  d_field_rpbcsbucketreq_timeout(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10,
					 TrUserData);
      74 ->
	  d_field_rpbcsbucketreq_type(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, TrUserData);
      82 ->
	  d_field_rpbcsbucketreq_cover_context(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcsbucketreq(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, TrUserData);
	    1 ->
		skip_64_rpbcsbucketreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, TrUserData);
	    2 ->
		skip_length_delimited_rpbcsbucketreq(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, TrUserData);
	    5 ->
		skip_32_rpbcsbucketreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, TrUserData)
	  end
    end;
dg_read_field_def_rpbcsbucketreq(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, _) ->
    #rpbcsbucketreq{bucket = F1, start_key = F2,
		    end_key = F3, start_incl = F4, end_incl = F5,
		    continuation = F6, max_results = F7, timeout = F8,
		    type = F9, cover_context = F10}.

d_field_rpbcsbucketreq_bucket(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_bucket(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, TrUserData);
d_field_rpbcsbucketreq_bucket(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0,
				      NewFValue, F2, F3, F4, F5, F6, F7, F8, F9,
				      F10, TrUserData).


d_field_rpbcsbucketreq_start_key(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_start_key(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_start_key(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1,
				      NewFValue, F3, F4, F5, F6, F7, F8, F9,
				      F10, TrUserData).


d_field_rpbcsbucketreq_end_key(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_end_key(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_end_key(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_start_incl(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_start_incl(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_start_incl(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcsbucketreq(Rest, 0, 0, F1, F2,
				      F3, NewFValue, F5, F6, F7, F8, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_end_incl(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_end_incl(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_end_incl(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
				TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcsbucketreq(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_continuation(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_continuation(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_continuation(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				    F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, NewFValue, F7, F8, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_max_results(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_max_results(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_max_results(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				   F10, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcsbucketreq(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_timeout(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_timeout(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_timeout(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
			       TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcsbucketreq(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, NewFValue, F9, F10,
				      TrUserData).


d_field_rpbcsbucketreq_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData);
d_field_rpbcsbucketreq_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
			    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, NewFValue, F10,
				      TrUserData).


d_field_rpbcsbucketreq_cover_context(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketreq_cover_context(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, TrUserData);
d_field_rpbcsbucketreq_cover_context(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      TrUserData).


skip_varint_rpbcsbucketreq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData) ->
    skip_varint_rpbcsbucketreq(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, TrUserData);
skip_varint_rpbcsbucketreq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			   TrUserData) ->
    dfp_read_field_def_rpbcsbucketreq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).


skip_length_delimited_rpbcsbucketreq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcsbucketreq(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, TrUserData);
skip_length_delimited_rpbcsbucketreq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcsbucketreq(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).


skip_32_rpbcsbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_rpbcsbucketreq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).


skip_64_rpbcsbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_rpbcsbucketreq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).


d_msg_rpbsetclientidreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbsetclientidreq(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbsetclientidreq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_rpbsetclientidreq_client_id(Rest, Z1, Z2, F1,
					TrUserData);
dfp_read_field_def_rpbsetclientidreq(<<>>, 0, 0, F1,
				     _) ->
    #rpbsetclientidreq{client_id = F1};
dfp_read_field_def_rpbsetclientidreq(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_rpbsetclientidreq(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_rpbsetclientidreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetclientidreq(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbsetclientidreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetclientidreq_client_id(Rest, 0, 0, F1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetclientidreq(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_rpbsetclientidreq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbsetclientidreq(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_rpbsetclientidreq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbsetclientidreq(<<>>, 0, 0, F1,
				    _) ->
    #rpbsetclientidreq{client_id = F1}.

d_field_rpbsetclientidreq_client_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbsetclientidreq_client_id(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
d_field_rpbsetclientidreq_client_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetclientidreq(Rest2, 0, 0,
					 NewFValue, TrUserData).


skip_varint_rpbsetclientidreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbsetclientidreq(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_rpbsetclientidreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbsetclientidreq(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_rpbsetclientidreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbsetclientidreq(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbsetclientidreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetclientidreq(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_rpbsetclientidreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_rpbsetclientidreq(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_rpbsetclientidreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_rpbsetclientidreq(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_rpbcounterupdatereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbcounterupdatereq(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_rpbcounterupdatereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_bucket(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_key(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<24,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_amount(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_w(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_dw(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<48,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_pw(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<56,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_rpbcounterupdatereq_returnvalue(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7,
					    TrUserData);
dfp_read_field_def_rpbcounterupdatereq(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, _) ->
    #rpbcounterupdatereq{bucket = F1, key = F2, amount = F3,
			 w = F4, dw = F5, pw = F6, returnvalue = F7};
dfp_read_field_def_rpbcounterupdatereq(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    dg_read_field_def_rpbcounterupdatereq(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_rpbcounterupdatereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcounterupdatereq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, TrUserData);
dg_read_field_def_rpbcounterupdatereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcounterupdatereq_bucket(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, TrUserData);
      18 ->
	  d_field_rpbcounterupdatereq_key(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, TrUserData);
      24 ->
	  d_field_rpbcounterupdatereq_amount(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, TrUserData);
      32 ->
	  d_field_rpbcounterupdatereq_w(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, TrUserData);
      40 ->
	  d_field_rpbcounterupdatereq_dw(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      48 ->
	  d_field_rpbcounterupdatereq_pw(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, TrUserData);
      56 ->
	  d_field_rpbcounterupdatereq_returnvalue(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcounterupdatereq(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, TrUserData);
	    1 ->
		skip_64_rpbcounterupdatereq(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, TrUserData);
	    2 ->
		skip_length_delimited_rpbcounterupdatereq(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, TrUserData);
	    5 ->
		skip_32_rpbcounterupdatereq(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, TrUserData)
	  end
    end;
dg_read_field_def_rpbcounterupdatereq(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, _) ->
    #rpbcounterupdatereq{bucket = F1, key = F2, amount = F3,
			 w = F4, dw = F5, pw = F6, returnvalue = F7}.

d_field_rpbcounterupdatereq_bucket(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_bucket(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
d_field_rpbcounterupdatereq_bucket(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcounterupdatereq(Rest2, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_key(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_key(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
d_field_rpbcounterupdatereq_key(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcounterupdatereq(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_amount(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_amount(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
d_field_rpbcounterupdatereq_amount(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7,
				   TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rpbcounterupdatereq(Rest, 0, 0, F1,
					   F2, NewFValue, F4, F5, F6, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_w(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_w(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  TrUserData);
d_field_rpbcounterupdatereq_w(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcounterupdatereq(Rest, 0, 0, F1,
					   F2, F3, NewFValue, F5, F6, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_dw(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_dw(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_rpbcounterupdatereq_dw(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcounterupdatereq(Rest, 0, 0, F1,
					   F2, F3, F4, NewFValue, F6, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_pw(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_pw(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
d_field_rpbcounterupdatereq_pw(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcounterupdatereq(Rest, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7,
					   TrUserData).


d_field_rpbcounterupdatereq_returnvalue(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7,
					TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdatereq_returnvalue(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, TrUserData);
d_field_rpbcounterupdatereq_returnvalue(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, _,
					TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcounterupdatereq(Rest, 0, 0, F1,
					   F2, F3, F4, F5, F6, NewFValue,
					   TrUserData).


skip_varint_rpbcounterupdatereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    skip_varint_rpbcounterupdatereq(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
skip_varint_rpbcounterupdatereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    dfp_read_field_def_rpbcounterupdatereq(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_rpbcounterupdatereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcounterupdatereq(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, TrUserData);
skip_length_delimited_rpbcounterupdatereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcounterupdatereq(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_32_rpbcounterupdatereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_rpbcounterupdatereq(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_64_rpbcounterupdatereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_rpbcounterupdatereq(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


d_msg_rpblistbucketsreq(Bin, TrUserData) ->
    dfp_read_field_def_rpblistbucketsreq(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpblistbucketsreq(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistbucketsreq_timeout(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_rpblistbucketsreq(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistbucketsreq_stream(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_rpblistbucketsreq(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistbucketsreq_type(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rpblistbucketsreq(<<>>, 0, 0, F1, F2,
				     F3, _) ->
    #rpblistbucketsreq{timeout = F1, stream = F2,
		       type = F3};
dfp_read_field_def_rpblistbucketsreq(Other, Z1, Z2, F1,
				     F2, F3, TrUserData) ->
    dg_read_field_def_rpblistbucketsreq(Other, Z1, Z2, F1,
					F2, F3, TrUserData).

dg_read_field_def_rpblistbucketsreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpblistbucketsreq(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpblistbucketsreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpblistbucketsreq_timeout(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      16 ->
	  d_field_rpblistbucketsreq_stream(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      26 ->
	  d_field_rpblistbucketsreq_type(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpblistbucketsreq(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    1 ->
		skip_64_rpblistbucketsreq(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    2 ->
		skip_length_delimited_rpblistbucketsreq(Rest, 0, 0, F1,
							F2, F3, TrUserData);
	    5 ->
		skip_32_rpblistbucketsreq(Rest, 0, 0, F1, F2, F3,
					  TrUserData)
	  end
    end;
dg_read_field_def_rpblistbucketsreq(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #rpblistbucketsreq{timeout = F1, stream = F2,
		       type = F3}.

d_field_rpblistbucketsreq_timeout(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistbucketsreq_timeout(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpblistbucketsreq_timeout(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpblistbucketsreq(Rest, 0, 0,
					 NewFValue, F2, F3, TrUserData).


d_field_rpblistbucketsreq_stream(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistbucketsreq_stream(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpblistbucketsreq_stream(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpblistbucketsreq(Rest, 0, 0, F1,
					 NewFValue, F3, TrUserData).


d_field_rpblistbucketsreq_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistbucketsreq_type(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpblistbucketsreq_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblistbucketsreq(Rest2, 0, 0, F1,
					 F2, NewFValue, TrUserData).


skip_varint_rpblistbucketsreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpblistbucketsreq(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
skip_varint_rpblistbucketsreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistbucketsreq(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


skip_length_delimited_rpblistbucketsreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpblistbucketsreq(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3,
					    TrUserData);
skip_length_delimited_rpblistbucketsreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpblistbucketsreq(Rest2, 0, 0, F1,
					 F2, F3, TrUserData).


skip_32_rpblistbucketsreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistbucketsreq(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


skip_64_rpblistbucketsreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistbucketsreq(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


d_msg_rpbbucketkeypreflistitem(Bin, TrUserData) ->
    dfp_read_field_def_rpbbucketkeypreflistitem(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_rpbbucketkeypreflistitem(<<8,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbbucketkeypreflistitem_partition(Rest, Z1, Z2,
					       F1, F2, F3, TrUserData);
dfp_read_field_def_rpbbucketkeypreflistitem(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbbucketkeypreflistitem_node(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_rpbbucketkeypreflistitem(<<24,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbbucketkeypreflistitem_primary(Rest, Z1, Z2,
					     F1, F2, F3, TrUserData);
dfp_read_field_def_rpbbucketkeypreflistitem(<<>>, 0, 0,
					    F1, F2, F3, _) ->
    #rpbbucketkeypreflistitem{partition = F1, node = F2,
			      primary = F3};
dfp_read_field_def_rpbbucketkeypreflistitem(Other, Z1,
					    Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_rpbbucketkeypreflistitem(Other, Z1,
					       Z2, F1, F2, F3, TrUserData).

dg_read_field_def_rpbbucketkeypreflistitem(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbbucketkeypreflistitem(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
dg_read_field_def_rpbbucketkeypreflistitem(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbbucketkeypreflistitem_partition(Rest, 0, 0,
						     F1, F2, F3, TrUserData);
      18 ->
	  d_field_rpbbucketkeypreflistitem_node(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      24 ->
	  d_field_rpbbucketkeypreflistitem_primary(Rest, 0, 0, F1,
						   F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbbucketkeypreflistitem(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    1 ->
		skip_64_rpbbucketkeypreflistitem(Rest, 0, 0, F1, F2, F3,
						 TrUserData);
	    2 ->
		skip_length_delimited_rpbbucketkeypreflistitem(Rest, 0,
							       0, F1, F2, F3,
							       TrUserData);
	    5 ->
		skip_32_rpbbucketkeypreflistitem(Rest, 0, 0, F1, F2, F3,
						 TrUserData)
	  end
    end;
dg_read_field_def_rpbbucketkeypreflistitem(<<>>, 0, 0,
					   F1, F2, F3, _) ->
    #rpbbucketkeypreflistitem{partition = F1, node = F2,
			      primary = F3}.

d_field_rpbbucketkeypreflistitem_partition(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbbucketkeypreflistitem_partition(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
d_field_rpbbucketkeypreflistitem_partition(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest, 0, 0,
						NewFValue, F2, F3, TrUserData).


d_field_rpbbucketkeypreflistitem_node(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbbucketkeypreflistitem_node(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_rpbbucketkeypreflistitem_node(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest2, 0, 0,
						F1, NewFValue, F3, TrUserData).


d_field_rpbbucketkeypreflistitem_primary(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbbucketkeypreflistitem_primary(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
d_field_rpbbucketkeypreflistitem_primary(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest, 0, 0,
						F1, F2, NewFValue, TrUserData).


skip_varint_rpbbucketkeypreflistitem(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbbucketkeypreflistitem(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData);
skip_varint_rpbbucketkeypreflistitem(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


skip_length_delimited_rpbbucketkeypreflistitem(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbbucketkeypreflistitem(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, TrUserData);
skip_length_delimited_rpbbucketkeypreflistitem(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest2, 0, 0,
						F1, F2, F3, TrUserData).


skip_32_rpbbucketkeypreflistitem(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


skip_64_rpbbucketkeypreflistitem(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbbucketkeypreflistitem(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


d_msg_rpbgetbucketkeypreflistresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Bin, 0,
						   0, id([], TrUserData),
						   TrUserData).

dfp_read_field_def_rpbgetbucketkeypreflistresp(<<10,
						 Rest/binary>>,
					       Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetbucketkeypreflistresp_preflist(Rest, Z1,
						 Z2, F1, TrUserData);
dfp_read_field_def_rpbgetbucketkeypreflistresp(<<>>, 0,
					       0, F1, TrUserData) ->
    #rpbgetbucketkeypreflistresp{preflist =
				     lists_reverse(F1, TrUserData)};
dfp_read_field_def_rpbgetbucketkeypreflistresp(Other,
					       Z1, Z2, F1, TrUserData) ->
    dg_read_field_def_rpbgetbucketkeypreflistresp(Other, Z1,
						  Z2, F1, TrUserData).

dg_read_field_def_rpbgetbucketkeypreflistresp(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketkeypreflistresp(Rest,
						  N + 7, X bsl N + Acc, F1,
						  TrUserData);
dg_read_field_def_rpbgetbucketkeypreflistresp(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketkeypreflistresp_preflist(Rest, 0, 0,
						       F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketkeypreflistresp(Rest, 0, 0, F1,
							TrUserData);
	    1 ->
		skip_64_rpbgetbucketkeypreflistresp(Rest, 0, 0, F1,
						    TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketkeypreflistresp(Rest,
								  0, 0, F1,
								  TrUserData);
	    5 ->
		skip_32_rpbgetbucketkeypreflistresp(Rest, 0, 0, F1,
						    TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketkeypreflistresp(<<>>, 0,
					      0, F1, TrUserData) ->
    #rpbgetbucketkeypreflistresp{preflist =
				     lists_reverse(F1, TrUserData)}.

d_field_rpbgetbucketkeypreflistresp_preflist(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketkeypreflistresp_preflist(Rest,
						 N + 7, X bsl N + Acc, F1,
						 TrUserData);
d_field_rpbgetbucketkeypreflistresp_preflist(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketkeypreflistitem(Bs,
						  TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Rest2, 0,
						   0,
						   cons(NewFValue, F1,
							TrUserData),
						   TrUserData).


skip_varint_rpbgetbucketkeypreflistresp(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetbucketkeypreflistresp(Rest, Z1, Z2,
					    F1, TrUserData);
skip_varint_rpbgetbucketkeypreflistresp(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Rest, Z1,
						   Z2, F1, TrUserData).


skip_length_delimited_rpbgetbucketkeypreflistresp(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketkeypreflistresp(Rest,
						      N + 7, X bsl N + Acc, F1,
						      TrUserData);
skip_length_delimited_rpbgetbucketkeypreflistresp(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Rest2, 0,
						   0, F1, TrUserData).


skip_32_rpbgetbucketkeypreflistresp(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Rest, Z1,
						   Z2, F1, TrUserData).


skip_64_rpbgetbucketkeypreflistresp(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistresp(Rest, Z1,
						   Z2, F1, TrUserData).


d_msg_rpblistbucketsresp(Bin, TrUserData) ->
    dfp_read_field_def_rpblistbucketsresp(Bin, 0, 0,
					  id([], TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_rpblistbucketsresp(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpblistbucketsresp_buckets(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_rpblistbucketsresp(<<16,
					Rest/binary>>,
				      Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpblistbucketsresp_done(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_rpblistbucketsresp(<<>>, 0, 0, F1,
				      F2, TrUserData) ->
    #rpblistbucketsresp{buckets =
			    lists_reverse(F1, TrUserData),
			done = F2};
dfp_read_field_def_rpblistbucketsresp(Other, Z1, Z2, F1,
				      F2, TrUserData) ->
    dg_read_field_def_rpblistbucketsresp(Other, Z1, Z2, F1,
					 F2, TrUserData).

dg_read_field_def_rpblistbucketsresp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpblistbucketsresp(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpblistbucketsresp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpblistbucketsresp_buckets(Rest, 0, 0, F1, F2,
					     TrUserData);
      16 ->
	  d_field_rpblistbucketsresp_done(Rest, 0, 0, F1, F2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpblistbucketsresp(Rest, 0, 0, F1, F2,
					       TrUserData);
	    1 ->
		skip_64_rpblistbucketsresp(Rest, 0, 0, F1, F2,
					   TrUserData);
	    2 ->
		skip_length_delimited_rpblistbucketsresp(Rest, 0, 0, F1,
							 F2, TrUserData);
	    5 ->
		skip_32_rpblistbucketsresp(Rest, 0, 0, F1, F2,
					   TrUserData)
	  end
    end;
dg_read_field_def_rpblistbucketsresp(<<>>, 0, 0, F1, F2,
				     TrUserData) ->
    #rpblistbucketsresp{buckets =
			    lists_reverse(F1, TrUserData),
			done = F2}.

d_field_rpblistbucketsresp_buckets(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpblistbucketsresp_buckets(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_rpblistbucketsresp_buckets(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblistbucketsresp(Rest2, 0, 0,
					  cons(NewFValue, F1, TrUserData), F2,
					  TrUserData).


d_field_rpblistbucketsresp_done(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpblistbucketsresp_done(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_rpblistbucketsresp_done(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpblistbucketsresp(Rest, 0, 0, F1,
					  NewFValue, TrUserData).


skip_varint_rpblistbucketsresp(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpblistbucketsresp(Rest, Z1, Z2, F1, F2,
				   TrUserData);
skip_varint_rpblistbucketsresp(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistbucketsresp(Rest, Z1, Z2, F1,
					  F2, TrUserData).


skip_length_delimited_rpblistbucketsresp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpblistbucketsresp(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpblistbucketsresp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpblistbucketsresp(Rest2, 0, 0, F1,
					  F2, TrUserData).


skip_32_rpblistbucketsresp(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistbucketsresp(Rest, Z1, Z2, F1,
					  F2, TrUserData).


skip_64_rpblistbucketsresp(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistbucketsresp(Rest, Z1, Z2, F1,
					  F2, TrUserData).


d_msg_rpbputresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbputresp(Bin, 0, 0,
				  id([], TrUserData), id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbputresp(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbputresp_content(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_rpbputresp(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbputresp_vclock(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_rpbputresp(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbputresp_key(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
dfp_read_field_def_rpbputresp(<<>>, 0, 0, F1, F2, F3,
			      TrUserData) ->
    #rpbputresp{content = lists_reverse(F1, TrUserData),
		vclock = F2, key = F3};
dfp_read_field_def_rpbputresp(Other, Z1, Z2, F1, F2, F3,
			      TrUserData) ->
    dg_read_field_def_rpbputresp(Other, Z1, Z2, F1, F2, F3,
				 TrUserData).

dg_read_field_def_rpbputresp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbputresp(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
dg_read_field_def_rpbputresp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbputresp_content(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      18 ->
	  d_field_rpbputresp_vclock(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      26 ->
	  d_field_rpbputresp_key(Rest, 0, 0, F1, F2, F3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbputresp(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    1 ->
		skip_64_rpbputresp(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_rpbputresp(Rest, 0, 0, F1, F2, F3,
						 TrUserData);
	    5 ->
		skip_32_rpbputresp(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_rpbputresp(<<>>, 0, 0, F1, F2, F3,
			     TrUserData) ->
    #rpbputresp{content = lists_reverse(F1, TrUserData),
		vclock = F2, key = F3}.

d_field_rpbputresp_content(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbputresp_content(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_rpbputresp_content(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcontent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbputresp(Rest2, 0, 0,
				  cons(NewFValue, F1, TrUserData), F2, F3,
				  TrUserData).


d_field_rpbputresp_vclock(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbputresp_vclock(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_rpbputresp_vclock(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputresp(Rest2, 0, 0, F1,
				  NewFValue, F3, TrUserData).


d_field_rpbputresp_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbputresp_key(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, TrUserData);
d_field_rpbputresp_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputresp(Rest2, 0, 0, F1, F2,
				  NewFValue, TrUserData).


skip_varint_rpbputresp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbputresp(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData);
skip_varint_rpbputresp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbputresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


skip_length_delimited_rpbputresp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbputresp(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rpbputresp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbputresp(Rest2, 0, 0, F1, F2, F3,
				  TrUserData).


skip_32_rpbputresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, TrUserData) ->
    dfp_read_field_def_rpbputresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


skip_64_rpbputresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, TrUserData) ->
    dfp_read_field_def_rpbputresp(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData).


d_msg_rpbgetclientidresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetclientidresp(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_rpbgetclientidresp(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetclientidresp_client_id(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_rpbgetclientidresp(<<>>, 0, 0, F1,
				      _) ->
    #rpbgetclientidresp{client_id = F1};
dfp_read_field_def_rpbgetclientidresp(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_rpbgetclientidresp(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_rpbgetclientidresp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetclientidresp(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbgetclientidresp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetclientidresp_client_id(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetclientidresp(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_rpbgetclientidresp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetclientidresp(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_rpbgetclientidresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetclientidresp(<<>>, 0, 0, F1,
				     _) ->
    #rpbgetclientidresp{client_id = F1}.

d_field_rpbgetclientidresp_client_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetclientidresp_client_id(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_rpbgetclientidresp_client_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetclientidresp(Rest2, 0, 0,
					  NewFValue, TrUserData).


skip_varint_rpbgetclientidresp(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetclientidresp(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_rpbgetclientidresp(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetclientidresp(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_rpbgetclientidresp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetclientidresp(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbgetclientidresp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetclientidresp(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_rpbgetclientidresp(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetclientidresp(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_rpbgetclientidresp(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetclientidresp(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_rpbcoverageentry(Bin, TrUserData) ->
    dfp_read_field_def_rpbcoverageentry(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcoverageentry(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbcoverageentry_ip(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_rpbcoverageentry(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbcoverageentry_port(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
dfp_read_field_def_rpbcoverageentry(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbcoverageentry_keyspace_desc(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_rpbcoverageentry(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbcoverageentry_cover_context(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_rpbcoverageentry(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #rpbcoverageentry{ip = F1, port = F2,
		      keyspace_desc = F3, cover_context = F4};
dfp_read_field_def_rpbcoverageentry(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_rpbcoverageentry(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_rpbcoverageentry(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcoverageentry(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_rpbcoverageentry(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcoverageentry_ip(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      16 ->
	  d_field_rpbcoverageentry_port(Rest, 0, 0, F1, F2, F3,
					F4, TrUserData);
      26 ->
	  d_field_rpbcoverageentry_keyspace_desc(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      34 ->
	  d_field_rpbcoverageentry_cover_context(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcoverageentry(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_rpbcoverageentry(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_rpbcoverageentry(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    5 ->
		skip_32_rpbcoverageentry(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_rpbcoverageentry(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #rpbcoverageentry{ip = F1, port = F2,
		      keyspace_desc = F3, cover_context = F4}.

d_field_rpbcoverageentry_ip(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbcoverageentry_ip(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_rpbcoverageentry_ip(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoverageentry(Rest2, 0, 0,
					NewFValue, F2, F3, F4, TrUserData).


d_field_rpbcoverageentry_port(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbcoverageentry_port(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_rpbcoverageentry_port(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcoverageentry(Rest, 0, 0, F1,
					NewFValue, F3, F4, TrUserData).


d_field_rpbcoverageentry_keyspace_desc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbcoverageentry_keyspace_desc(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_rpbcoverageentry_keyspace_desc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoverageentry(Rest2, 0, 0, F1, F2,
					NewFValue, F4, TrUserData).


d_field_rpbcoverageentry_cover_context(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbcoverageentry_cover_context(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_rpbcoverageentry_cover_context(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoverageentry(Rest2, 0, 0, F1, F2,
					F3, NewFValue, TrUserData).


skip_varint_rpbcoverageentry(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_rpbcoverageentry(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_rpbcoverageentry(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbcoverageentry(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_rpbcoverageentry(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcoverageentry(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_rpbcoverageentry(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcoverageentry(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_32_rpbcoverageentry(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbcoverageentry(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_rpbcoverageentry(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbcoverageentry(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_rpbsetbuckettypereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_rpbsetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbsetbuckettypereq_type(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_rpbsetbuckettypereq(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbsetbuckettypereq_props(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				       F2, _) ->
    #rpbsetbuckettypereq{type = F1, props = F2};
dfp_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2,
				       F1, F2, TrUserData) ->
    dg_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2, F1,
					  F2, TrUserData).

dg_read_field_def_rpbsetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbsetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbuckettypereq_type(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_rpbsetbuckettypereq_props(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
						TrUserData);
	    1 ->
		skip_64_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    2 ->
		skip_length_delimited_rpbsetbuckettypereq(Rest, 0, 0,
							  F1, F2, TrUserData);
	    5 ->
		skip_32_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
					    TrUserData)
	  end
    end;
dg_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				      F2, _) ->
    #rpbsetbuckettypereq{type = F1, props = F2}.

d_field_rpbsetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbsetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0,
					   NewFValue, F2, TrUserData).


d_field_rpbsetbuckettypereq_props(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_props(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbsetbuckettypereq_props(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  merge_msg_rpbbucketprops(F2,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).


skip_varint_rpbsetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbsetbuckettypereq(Rest, Z1, Z2, F1, F2,
				    TrUserData);
skip_varint_rpbsetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_length_delimited_rpbsetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbsetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
skip_length_delimited_rpbsetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   F2, TrUserData).


skip_32_rpbsetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_64_rpbsetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


d_msg_rpbgetbuckettypereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_rpbgetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetbuckettypereq_type(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0, F1,
				       _) ->
    #rpbgetbuckettypereq{type = F1};
dfp_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_rpbgetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbgetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbuckettypereq_type(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbuckettypereq(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_rpbgetbuckettypereq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbuckettypereq(Rest, 0, 0,
							  F1, TrUserData);
	    5 ->
		skip_32_rpbgetbuckettypereq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0, F1,
				      _) ->
    #rpbgetbuckettypereq{type = F1}.

d_field_rpbgetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_rpbgetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0,
					   NewFValue, TrUserData).


skip_varint_rpbgetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_rpbgetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_rpbgetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbgetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0, F1,
					   TrUserData).


skip_32_rpbgetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_rpbgetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_rpbdelreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbdelreq(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbdelreq(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
dfp_read_field_def_rpbdelreq(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_key(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_rw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_vclock(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
dfp_read_field_def_rpbdelreq(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_r(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_w(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<56, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_pr(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_pw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<72, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_dw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<80, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_timeout(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13,
			      TrUserData);
dfp_read_field_def_rpbdelreq(<<88, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_sloppy_quorum(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<96, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_n_val(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<106, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbdelreq_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbdelreq(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #rpbdelreq{bucket = F1, key = F2, rw = F3, vclock = F4,
	       r = F5, w = F6, pr = F7, pw = F8, dw = F9,
	       timeout = F10, sloppy_quorum = F11, n_val = F12,
	       type = F13};
dfp_read_field_def_rpbdelreq(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData) ->
    dg_read_field_def_rpbdelreq(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				TrUserData).

dg_read_field_def_rpbdelreq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbdelreq(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, TrUserData);
dg_read_field_def_rpbdelreq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbdelreq_bucket(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
      18 ->
	  d_field_rpbdelreq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
      24 ->
	  d_field_rpbdelreq_rw(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, TrUserData);
      34 ->
	  d_field_rpbdelreq_vclock(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
      40 ->
	  d_field_rpbdelreq_r(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, TrUserData);
      48 ->
	  d_field_rpbdelreq_w(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, TrUserData);
      56 ->
	  d_field_rpbdelreq_pr(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, TrUserData);
      64 ->
	  d_field_rpbdelreq_pw(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, TrUserData);
      72 ->
	  d_field_rpbdelreq_dw(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, TrUserData);
      80 ->
	  d_field_rpbdelreq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    TrUserData);
      88 ->
	  d_field_rpbdelreq_sloppy_quorum(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, TrUserData);
      96 ->
	  d_field_rpbdelreq_n_val(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
      106 ->
	  d_field_rpbdelreq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13,
				      TrUserData);
	    1 ->
		skip_64_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, TrUserData);
	    2 ->
		skip_length_delimited_rpbdelreq(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, TrUserData);
	    5 ->
		skip_32_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, TrUserData)
	  end
    end;
dg_read_field_def_rpbdelreq(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #rpbdelreq{bucket = F1, key = F2, rw = F3, vclock = F4,
	       r = F5, w = F6, pr = F7, pw = F8, dw = F9,
	       timeout = F10, sloppy_quorum = F11, n_val = F12,
	       type = F13}.

d_field_rpbdelreq_bucket(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_bucket(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
d_field_rpbdelreq_bucket(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbdelreq(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_key(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  TrUserData);
d_field_rpbdelreq_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbdelreq(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_rw(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_rw(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			 TrUserData);
d_field_rpbdelreq_rw(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, TrUserData).


d_field_rpbdelreq_vclock(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_vclock(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
d_field_rpbdelreq_vclock(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbdelreq(Rest2, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				 F13, TrUserData).


d_field_rpbdelreq_r(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_r(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			TrUserData);
d_field_rpbdelreq_r(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_w(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_w(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			TrUserData);
d_field_rpbdelreq_w(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_pr(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_pr(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			 TrUserData);
d_field_rpbdelreq_pr(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, _, F8, F9, F10, F11, F12, F13,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, NewFValue, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_pw(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_pw(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			 TrUserData);
d_field_rpbdelreq_pw(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11, F12, F13,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_dw(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_dw(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			 TrUserData);
d_field_rpbdelreq_dw(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, _, F10, F11, F12, F13,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, NewFValue, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_timeout(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_timeout(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, TrUserData);
d_field_rpbdelreq_timeout(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11, F12,
			  F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				 TrUserData).


d_field_rpbdelreq_sloppy_quorum(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_sloppy_quorum(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
d_field_rpbdelreq_sloppy_quorum(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				_, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, NewFValue, F12, F13,
				 TrUserData).


d_field_rpbdelreq_n_val(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_n_val(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    TrUserData);
d_field_rpbdelreq_n_val(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
			F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbdelreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, NewFValue, F13,
				 TrUserData).


d_field_rpbdelreq_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_rpbdelreq_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_rpbdelreq_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbdelreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 NewFValue, TrUserData).


skip_varint_rpbdelreq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    skip_varint_rpbdelreq(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
skip_varint_rpbdelreq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    dfp_read_field_def_rpbdelreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_length_delimited_rpbdelreq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbdelreq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
skip_length_delimited_rpbdelreq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbdelreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_32_rpbdelreq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  TrUserData) ->
    dfp_read_field_def_rpbdelreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_64_rpbdelreq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  TrUserData) ->
    dfp_read_field_def_rpbdelreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_msg_rpbputreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbputreq(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbputreq(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, TrUserData);
dfp_read_field_def_rpbputreq(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_key(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			  TrUserData);
dfp_read_field_def_rpbputreq(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_vclock(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, TrUserData);
dfp_read_field_def_rpbputreq(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_content(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, TrUserData);
dfp_read_field_def_rpbputreq(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_w(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			TrUserData);
dfp_read_field_def_rpbputreq(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_dw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			 TrUserData);
dfp_read_field_def_rpbputreq(<<56, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_return_body(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData);
dfp_read_field_def_rpbputreq(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_pw(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			 TrUserData);
dfp_read_field_def_rpbputreq(<<72, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_if_not_modified(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbputreq(<<80, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_if_none_match(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbputreq(<<88, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_return_head(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData);
dfp_read_field_def_rpbputreq(<<96, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_timeout(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, TrUserData);
dfp_read_field_def_rpbputreq(<<104, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_asis(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			   TrUserData);
dfp_read_field_def_rpbputreq(<<112, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_sloppy_quorum(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbputreq(<<120, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_n_val(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, TrUserData);
dfp_read_field_def_rpbputreq(<<130, 1, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbputreq_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			   TrUserData);
dfp_read_field_def_rpbputreq(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, _) ->
    #rpbputreq{bucket = F1, key = F2, vclock = F3,
	       content = F4, w = F5, dw = F6, return_body = F7,
	       pw = F8, if_not_modified = F9, if_none_match = F10,
	       return_head = F11, timeout = F12, asis = F13,
	       sloppy_quorum = F14, n_val = F15, type = F16};
dfp_read_field_def_rpbputreq(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			     F15, F16, TrUserData) ->
    dg_read_field_def_rpbputreq(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, TrUserData).

dg_read_field_def_rpbputreq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbputreq(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, TrUserData);
dg_read_field_def_rpbputreq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbputreq_bucket(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, TrUserData);
      18 ->
	  d_field_rpbputreq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				F16, TrUserData);
      26 ->
	  d_field_rpbputreq_vclock(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, TrUserData);
      34 ->
	  d_field_rpbputreq_content(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, TrUserData);
      40 ->
	  d_field_rpbputreq_w(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			      TrUserData);
      48 ->
	  d_field_rpbputreq_dw(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			       TrUserData);
      56 ->
	  d_field_rpbputreq_return_body(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, TrUserData);
      64 ->
	  d_field_rpbputreq_pw(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			       TrUserData);
      72 ->
	  d_field_rpbputreq_if_not_modified(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16,
					    TrUserData);
      80 ->
	  d_field_rpbputreq_if_none_match(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, TrUserData);
      88 ->
	  d_field_rpbputreq_return_head(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, TrUserData);
      96 ->
	  d_field_rpbputreq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, TrUserData);
      104 ->
	  d_field_rpbputreq_asis(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				 F16, TrUserData);
      112 ->
	  d_field_rpbputreq_sloppy_quorum(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, TrUserData);
      120 ->
	  d_field_rpbputreq_n_val(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, TrUserData);
      130 ->
	  d_field_rpbputreq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				 F16, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbputreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15, F16, TrUserData);
	    1 ->
		skip_64_rpbputreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
	    2 ->
		skip_length_delimited_rpbputreq(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, F14, F15, F16,
						TrUserData);
	    5 ->
		skip_32_rpbputreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData)
	  end
    end;
dg_read_field_def_rpbputreq(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, _) ->
    #rpbputreq{bucket = F1, key = F2, vclock = F3,
	       content = F4, w = F5, dw = F6, return_body = F7,
	       pw = F8, if_not_modified = F9, if_none_match = F10,
	       return_head = F11, timeout = F12, asis = F13,
	       sloppy_quorum = F14, n_val = F15, type = F16}.

d_field_rpbputreq_bucket(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_bucket(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, TrUserData);
d_field_rpbputreq_bucket(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_key(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  F14, F15, F16, TrUserData);
d_field_rpbputreq_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_vclock(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_vclock(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, TrUserData);
d_field_rpbputreq_vclock(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, TrUserData).


d_field_rpbputreq_content(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_content(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, TrUserData);
d_field_rpbputreq_content(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcontent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, F1, F2, F3,
				 if F4 == undefined -> NewFValue;
				    true ->
					merge_msg_rpbcontent(F4, NewFValue,
							     TrUserData)
				 end,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 F15, F16, TrUserData).


d_field_rpbputreq_w(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_w(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			F15, F16, TrUserData);
d_field_rpbputreq_w(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_dw(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_dw(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			 F15, F16, TrUserData);
d_field_rpbputreq_dw(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_return_body(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_return_body(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
d_field_rpbputreq_return_body(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, NewFValue, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_pw(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_pw(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			 F15, F16, TrUserData);
d_field_rpbputreq_pw(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11, F12, F13,
		     F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_if_not_modified(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_if_not_modified(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      TrUserData);
d_field_rpbputreq_if_not_modified(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _,
				  F10, F11, F12, F13, F14, F15, F16,
				  TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, NewFValue, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_if_none_match(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_if_none_match(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    TrUserData);
d_field_rpbputreq_if_none_match(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_return_head(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_return_head(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
d_field_rpbputreq_return_head(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      _, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, NewFValue, F12, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_timeout(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_timeout(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, TrUserData);
d_field_rpbputreq_timeout(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
			  F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, NewFValue, F13,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_asis(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_asis(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14, F15, F16, TrUserData);
d_field_rpbputreq_asis(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       _, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, NewFValue,
				 F14, F15, F16, TrUserData).


d_field_rpbputreq_sloppy_quorum(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_sloppy_quorum(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    TrUserData);
d_field_rpbputreq_sloppy_quorum(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, _, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 NewFValue, F15, F16, TrUserData).


d_field_rpbputreq_n_val(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_n_val(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, TrUserData);
d_field_rpbputreq_n_val(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, _, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbputreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				 NewFValue, F16, TrUserData).


d_field_rpbputreq_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbputreq_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14, F15, F16, TrUserData);
d_field_rpbputreq_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14, F15, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, NewFValue, TrUserData).


skip_varint_rpbputreq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, TrUserData) ->
    skip_varint_rpbputreq(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
			  TrUserData);
skip_varint_rpbputreq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14, F15, F16, TrUserData) ->
    dfp_read_field_def_rpbputreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


skip_length_delimited_rpbputreq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbputreq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    TrUserData);
skip_length_delimited_rpbputreq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbputreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


skip_32_rpbputreq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, TrUserData) ->
    dfp_read_field_def_rpbputreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


skip_64_rpbputreq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		  F15, F16, TrUserData) ->
    dfp_read_field_def_rpbputreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, TrUserData).


d_msg_rpbgetreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetreq(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetreq(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
dfp_read_field_def_rpbgetreq(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_key(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_r(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_pr(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<40, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_basic_quorum(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
dfp_read_field_def_rpbgetreq(<<48, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_notfound_ok(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
dfp_read_field_def_rpbgetreq(<<58, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_if_modified(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
dfp_read_field_def_rpbgetreq(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_head(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<72, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_deletedvclock(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<80, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_timeout(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13,
			      TrUserData);
dfp_read_field_def_rpbgetreq(<<88, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_sloppy_quorum(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<96, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_n_val(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<106, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     F12, F13, TrUserData) ->
    d_field_rpbgetreq_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
dfp_read_field_def_rpbgetreq(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #rpbgetreq{bucket = F1, key = F2, r = F3, pr = F4,
	       basic_quorum = F5, notfound_ok = F6, if_modified = F7,
	       head = F8, deletedvclock = F9, timeout = F10,
	       sloppy_quorum = F11, n_val = F12, type = F13};
dfp_read_field_def_rpbgetreq(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData) ->
    dg_read_field_def_rpbgetreq(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				TrUserData).

dg_read_field_def_rpbgetreq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetreq(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, TrUserData);
dg_read_field_def_rpbgetreq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetreq_bucket(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
      18 ->
	  d_field_rpbgetreq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
      24 ->
	  d_field_rpbgetreq_r(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, TrUserData);
      32 ->
	  d_field_rpbgetreq_pr(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, TrUserData);
      40 ->
	  d_field_rpbgetreq_basic_quorum(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, TrUserData);
      48 ->
	  d_field_rpbgetreq_notfound_ok(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, TrUserData);
      58 ->
	  d_field_rpbgetreq_if_modified(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, TrUserData);
      64 ->
	  d_field_rpbgetreq_head(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      72 ->
	  d_field_rpbgetreq_deletedvclock(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, TrUserData);
      80 ->
	  d_field_rpbgetreq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    TrUserData);
      88 ->
	  d_field_rpbgetreq_sloppy_quorum(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, TrUserData);
      96 ->
	  d_field_rpbgetreq_n_val(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
      106 ->
	  d_field_rpbgetreq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13,
				      TrUserData);
	    1 ->
		skip_64_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetreq(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, F13, TrUserData);
	    5 ->
		skip_32_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9, F10, F11, F12, F13, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetreq(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, _) ->
    #rpbgetreq{bucket = F1, key = F2, r = F3, pr = F4,
	       basic_quorum = F5, notfound_ok = F6, if_modified = F7,
	       head = F8, deletedvclock = F9, timeout = F10,
	       sloppy_quorum = F11, n_val = F12, type = F13}.

d_field_rpbgetreq_bucket(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_bucket(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     TrUserData);
d_field_rpbgetreq_bucket(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetreq(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_key(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  TrUserData);
d_field_rpbgetreq_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetreq(Rest2, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_r(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_r(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			TrUserData);
d_field_rpbgetreq_r(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2,
				 NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, TrUserData).


d_field_rpbgetreq_pr(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_pr(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			 TrUserData);
d_field_rpbgetreq_pr(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3,
				 NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				 F13, TrUserData).


d_field_rpbgetreq_basic_quorum(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_basic_quorum(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, TrUserData);
d_field_rpbgetreq_basic_quorum(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
			       F11, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 NewFValue, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_notfound_ok(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_notfound_ok(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, TrUserData);
d_field_rpbgetreq_notfound_ok(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, NewFValue, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_if_modified(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_if_modified(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, TrUserData);
d_field_rpbgetreq_if_modified(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			      F11, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				 F13, TrUserData).


d_field_rpbgetreq_head(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_head(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_rpbgetreq_head(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11, F12,
		       F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, NewFValue, F9, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_deletedvclock(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_deletedvclock(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
d_field_rpbgetreq_deletedvclock(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, NewFValue, F10, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_timeout(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_timeout(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, TrUserData);
d_field_rpbgetreq_timeout(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11, F12,
			  F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, NewFValue, F11, F12, F13,
				 TrUserData).


d_field_rpbgetreq_sloppy_quorum(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_sloppy_quorum(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
d_field_rpbgetreq_sloppy_quorum(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				_, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, NewFValue, F12, F13,
				 TrUserData).


d_field_rpbgetreq_n_val(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_n_val(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    TrUserData);
d_field_rpbgetreq_n_val(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
			F13, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbgetreq(Rest, 0, 0, F1, F2, F3, F4,
				 F5, F6, F7, F8, F9, F10, F11, NewFValue, F13,
				 TrUserData).


d_field_rpbgetreq_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, TrUserData)
    when N < 57 ->
    d_field_rpbgetreq_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   TrUserData);
d_field_rpbgetreq_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12,
				 NewFValue, TrUserData).


skip_varint_rpbgetreq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    skip_varint_rpbgetreq(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, TrUserData);
skip_varint_rpbgetreq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      TrUserData) ->
    dfp_read_field_def_rpbgetreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_length_delimited_rpbgetreq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetreq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, TrUserData);
skip_length_delimited_rpbgetreq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetreq(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_32_rpbgetreq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  TrUserData) ->
    dfp_read_field_def_rpbgetreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


skip_64_rpbgetreq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  TrUserData) ->
    dfp_read_field_def_rpbgetreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 TrUserData).


d_msg_rpbgetbucketkeypreflistreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_rpbgetbucketkeypreflistreq(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetbucketkeypreflistreq_bucket(Rest, Z1, Z2,
					      F1, F2, F3, TrUserData);
dfp_read_field_def_rpbgetbucketkeypreflistreq(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetbucketkeypreflistreq_key(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
dfp_read_field_def_rpbgetbucketkeypreflistreq(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbgetbucketkeypreflistreq_type(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData);
dfp_read_field_def_rpbgetbucketkeypreflistreq(<<>>, 0,
					      0, F1, F2, F3, _) ->
    #rpbgetbucketkeypreflistreq{bucket = F1, key = F2,
				type = F3};
dfp_read_field_def_rpbgetbucketkeypreflistreq(Other, Z1,
					      Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_rpbgetbucketkeypreflistreq(Other, Z1,
						 Z2, F1, F2, F3, TrUserData).

dg_read_field_def_rpbgetbucketkeypreflistreq(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketkeypreflistreq(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, TrUserData);
dg_read_field_def_rpbgetbucketkeypreflistreq(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketkeypreflistreq_bucket(Rest, 0, 0,
						    F1, F2, F3, TrUserData);
      18 ->
	  d_field_rpbgetbucketkeypreflistreq_key(Rest, 0, 0, F1,
						 F2, F3, TrUserData);
      26 ->
	  d_field_rpbgetbucketkeypreflistreq_type(Rest, 0, 0, F1,
						  F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketkeypreflistreq(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    1 ->
		skip_64_rpbgetbucketkeypreflistreq(Rest, 0, 0, F1, F2,
						   F3, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketkeypreflistreq(Rest,
								 0, 0, F1, F2,
								 F3,
								 TrUserData);
	    5 ->
		skip_32_rpbgetbucketkeypreflistreq(Rest, 0, 0, F1, F2,
						   F3, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketkeypreflistreq(<<>>, 0, 0,
					     F1, F2, F3, _) ->
    #rpbgetbucketkeypreflistreq{bucket = F1, key = F2,
				type = F3}.

d_field_rpbgetbucketkeypreflistreq_bucket(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketkeypreflistreq_bucket(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3,
					      TrUserData);
d_field_rpbgetbucketkeypreflistreq_bucket(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest2, 0,
						  0, NewFValue, F2, F3,
						  TrUserData).


d_field_rpbgetbucketkeypreflistreq_key(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketkeypreflistreq_key(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
d_field_rpbgetbucketkeypreflistreq_key(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest2, 0,
						  0, F1, NewFValue, F3,
						  TrUserData).


d_field_rpbgetbucketkeypreflistreq_type(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketkeypreflistreq_type(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3,
					    TrUserData);
d_field_rpbgetbucketkeypreflistreq_type(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest2, 0,
						  0, F1, F2, NewFValue,
						  TrUserData).


skip_varint_rpbgetbucketkeypreflistreq(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbgetbucketkeypreflistreq(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
skip_varint_rpbgetbucketkeypreflistreq(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest, Z1,
						  Z2, F1, F2, F3, TrUserData).


skip_length_delimited_rpbgetbucketkeypreflistreq(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketkeypreflistreq(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, TrUserData);
skip_length_delimited_rpbgetbucketkeypreflistreq(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest2, 0,
						  0, F1, F2, F3, TrUserData).


skip_32_rpbgetbucketkeypreflistreq(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest, Z1,
						  Z2, F1, F2, F3, TrUserData).


skip_64_rpbgetbucketkeypreflistreq(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbgetbucketkeypreflistreq(Rest, Z1,
						  Z2, F1, F2, F3, TrUserData).


d_msg_rpbindexresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbindexresp(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbindexresp(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbindexresp_keys(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_rpbindexresp(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbindexresp_results(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
dfp_read_field_def_rpbindexresp(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbindexresp_continuation(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_rpbindexresp(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_rpbindexresp_done(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_rpbindexresp(<<>>, 0, 0, F1, F2, F3,
				F4, TrUserData) ->
    #rpbindexresp{keys = lists_reverse(F1, TrUserData),
		  results = lists_reverse(F2, TrUserData),
		  continuation = F3, done = F4};
dfp_read_field_def_rpbindexresp(Other, Z1, Z2, F1, F2,
				F3, F4, TrUserData) ->
    dg_read_field_def_rpbindexresp(Other, Z1, Z2, F1, F2,
				   F3, F4, TrUserData).

dg_read_field_def_rpbindexresp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbindexresp(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_rpbindexresp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbindexresp_keys(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      18 ->
	  d_field_rpbindexresp_results(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
      26 ->
	  d_field_rpbindexresp_continuation(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      32 ->
	  d_field_rpbindexresp_done(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbindexresp(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    1 ->
		skip_64_rpbindexresp(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
	    2 ->
		skip_length_delimited_rpbindexresp(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    5 ->
		skip_32_rpbindexresp(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData)
	  end
    end;
dg_read_field_def_rpbindexresp(<<>>, 0, 0, F1, F2, F3,
			       F4, TrUserData) ->
    #rpbindexresp{keys = lists_reverse(F1, TrUserData),
		  results = lists_reverse(F2, TrUserData),
		  continuation = F3, done = F4}.

d_field_rpbindexresp_keys(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbindexresp_keys(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_rpbindexresp_keys(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexresp(Rest2, 0, 0,
				    cons(NewFValue, F1, TrUserData), F2, F3, F4,
				    TrUserData).


d_field_rpbindexresp_results(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbindexresp_results(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, TrUserData);
d_field_rpbindexresp_results(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbpair(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbindexresp(Rest2, 0, 0, F1,
				    cons(NewFValue, F2, TrUserData), F3, F4,
				    TrUserData).


d_field_rpbindexresp_continuation(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbindexresp_continuation(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_rpbindexresp_continuation(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexresp(Rest2, 0, 0, F1, F2,
				    NewFValue, F4, TrUserData).


d_field_rpbindexresp_done(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_rpbindexresp_done(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_rpbindexresp_done(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexresp(Rest, 0, 0, F1, F2, F3,
				    NewFValue, TrUserData).


skip_varint_rpbindexresp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_rpbindexresp(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
skip_varint_rpbindexresp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbindexresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_length_delimited_rpbindexresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbindexresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
skip_length_delimited_rpbindexresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbindexresp(Rest2, 0, 0, F1, F2, F3,
				    F4, TrUserData).


skip_32_rpbindexresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbindexresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_64_rpbindexresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_rpbindexresp(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


d_msg_rpbgetserverinforesp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_rpbgetserverinforesp(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetserverinforesp_node(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_rpbgetserverinforesp(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetserverinforesp_server_version(Rest, Z1,
						Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
					F2, _) ->
    #rpbgetserverinforesp{node = F1, server_version = F2};
dfp_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    dg_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					   F1, F2, TrUserData).

dg_read_field_def_rpbgetserverinforesp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetserverinforesp(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbgetserverinforesp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetserverinforesp_node(Rest, 0, 0, F1, F2,
					    TrUserData);
      18 ->
	  d_field_rpbgetserverinforesp_server_version(Rest, 0, 0,
						      F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		skip_64_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		skip_length_delimited_rpbgetserverinforesp(Rest, 0, 0,
							   F1, F2, TrUserData);
	    5 ->
		skip_32_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
dg_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
				       F2, _) ->
    #rpbgetserverinforesp{node = F1, server_version = F2}.

d_field_rpbgetserverinforesp_node(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetserverinforesp_node(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbgetserverinforesp_node(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0,
					    NewFValue, F2, TrUserData).


d_field_rpbgetserverinforesp_server_version(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetserverinforesp_server_version(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
d_field_rpbgetserverinforesp_server_version(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    NewFValue, TrUserData).


skip_varint_rpbgetserverinforesp(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbgetserverinforesp(Rest, Z1, Z2, F1, F2,
				     TrUserData);
skip_varint_rpbgetserverinforesp(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_length_delimited_rpbgetserverinforesp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetserverinforesp(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
skip_length_delimited_rpbgetserverinforesp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    F2, TrUserData).


skip_32_rpbgetserverinforesp(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_64_rpbgetserverinforesp(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


d_msg_rpbcsbucketresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbcsbucketresp(Bin, 0, 0,
				       id([], TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcsbucketresp(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbcsbucketresp_objects(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_rpbcsbucketresp(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbcsbucketresp_continuation(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData);
dfp_read_field_def_rpbcsbucketresp(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbcsbucketresp_done(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rpbcsbucketresp(<<>>, 0, 0, F1, F2,
				   F3, TrUserData) ->
    #rpbcsbucketresp{objects =
			 lists_reverse(F1, TrUserData),
		     continuation = F2, done = F3};
dfp_read_field_def_rpbcsbucketresp(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_rpbcsbucketresp(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_rpbcsbucketresp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcsbucketresp(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpbcsbucketresp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcsbucketresp_objects(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      18 ->
	  d_field_rpbcsbucketresp_continuation(Rest, 0, 0, F1, F2,
					       F3, TrUserData);
      24 ->
	  d_field_rpbcsbucketresp_done(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcsbucketresp(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_rpbcsbucketresp(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_rpbcsbucketresp(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_rpbcsbucketresp(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_rpbcsbucketresp(<<>>, 0, 0, F1, F2,
				  F3, TrUserData) ->
    #rpbcsbucketresp{objects =
			 lists_reverse(F1, TrUserData),
		     continuation = F2, done = F3}.

d_field_rpbcsbucketresp_objects(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketresp_objects(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbcsbucketresp_objects(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbindexobject(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcsbucketresp(Rest2, 0, 0,
				       cons(NewFValue, F1, TrUserData), F2, F3,
				       TrUserData).


d_field_rpbcsbucketresp_continuation(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketresp_continuation(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbcsbucketresp_continuation(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcsbucketresp(Rest2, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_rpbcsbucketresp_done(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbcsbucketresp_done(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rpbcsbucketresp_done(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcsbucketresp(Rest, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_rpbcsbucketresp(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbcsbucketresp(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_rpbcsbucketresp(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbcsbucketresp(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_rpbcsbucketresp(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcsbucketresp(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_rpbcsbucketresp(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcsbucketresp(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_rpbcsbucketresp(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbcsbucketresp(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_rpbcsbucketresp(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbcsbucketresp(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_rpbmapredresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbmapredresp(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbmapredresp(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbmapredresp_phase(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rpbmapredresp(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbmapredresp_response(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rpbmapredresp(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbmapredresp_done(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_rpbmapredresp(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #rpbmapredresp{phase = F1, response = F2, done = F3};
dfp_read_field_def_rpbmapredresp(Other, Z1, Z2, F1, F2,
				 F3, TrUserData) ->
    dg_read_field_def_rpbmapredresp(Other, Z1, Z2, F1, F2,
				    F3, TrUserData).

dg_read_field_def_rpbmapredresp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbmapredresp(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpbmapredresp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbmapredresp_phase(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_rpbmapredresp_response(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      24 ->
	  d_field_rpbmapredresp_done(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbmapredresp(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    1 ->
		skip_64_rpbmapredresp(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    2 ->
		skip_length_delimited_rpbmapredresp(Rest, 0, 0, F1, F2,
						    F3, TrUserData);
	    5 ->
		skip_32_rpbmapredresp(Rest, 0, 0, F1, F2, F3,
				      TrUserData)
	  end
    end;
dg_read_field_def_rpbmapredresp(<<>>, 0, 0, F1, F2, F3,
				_) ->
    #rpbmapredresp{phase = F1, response = F2, done = F3}.

d_field_rpbmapredresp_phase(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbmapredresp_phase(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rpbmapredresp_phase(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbmapredresp(Rest, 0, 0, NewFValue,
				     F2, F3, TrUserData).


d_field_rpbmapredresp_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbmapredresp_response(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbmapredresp_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmapredresp(Rest2, 0, 0, F1,
				     NewFValue, F3, TrUserData).


d_field_rpbmapredresp_done(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbmapredresp_done(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_rpbmapredresp_done(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbmapredresp(Rest, 0, 0, F1, F2,
				     NewFValue, TrUserData).


skip_varint_rpbmapredresp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbmapredresp(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
skip_varint_rpbmapredresp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbmapredresp(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_length_delimited_rpbmapredresp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbmapredresp(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rpbmapredresp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbmapredresp(Rest2, 0, 0, F1, F2,
				     F3, TrUserData).


skip_32_rpbmapredresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_rpbmapredresp(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


skip_64_rpbmapredresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, TrUserData) ->
    dfp_read_field_def_rpbmapredresp(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData).


d_msg_rpbcoveragereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbcoveragereq(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id([], TrUserData), TrUserData).

dfp_read_field_def_rpbcoveragereq(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_rpbcoveragereq_type(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, TrUserData);
dfp_read_field_def_rpbcoveragereq(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_rpbcoveragereq_bucket(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_rpbcoveragereq(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_rpbcoveragereq_min_partitions(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData);
dfp_read_field_def_rpbcoveragereq(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_rpbcoveragereq_replace_cover(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData);
dfp_read_field_def_rpbcoveragereq(<<42, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_rpbcoveragereq_unavailable_cover(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_rpbcoveragereq(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, TrUserData) ->
    #rpbcoveragereq{type = F1, bucket = F2,
		    min_partitions = F3, replace_cover = F4,
		    unavailable_cover = lists_reverse(F5, TrUserData)};
dfp_read_field_def_rpbcoveragereq(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, TrUserData) ->
    dg_read_field_def_rpbcoveragereq(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).

dg_read_field_def_rpbcoveragereq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcoveragereq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
dg_read_field_def_rpbcoveragereq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcoveragereq_type(Rest, 0, 0, F1, F2, F3, F4,
				      F5, TrUserData);
      18 ->
	  d_field_rpbcoveragereq_bucket(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      24 ->
	  d_field_rpbcoveragereq_min_partitions(Rest, 0, 0, F1,
						F2, F3, F4, F5, TrUserData);
      34 ->
	  d_field_rpbcoveragereq_replace_cover(Rest, 0, 0, F1, F2,
					       F3, F4, F5, TrUserData);
      42 ->
	  d_field_rpbcoveragereq_unavailable_cover(Rest, 0, 0, F1,
						   F2, F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcoveragereq(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    1 ->
		skip_64_rpbcoveragereq(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData);
	    2 ->
		skip_length_delimited_rpbcoveragereq(Rest, 0, 0, F1, F2,
						     F3, F4, F5, TrUserData);
	    5 ->
		skip_32_rpbcoveragereq(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData)
	  end
    end;
dg_read_field_def_rpbcoveragereq(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, TrUserData) ->
    #rpbcoveragereq{type = F1, bucket = F2,
		    min_partitions = F3, replace_cover = F4,
		    unavailable_cover = lists_reverse(F5, TrUserData)}.

d_field_rpbcoveragereq_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_rpbcoveragereq_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, TrUserData);
d_field_rpbcoveragereq_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoveragereq(Rest2, 0, 0,
				      NewFValue, F2, F3, F4, F5, TrUserData).


d_field_rpbcoveragereq_bucket(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_rpbcoveragereq_bucket(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_rpbcoveragereq_bucket(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoveragereq(Rest2, 0, 0, F1,
				      NewFValue, F3, F4, F5, TrUserData).


d_field_rpbcoveragereq_min_partitions(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_rpbcoveragereq_min_partitions(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
d_field_rpbcoveragereq_min_partitions(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcoveragereq(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, TrUserData).


d_field_rpbcoveragereq_replace_cover(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_rpbcoveragereq_replace_cover(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
d_field_rpbcoveragereq_replace_cover(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoveragereq(Rest2, 0, 0, F1, F2,
				      F3, NewFValue, F5, TrUserData).


d_field_rpbcoveragereq_unavailable_cover(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_rpbcoveragereq_unavailable_cover(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
d_field_rpbcoveragereq_unavailable_cover(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcoveragereq(Rest2, 0, 0, F1, F2,
				      F3, F4, cons(NewFValue, F5, TrUserData),
				      TrUserData).


skip_varint_rpbcoveragereq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_rpbcoveragereq(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
skip_varint_rpbcoveragereq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_rpbcoveragereq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_length_delimited_rpbcoveragereq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcoveragereq(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
skip_length_delimited_rpbcoveragereq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcoveragereq(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, TrUserData).


skip_32_rpbcoveragereq(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_rpbcoveragereq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_64_rpbcoveragereq(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_rpbcoveragereq(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


d_msg_rpbsetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbsetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_bucket(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_props(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_type(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3};
dfp_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_rpbsetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpbsetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbucketreq_bucket(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      18 ->
	  d_field_rpbsetbucketreq_props(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      26 ->
	  d_field_rpbsetbucketreq_type(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_rpbsetbucketreq(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3}.

d_field_rpbsetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_rpbsetbucketreq_props(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_props(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_props(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1,
				       if F2 == undefined -> NewFValue;
					  true ->
					      merge_msg_rpbbucketprops(F2,
								       NewFValue,
								       TrUserData)
				       end,
				       F3, TrUserData).


d_field_rpbsetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_rpbsetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbsetbucketreq(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_rpbsetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_rpbsetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbsetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_rpbsetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_rpbsetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_rpbsetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_rpbgetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetbucketreq_bucket(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_rpbgetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetbucketreq_type(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1, F2,
				   _) ->
    #rpbgetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_rpbgetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbgetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketreq_bucket(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_rpbgetbucketreq_type(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketreq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_rpbgetbucketreq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketreq(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_rpbgetbucketreq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1, F2,
				  _) ->
    #rpbgetbucketreq{bucket = F1, type = F2}.

d_field_rpbgetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbgetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_rpbgetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpbgetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1,
				       NewFValue, TrUserData).


skip_varint_rpbgetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_rpbgetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_rpbgetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbgetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_rpbgetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_rpbgetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_rpblistkeysresp(Bin, TrUserData) ->
    dfp_read_field_def_rpblistkeysresp(Bin, 0, 0,
				       id([], TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpblistkeysresp(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpblistkeysresp_keys(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpblistkeysresp(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpblistkeysresp_done(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpblistkeysresp(<<>>, 0, 0, F1, F2,
				   TrUserData) ->
    #rpblistkeysresp{keys = lists_reverse(F1, TrUserData),
		     done = F2};
dfp_read_field_def_rpblistkeysresp(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_rpblistkeysresp(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_rpblistkeysresp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpblistkeysresp(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpblistkeysresp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpblistkeysresp_keys(Rest, 0, 0, F1, F2,
				       TrUserData);
      16 ->
	  d_field_rpblistkeysresp_done(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpblistkeysresp(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_rpblistkeysresp(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpblistkeysresp(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_rpblistkeysresp(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpblistkeysresp(<<>>, 0, 0, F1, F2,
				  TrUserData) ->
    #rpblistkeysresp{keys = lists_reverse(F1, TrUserData),
		     done = F2}.

d_field_rpblistkeysresp_keys(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpblistkeysresp_keys(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpblistkeysresp_keys(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblistkeysresp(Rest2, 0, 0,
				       cons(NewFValue, F1, TrUserData), F2,
				       TrUserData).


d_field_rpblistkeysresp_done(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpblistkeysresp_done(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpblistkeysresp_done(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpblistkeysresp(Rest, 0, 0, F1,
				       NewFValue, TrUserData).


skip_varint_rpblistkeysresp(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpblistkeysresp(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_rpblistkeysresp(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistkeysresp(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_rpblistkeysresp(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpblistkeysresp(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpblistkeysresp(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpblistkeysresp(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_rpblistkeysresp(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistkeysresp(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_rpblistkeysresp(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpblistkeysresp(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_rpbindexreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbindexreq(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbindexreq(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_bucket(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_index(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_qtype(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<34, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_key(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<42, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_range_min(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<50, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_range_max(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<56, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_return_terms(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<64, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_stream(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<72, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_max_results(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<82, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_continuation(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<88, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_timeout(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<98, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_type(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<106, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_term_regex(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<112, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_pagination_sort(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16,
					TrUserData);
dfp_read_field_def_rpbindexreq(<<122, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_cover_context(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<128, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_rpbindexreq_return_body(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, TrUserData);
dfp_read_field_def_rpbindexreq(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16, _) ->
    #rpbindexreq{bucket = F1, index = F2, qtype = F3,
		 key = F4, range_min = F5, range_max = F6,
		 return_terms = F7, stream = F8, max_results = F9,
		 continuation = F10, timeout = F11, type = F12,
		 term_regex = F13, pagination_sort = F14,
		 cover_context = F15, return_body = F16};
dfp_read_field_def_rpbindexreq(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			       F14, F15, F16, TrUserData) ->
    dg_read_field_def_rpbindexreq(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData).

dg_read_field_def_rpbindexreq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbindexreq(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
dg_read_field_def_rpbindexreq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbindexreq_bucket(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, TrUserData);
      18 ->
	  d_field_rpbindexreq_index(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, TrUserData);
      24 ->
	  d_field_rpbindexreq_qtype(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, TrUserData);
      34 ->
	  d_field_rpbindexreq_key(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				  F16, TrUserData);
      42 ->
	  d_field_rpbindexreq_range_min(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, TrUserData);
      50 ->
	  d_field_rpbindexreq_range_max(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, TrUserData);
      56 ->
	  d_field_rpbindexreq_return_terms(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, TrUserData);
      64 ->
	  d_field_rpbindexreq_stream(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, TrUserData);
      72 ->
	  d_field_rpbindexreq_max_results(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, TrUserData);
      82 ->
	  d_field_rpbindexreq_continuation(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, TrUserData);
      88 ->
	  d_field_rpbindexreq_timeout(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, TrUserData);
      98 ->
	  d_field_rpbindexreq_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, TrUserData);
      106 ->
	  d_field_rpbindexreq_term_regex(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, TrUserData);
      112 ->
	  d_field_rpbindexreq_pagination_sort(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16,
					      TrUserData);
      122 ->
	  d_field_rpbindexreq_cover_context(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16,
					    TrUserData);
      128 ->
	  d_field_rpbindexreq_return_body(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbindexreq(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, TrUserData);
	    1 ->
		skip_64_rpbindexreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, F14, F15,
				    F16, TrUserData);
	    2 ->
		skip_length_delimited_rpbindexreq(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, TrUserData);
	    5 ->
		skip_32_rpbindexreq(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, F14, F15,
				    F16, TrUserData)
	  end
    end;
dg_read_field_def_rpbindexreq(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			      F15, F16, _) ->
    #rpbindexreq{bucket = F1, index = F2, qtype = F3,
		 key = F4, range_min = F5, range_max = F6,
		 return_terms = F7, stream = F8, max_results = F9,
		 continuation = F10, timeout = F11, type = F12,
		 term_regex = F13, pagination_sort = F14,
		 cover_context = F15, return_body = F16}.

d_field_rpbindexreq_bucket(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_bucket(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData);
d_field_rpbindexreq_bucket(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_index(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_index(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, TrUserData);
d_field_rpbindexreq_index(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				   F11, F12, F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_qtype(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_qtype(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, TrUserData);
d_field_rpbindexreq_qtype(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15, F16, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RpbIndexReq.IndexQueryType'(Tmp),
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_key(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_key(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14, F15, F16, TrUserData);
d_field_rpbindexreq_key(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_range_min(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_range_min(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
d_field_rpbindexreq_range_min(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_range_max(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_range_max(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
d_field_rpbindexreq_range_max(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_return_terms(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_return_terms(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     TrUserData);
d_field_rpbindexreq_return_terms(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_stream(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_stream(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData);
d_field_rpbindexreq_stream(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11,
			   F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, NewFValue, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_max_results(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_max_results(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    TrUserData);
d_field_rpbindexreq_max_results(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, NewFValue, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_continuation(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_continuation(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     TrUserData);
d_field_rpbindexreq_continuation(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				 F11, F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_timeout(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_timeout(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, TrUserData);
d_field_rpbindexreq_timeout(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, _,
			    F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_type(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, TrUserData);
d_field_rpbindexreq_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, _,
			 F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				   F13, F14, F15, F16, TrUserData).


d_field_rpbindexreq_term_regex(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_term_regex(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   TrUserData);
d_field_rpbindexreq_term_regex(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, _, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   NewFValue, F14, F15, F16, TrUserData).


d_field_rpbindexreq_pagination_sort(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16,
				    TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_pagination_sort(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, TrUserData);
d_field_rpbindexreq_pagination_sort(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, _, F15, F16,
				    TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   NewFValue, F15, F16, TrUserData).


d_field_rpbindexreq_cover_context(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_cover_context(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      TrUserData);
d_field_rpbindexreq_cover_context(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, _, F16,
				  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, NewFValue, F16, TrUserData).


d_field_rpbindexreq_return_body(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_rpbindexreq_return_body(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    TrUserData);
d_field_rpbindexreq_return_body(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexreq(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, NewFValue, TrUserData).


skip_varint_rpbindexreq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData) ->
    skip_varint_rpbindexreq(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, TrUserData);
skip_varint_rpbindexreq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData) ->
    dfp_read_field_def_rpbindexreq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_length_delimited_rpbindexreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbindexreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      TrUserData);
skip_length_delimited_rpbindexreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbindexreq(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_32_rpbindexreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		    F15, F16, TrUserData) ->
    dfp_read_field_def_rpbindexreq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_64_rpbindexreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		    F15, F16, TrUserData) ->
    dfp_read_field_def_rpbindexreq(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


d_msg_rpbcountergetreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbcountergetreq(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcountergetreq(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_bucket(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_key(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_r(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<32, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_pr(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<40, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_basic_quorum(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<48, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6,
				    TrUserData) ->
    d_field_rpbcountergetreq_notfound_ok(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_rpbcountergetreq(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, _) ->
    #rpbcountergetreq{bucket = F1, key = F2, r = F3,
		      pr = F4, basic_quorum = F5, notfound_ok = F6};
dfp_read_field_def_rpbcountergetreq(Other, Z1, Z2, F1,
				    F2, F3, F4, F5, F6, TrUserData) ->
    dg_read_field_def_rpbcountergetreq(Other, Z1, Z2, F1,
				       F2, F3, F4, F5, F6, TrUserData).

dg_read_field_def_rpbcountergetreq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcountergetreq(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       TrUserData);
dg_read_field_def_rpbcountergetreq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcountergetreq_bucket(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, TrUserData);
      18 ->
	  d_field_rpbcountergetreq_key(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, TrUserData);
      24 ->
	  d_field_rpbcountergetreq_r(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, TrUserData);
      32 ->
	  d_field_rpbcountergetreq_pr(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, TrUserData);
      40 ->
	  d_field_rpbcountergetreq_basic_quorum(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, TrUserData);
      48 ->
	  d_field_rpbcountergetreq_notfound_ok(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcountergetreq(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, TrUserData);
	    1 ->
		skip_64_rpbcountergetreq(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, TrUserData);
	    2 ->
		skip_length_delimited_rpbcountergetreq(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6,
						       TrUserData);
	    5 ->
		skip_32_rpbcountergetreq(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, TrUserData)
	  end
    end;
dg_read_field_def_rpbcountergetreq(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, _) ->
    #rpbcountergetreq{bucket = F1, key = F2, r = F3,
		      pr = F4, basic_quorum = F5, notfound_ok = F6}.

d_field_rpbcountergetreq_bucket(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_bucket(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				    TrUserData);
d_field_rpbcountergetreq_bucket(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcountergetreq(Rest2, 0, 0,
					NewFValue, F2, F3, F4, F5, F6,
					TrUserData).


d_field_rpbcountergetreq_key(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_key(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
d_field_rpbcountergetreq_key(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcountergetreq(Rest2, 0, 0, F1,
					NewFValue, F3, F4, F5, F6, TrUserData).


d_field_rpbcountergetreq_r(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_r(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, TrUserData);
d_field_rpbcountergetreq_r(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcountergetreq(Rest, 0, 0, F1, F2,
					NewFValue, F4, F5, F6, TrUserData).


d_field_rpbcountergetreq_pr(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_pr(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
d_field_rpbcountergetreq_pr(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbcountergetreq(Rest, 0, 0, F1, F2,
					F3, NewFValue, F5, F6, TrUserData).


d_field_rpbcountergetreq_basic_quorum(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_basic_quorum(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData);
d_field_rpbcountergetreq_basic_quorum(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, _, F6,
				      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcountergetreq(Rest, 0, 0, F1, F2,
					F3, F4, NewFValue, F6, TrUserData).


d_field_rpbcountergetreq_notfound_ok(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetreq_notfound_ok(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 TrUserData);
d_field_rpbcountergetreq_notfound_ok(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, _,
				     TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbcountergetreq(Rest, 0, 0, F1, F2,
					F3, F4, F5, NewFValue, TrUserData).


skip_varint_rpbcountergetreq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_rpbcountergetreq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
skip_varint_rpbcountergetreq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rpbcountergetreq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, TrUserData).


skip_length_delimited_rpbcountergetreq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcountergetreq(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, TrUserData);
skip_length_delimited_rpbcountergetreq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcountergetreq(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, TrUserData).


skip_32_rpbcountergetreq(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rpbcountergetreq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, TrUserData).


skip_64_rpbcountergetreq(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_rpbcountergetreq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, TrUserData).


d_msg_rpblistkeysreq(Bin, TrUserData) ->
    dfp_read_field_def_rpblistkeysreq(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpblistkeysreq(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistkeysreq_bucket(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_rpblistkeysreq(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistkeysreq_timeout(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rpblistkeysreq(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpblistkeysreq_type(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_rpblistkeysreq(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #rpblistkeysreq{bucket = F1, timeout = F2, type = F3};
dfp_read_field_def_rpblistkeysreq(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_rpblistkeysreq(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_rpblistkeysreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpblistkeysreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpblistkeysreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpblistkeysreq_bucket(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      16 ->
	  d_field_rpblistkeysreq_timeout(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      26 ->
	  d_field_rpblistkeysreq_type(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpblistkeysreq(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_rpblistkeysreq(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_rpblistkeysreq(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    5 ->
		skip_32_rpblistkeysreq(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_rpblistkeysreq(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #rpblistkeysreq{bucket = F1, timeout = F2, type = F3}.

d_field_rpblistkeysreq_bucket(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistkeysreq_bucket(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpblistkeysreq_bucket(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblistkeysreq(Rest2, 0, 0,
				      NewFValue, F2, F3, TrUserData).


d_field_rpblistkeysreq_timeout(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistkeysreq_timeout(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpblistkeysreq_timeout(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpblistkeysreq(Rest, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_rpblistkeysreq_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpblistkeysreq_type(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_rpblistkeysreq_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpblistkeysreq(Rest2, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_rpblistkeysreq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpblistkeysreq(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_rpblistkeysreq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistkeysreq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_rpblistkeysreq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpblistkeysreq(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_rpblistkeysreq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpblistkeysreq(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_32_rpblistkeysreq(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistkeysreq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_rpblistkeysreq(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpblistkeysreq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_rpbauthreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbauthreq(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_rpbauthreq_user(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_rpbauthreq(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_rpbauthreq_password(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2, _) ->
    #rpbauthreq{user = F1, password = F2};
dfp_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_rpbauthreq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbauthreq(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_rpbauthreq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbauthreq_user(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_rpbauthreq_password(Rest, 0, 0, F1, F2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbauthreq(Rest, 0, 0, F1, F2,
						 TrUserData);
	    5 -> skip_32_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2, _) ->
    #rpbauthreq{user = F1, password = F2}.

d_field_rpbauthreq_user(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbauthreq_user(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_rpbauthreq_user(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, NewFValue,
				  F2, TrUserData).


d_field_rpbauthreq_password(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbauthreq_password(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_rpbauthreq_password(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1,
				  NewFValue, TrUserData).


skip_varint_rpbauthreq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_rpbauthreq(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_rpbauthreq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_rpbauthreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbauthreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbauthreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_32_rpbauthreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_rpbauthreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_rpbmapredreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbmapredreq(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbmapredreq(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpbmapredreq_request(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpbmapredreq(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpbmapredreq_content_type(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_rpbmapredreq(<<>>, 0, 0, F1, F2,
				_) ->
    #rpbmapredreq{request = F1, content_type = F2};
dfp_read_field_def_rpbmapredreq(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_rpbmapredreq(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_rpbmapredreq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbmapredreq(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbmapredreq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbmapredreq_request(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_rpbmapredreq_content_type(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbmapredreq(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_rpbmapredreq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbmapredreq(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_rpbmapredreq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbmapredreq(<<>>, 0, 0, F1, F2, _) ->
    #rpbmapredreq{request = F1, content_type = F2}.

d_field_rpbmapredreq_request(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmapredreq_request(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpbmapredreq_request(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmapredreq(Rest2, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_rpbmapredreq_content_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmapredreq_content_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbmapredreq_content_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmapredreq(Rest2, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_rpbmapredreq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_rpbmapredreq(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_rpbmapredreq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbmapredreq(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_rpbmapredreq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbmapredreq(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbmapredreq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbmapredreq(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_rpbmapredreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpbmapredreq(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_rpbmapredreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpbmapredreq(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_rpbcounterupdateresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbcounterupdateresp(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_rpbcounterupdateresp(<<8,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_rpbcounterupdateresp_value(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_rpbcounterupdateresp(<<>>, 0, 0, F1,
					_) ->
    #rpbcounterupdateresp{value = F1};
dfp_read_field_def_rpbcounterupdateresp(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_rpbcounterupdateresp(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_rpbcounterupdateresp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcounterupdateresp(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbcounterupdateresp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbcounterupdateresp_value(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcounterupdateresp(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_rpbcounterupdateresp(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_rpbcounterupdateresp(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_rpbcounterupdateresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbcounterupdateresp(<<>>, 0, 0, F1,
				       _) ->
    #rpbcounterupdateresp{value = F1}.

d_field_rpbcounterupdateresp_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbcounterupdateresp_value(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_rpbcounterupdateresp_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rpbcounterupdateresp(Rest, 0, 0,
					    NewFValue, TrUserData).


skip_varint_rpbcounterupdateresp(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbcounterupdateresp(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_rpbcounterupdateresp(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbcounterupdateresp(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_rpbcounterupdateresp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcounterupdateresp(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbcounterupdateresp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcounterupdateresp(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_rpbcounterupdateresp(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbcounterupdateresp(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_rpbcounterupdateresp(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbcounterupdateresp(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_rpbgetbucketresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetbucketresp(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetbucketresp_props(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1,
				    _) ->
    #rpbgetbucketresp{props = F1};
dfp_read_field_def_rpbgetbucketresp(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_rpbgetbucketresp(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_rpbgetbucketresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketresp(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbgetbucketresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketresp_props(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketresp(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_rpbgetbucketresp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketresp(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_rpbgetbucketresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1, _) ->
    #rpbgetbucketresp{props = F1}.

d_field_rpbgetbucketresp_props(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketresp_props(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_rpbgetbucketresp_props(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_rpbbucketprops(F1,
									NewFValue,
									TrUserData)
					end,
					TrUserData).


skip_varint_rpbgetbucketresp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetbucketresp(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_rpbgetbucketresp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_rpbgetbucketresp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketresp(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbgetbucketresp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0, F1,
					TrUserData).


skip_32_rpbgetbucketresp(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_rpbgetbucketresp(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_rpbcountergetresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbcountergetresp(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcountergetresp(<<8, Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_rpbcountergetresp_value(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_rpbcountergetresp(<<>>, 0, 0, F1,
				     _) ->
    #rpbcountergetresp{value = F1};
dfp_read_field_def_rpbcountergetresp(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_rpbcountergetresp(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_rpbcountergetresp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcountergetresp(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbcountergetresp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbcountergetresp_value(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcountergetresp(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_rpbcountergetresp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbcountergetresp(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_rpbcountergetresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbcountergetresp(<<>>, 0, 0, F1,
				    _) ->
    #rpbcountergetresp{value = F1}.

d_field_rpbcountergetresp_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbcountergetresp_value(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_rpbcountergetresp_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    dfp_read_field_def_rpbcountergetresp(Rest, 0, 0,
					 NewFValue, TrUserData).


skip_varint_rpbcountergetresp(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbcountergetresp(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_rpbcountergetresp(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbcountergetresp(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_rpbcountergetresp(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcountergetresp(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbcountergetresp(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcountergetresp(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_rpbcountergetresp(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_rpbcountergetresp(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_rpbcountergetresp(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_rpbcountergetresp(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_rpbindexbodyresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbindexbodyresp(Bin, 0, 0,
					id([], TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbindexbodyresp(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbindexbodyresp_objects(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_rpbindexbodyresp(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbindexbodyresp_continuation(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_rpbindexbodyresp(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbindexbodyresp_done(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_rpbindexbodyresp(<<>>, 0, 0, F1, F2,
				    F3, TrUserData) ->
    #rpbindexbodyresp{objects =
			  lists_reverse(F1, TrUserData),
		      continuation = F2, done = F3};
dfp_read_field_def_rpbindexbodyresp(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_rpbindexbodyresp(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_rpbindexbodyresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbindexbodyresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpbindexbodyresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbindexbodyresp_objects(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      18 ->
	  d_field_rpbindexbodyresp_continuation(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      24 ->
	  d_field_rpbindexbodyresp_done(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbindexbodyresp(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_rpbindexbodyresp(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_rpbindexbodyresp(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    5 ->
		skip_32_rpbindexbodyresp(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_rpbindexbodyresp(<<>>, 0, 0, F1, F2,
				   F3, TrUserData) ->
    #rpbindexbodyresp{objects =
			  lists_reverse(F1, TrUserData),
		      continuation = F2, done = F3}.

d_field_rpbindexbodyresp_objects(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbindexbodyresp_objects(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbindexbodyresp_objects(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbindexobject(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbindexbodyresp(Rest2, 0, 0,
					cons(NewFValue, F1, TrUserData), F2, F3,
					TrUserData).


d_field_rpbindexbodyresp_continuation(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbindexbodyresp_continuation(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_rpbindexbodyresp_continuation(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbindexbodyresp(Rest2, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_rpbindexbodyresp_done(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbindexbodyresp_done(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbindexbodyresp_done(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbindexbodyresp(Rest, 0, 0, F1, F2,
					NewFValue, TrUserData).


skip_varint_rpbindexbodyresp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbindexbodyresp(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_rpbindexbodyresp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbindexbodyresp(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_rpbindexbodyresp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbindexbodyresp(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_rpbindexbodyresp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbindexbodyresp(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_32_rpbindexbodyresp(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbindexbodyresp(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_rpbindexbodyresp(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbindexbodyresp(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_rpbcoverageresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbcoverageresp(Bin, 0, 0,
				       id([], TrUserData), TrUserData).

dfp_read_field_def_rpbcoverageresp(<<10, Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    d_field_rpbcoverageresp_entries(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_rpbcoverageresp(<<>>, 0, 0, F1,
				   TrUserData) ->
    #rpbcoverageresp{entries =
			 lists_reverse(F1, TrUserData)};
dfp_read_field_def_rpbcoverageresp(Other, Z1, Z2, F1,
				   TrUserData) ->
    dg_read_field_def_rpbcoverageresp(Other, Z1, Z2, F1,
				      TrUserData).

dg_read_field_def_rpbcoverageresp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcoverageresp(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbcoverageresp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcoverageresp_entries(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcoverageresp(Rest, 0, 0, F1, TrUserData);
	    1 ->
		skip_64_rpbcoverageresp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbcoverageresp(Rest, 0, 0, F1,
						      TrUserData);
	    5 -> skip_32_rpbcoverageresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbcoverageresp(<<>>, 0, 0, F1,
				  TrUserData) ->
    #rpbcoverageresp{entries =
			 lists_reverse(F1, TrUserData)}.

d_field_rpbcoverageresp_entries(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbcoverageresp_entries(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_rpbcoverageresp_entries(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcoverageentry(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcoverageresp(Rest2, 0, 0,
				       cons(NewFValue, F1, TrUserData),
				       TrUserData).


skip_varint_rpbcoverageresp(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbcoverageresp(Rest, Z1, Z2, F1,
				TrUserData);
skip_varint_rpbcoverageresp(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbcoverageresp(Rest, Z1, Z2, F1,
				       TrUserData).


skip_length_delimited_rpbcoverageresp(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcoverageresp(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbcoverageresp(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcoverageresp(Rest2, 0, 0, F1,
				       TrUserData).


skip_32_rpbcoverageresp(<<_:32, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_rpbcoverageresp(Rest, Z1, Z2, F1,
				       TrUserData).


skip_64_rpbcoverageresp(<<_:64, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_rpbcoverageresp(Rest, Z1, Z2, F1,
				       TrUserData).


d_msg_rpberrorresp(Bin, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpberrorresp(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpberrorresp_errmsg(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_rpberrorresp(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpberrorresp_errcode(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2,
				_) ->
    #rpberrorresp{errmsg = F1, errcode = F2};
dfp_read_field_def_rpberrorresp(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_rpberrorresp(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_rpberrorresp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpberrorresp(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpberrorresp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpberrorresp_errmsg(Rest, 0, 0, F1, F2,
				      TrUserData);
      16 ->
	  d_field_rpberrorresp_errcode(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpberrorresp(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_rpberrorresp(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpberrorresp(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_rpberrorresp(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2, _) ->
    #rpberrorresp{errmsg = F1, errcode = F2}.

d_field_rpberrorresp_errmsg(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpberrorresp_errmsg(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_rpberrorresp_errmsg(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_rpberrorresp_errcode(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpberrorresp_errcode(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpberrorresp_errcode(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpberrorresp(Rest, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_rpberrorresp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_rpberrorresp(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_rpberrorresp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_rpberrorresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpberrorresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpberrorresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_rpberrorresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_rpberrorresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).




'd_enum_RpbIndexReq.IndexQueryType'(0) -> eq;
'd_enum_RpbIndexReq.IndexQueryType'(1) -> range;
'd_enum_RpbIndexReq.IndexQueryType'(V) -> V.

'd_enum_RpbBucketProps.RpbReplMode'(0) -> 'FALSE';
'd_enum_RpbBucketProps.RpbReplMode'(1) -> 'REALTIME';
'd_enum_RpbBucketProps.RpbReplMode'(2) -> 'FULLSYNC';
'd_enum_RpbBucketProps.RpbReplMode'(3) -> 'TRUE';
'd_enum_RpbBucketProps.RpbReplMode'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #rpblink{} -> merge_msg_rpblink(Prev, New, TrUserData);
      #rpbpair{} -> merge_msg_rpbpair(Prev, New, TrUserData);
      #rpbcontent{} ->
	  merge_msg_rpbcontent(Prev, New, TrUserData);
      #rpbgetresp{} ->
	  merge_msg_rpbgetresp(Prev, New, TrUserData);
      #rpbindexobject{} ->
	  merge_msg_rpbindexobject(Prev, New, TrUserData);
      #rpbmodfun{} ->
	  merge_msg_rpbmodfun(Prev, New, TrUserData);
      #rpbcommithook{} ->
	  merge_msg_rpbcommithook(Prev, New, TrUserData);
      #rpbbucketprops{} ->
	  merge_msg_rpbbucketprops(Prev, New, TrUserData);
      #rpbresetbucketreq{} ->
	  merge_msg_rpbresetbucketreq(Prev, New, TrUserData);
      #rpbcsbucketreq{} ->
	  merge_msg_rpbcsbucketreq(Prev, New, TrUserData);
      #rpbsetclientidreq{} ->
	  merge_msg_rpbsetclientidreq(Prev, New, TrUserData);
      #rpbcounterupdatereq{} ->
	  merge_msg_rpbcounterupdatereq(Prev, New, TrUserData);
      #rpblistbucketsreq{} ->
	  merge_msg_rpblistbucketsreq(Prev, New, TrUserData);
      #rpbbucketkeypreflistitem{} ->
	  merge_msg_rpbbucketkeypreflistitem(Prev, New,
					     TrUserData);
      #rpbgetbucketkeypreflistresp{} ->
	  merge_msg_rpbgetbucketkeypreflistresp(Prev, New,
						TrUserData);
      #rpblistbucketsresp{} ->
	  merge_msg_rpblistbucketsresp(Prev, New, TrUserData);
      #rpbputresp{} ->
	  merge_msg_rpbputresp(Prev, New, TrUserData);
      #rpbgetclientidresp{} ->
	  merge_msg_rpbgetclientidresp(Prev, New, TrUserData);
      #rpbcoverageentry{} ->
	  merge_msg_rpbcoverageentry(Prev, New, TrUserData);
      #rpbsetbuckettypereq{} ->
	  merge_msg_rpbsetbuckettypereq(Prev, New, TrUserData);
      #rpbgetbuckettypereq{} ->
	  merge_msg_rpbgetbuckettypereq(Prev, New, TrUserData);
      #rpbdelreq{} ->
	  merge_msg_rpbdelreq(Prev, New, TrUserData);
      #rpbputreq{} ->
	  merge_msg_rpbputreq(Prev, New, TrUserData);
      #rpbgetreq{} ->
	  merge_msg_rpbgetreq(Prev, New, TrUserData);
      #rpbgetbucketkeypreflistreq{} ->
	  merge_msg_rpbgetbucketkeypreflistreq(Prev, New,
					       TrUserData);
      #rpbindexresp{} ->
	  merge_msg_rpbindexresp(Prev, New, TrUserData);
      #rpbgetserverinforesp{} ->
	  merge_msg_rpbgetserverinforesp(Prev, New, TrUserData);
      #rpbcsbucketresp{} ->
	  merge_msg_rpbcsbucketresp(Prev, New, TrUserData);
      #rpbmapredresp{} ->
	  merge_msg_rpbmapredresp(Prev, New, TrUserData);
      #rpbcoveragereq{} ->
	  merge_msg_rpbcoveragereq(Prev, New, TrUserData);
      #rpbsetbucketreq{} ->
	  merge_msg_rpbsetbucketreq(Prev, New, TrUserData);
      #rpbgetbucketreq{} ->
	  merge_msg_rpbgetbucketreq(Prev, New, TrUserData);
      #rpblistkeysresp{} ->
	  merge_msg_rpblistkeysresp(Prev, New, TrUserData);
      #rpbindexreq{} ->
	  merge_msg_rpbindexreq(Prev, New, TrUserData);
      #rpbcountergetreq{} ->
	  merge_msg_rpbcountergetreq(Prev, New, TrUserData);
      #rpblistkeysreq{} ->
	  merge_msg_rpblistkeysreq(Prev, New, TrUserData);
      #rpbauthreq{} ->
	  merge_msg_rpbauthreq(Prev, New, TrUserData);
      #rpbmapredreq{} ->
	  merge_msg_rpbmapredreq(Prev, New, TrUserData);
      #rpbcounterupdateresp{} ->
	  merge_msg_rpbcounterupdateresp(Prev, New, TrUserData);
      #rpbgetbucketresp{} ->
	  merge_msg_rpbgetbucketresp(Prev, New, TrUserData);
      #rpbcountergetresp{} ->
	  merge_msg_rpbcountergetresp(Prev, New, TrUserData);
      #rpbindexbodyresp{} ->
	  merge_msg_rpbindexbodyresp(Prev, New, TrUserData);
      #rpbcoverageresp{} ->
	  merge_msg_rpbcoverageresp(Prev, New, TrUserData);
      #rpberrorresp{} ->
	  merge_msg_rpberrorresp(Prev, New, TrUserData)
    end.

merge_msg_rpblink(#rpblink{bucket = PFbucket,
			   key = PFkey, tag = PFtag},
		  #rpblink{bucket = NFbucket, key = NFkey, tag = NFtag},
		  _) ->
    #rpblink{bucket =
		 if NFbucket =:= undefined -> PFbucket;
		    true -> NFbucket
		 end,
	     key =
		 if NFkey =:= undefined -> PFkey;
		    true -> NFkey
		 end,
	     tag =
		 if NFtag =:= undefined -> PFtag;
		    true -> NFtag
		 end}.

merge_msg_rpbpair(#rpbpair{value = PFvalue},
		  #rpbpair{key = NFkey, value = NFvalue}, _) ->
    #rpbpair{key = NFkey,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end}.

merge_msg_rpbcontent(#rpbcontent{content_type =
				     PFcontent_type,
				 charset = PFcharset,
				 content_encoding = PFcontent_encoding,
				 vtag = PFvtag, links = PFlinks,
				 last_mod = PFlast_mod,
				 last_mod_usecs = PFlast_mod_usecs,
				 usermeta = PFusermeta, indexes = PFindexes,
				 deleted = PFdeleted, ttl = PFttl},
		     #rpbcontent{value = NFvalue,
				 content_type = NFcontent_type,
				 charset = NFcharset,
				 content_encoding = NFcontent_encoding,
				 vtag = NFvtag, links = NFlinks,
				 last_mod = NFlast_mod,
				 last_mod_usecs = NFlast_mod_usecs,
				 usermeta = NFusermeta, indexes = NFindexes,
				 deleted = NFdeleted, ttl = NFttl},
		     TrUserData) ->
    #rpbcontent{value = NFvalue,
		content_type =
		    if NFcontent_type =:= undefined -> PFcontent_type;
		       true -> NFcontent_type
		    end,
		charset =
		    if NFcharset =:= undefined -> PFcharset;
		       true -> NFcharset
		    end,
		content_encoding =
		    if NFcontent_encoding =:= undefined ->
			   PFcontent_encoding;
		       true -> NFcontent_encoding
		    end,
		vtag =
		    if NFvtag =:= undefined -> PFvtag;
		       true -> NFvtag
		    end,
		links = 'erlang_++'(PFlinks, NFlinks, TrUserData),
		last_mod =
		    if NFlast_mod =:= undefined -> PFlast_mod;
		       true -> NFlast_mod
		    end,
		last_mod_usecs =
		    if NFlast_mod_usecs =:= undefined -> PFlast_mod_usecs;
		       true -> NFlast_mod_usecs
		    end,
		usermeta =
		    'erlang_++'(PFusermeta, NFusermeta, TrUserData),
		indexes = 'erlang_++'(PFindexes, NFindexes, TrUserData),
		deleted =
		    if NFdeleted =:= undefined -> PFdeleted;
		       true -> NFdeleted
		    end,
		ttl =
		    if NFttl =:= undefined -> PFttl;
		       true -> NFttl
		    end}.

merge_msg_rpbgetresp(#rpbgetresp{content = PFcontent,
				 vclock = PFvclock, unchanged = PFunchanged},
		     #rpbgetresp{content = NFcontent, vclock = NFvclock,
				 unchanged = NFunchanged},
		     TrUserData) ->
    #rpbgetresp{content =
		    'erlang_++'(PFcontent, NFcontent, TrUserData),
		vclock =
		    if NFvclock =:= undefined -> PFvclock;
		       true -> NFvclock
		    end,
		unchanged =
		    if NFunchanged =:= undefined -> PFunchanged;
		       true -> NFunchanged
		    end}.

merge_msg_rpbindexobject(#rpbindexobject{object =
					     PFobject},
			 #rpbindexobject{key = NFkey, object = NFobject},
			 TrUserData) ->
    #rpbindexobject{key = NFkey,
		    object =
			if PFobject /= undefined, NFobject /= undefined ->
			       merge_msg_rpbgetresp(PFobject, NFobject,
						    TrUserData);
			   PFobject == undefined -> NFobject;
			   NFobject == undefined -> PFobject
			end}.

merge_msg_rpbmodfun(#rpbmodfun{},
		    #rpbmodfun{module = NFmodule, function = NFfunction},
		    _) ->
    #rpbmodfun{module = NFmodule, function = NFfunction}.

merge_msg_rpbcommithook(#rpbcommithook{modfun =
					   PFmodfun,
				       name = PFname},
			#rpbcommithook{modfun = NFmodfun, name = NFname},
			TrUserData) ->
    #rpbcommithook{modfun =
		       if PFmodfun /= undefined, NFmodfun /= undefined ->
			      merge_msg_rpbmodfun(PFmodfun, NFmodfun,
						  TrUserData);
			  PFmodfun == undefined -> NFmodfun;
			  NFmodfun == undefined -> PFmodfun
		       end,
		   name =
		       if NFname =:= undefined -> PFname;
			  true -> NFname
		       end}.

merge_msg_rpbbucketprops(#rpbbucketprops{n_val =
					     PFn_val,
					 allow_mult = PFallow_mult,
					 last_write_wins = PFlast_write_wins,
					 precommit = PFprecommit,
					 has_precommit = PFhas_precommit,
					 postcommit = PFpostcommit,
					 has_postcommit = PFhas_postcommit,
					 chash_keyfun = PFchash_keyfun,
					 linkfun = PFlinkfun,
					 old_vclock = PFold_vclock,
					 young_vclock = PFyoung_vclock,
					 big_vclock = PFbig_vclock,
					 small_vclock = PFsmall_vclock,
					 pr = PFpr, r = PFr, w = PFw, pw = PFpw,
					 dw = PFdw, rw = PFrw,
					 basic_quorum = PFbasic_quorum,
					 notfound_ok = PFnotfound_ok,
					 backend = PFbackend, search = PFsearch,
					 repl = PFrepl,
					 search_index = PFsearch_index,
					 datatype = PFdatatype,
					 consistent = PFconsistent,
					 write_once = PFwrite_once,
					 hll_precision = PFhll_precision,
					 ttl = PFttl},
			 #rpbbucketprops{n_val = NFn_val,
					 allow_mult = NFallow_mult,
					 last_write_wins = NFlast_write_wins,
					 precommit = NFprecommit,
					 has_precommit = NFhas_precommit,
					 postcommit = NFpostcommit,
					 has_postcommit = NFhas_postcommit,
					 chash_keyfun = NFchash_keyfun,
					 linkfun = NFlinkfun,
					 old_vclock = NFold_vclock,
					 young_vclock = NFyoung_vclock,
					 big_vclock = NFbig_vclock,
					 small_vclock = NFsmall_vclock,
					 pr = NFpr, r = NFr, w = NFw, pw = NFpw,
					 dw = NFdw, rw = NFrw,
					 basic_quorum = NFbasic_quorum,
					 notfound_ok = NFnotfound_ok,
					 backend = NFbackend, search = NFsearch,
					 repl = NFrepl,
					 search_index = NFsearch_index,
					 datatype = NFdatatype,
					 consistent = NFconsistent,
					 write_once = NFwrite_once,
					 hll_precision = NFhll_precision,
					 ttl = NFttl},
			 TrUserData) ->
    #rpbbucketprops{n_val =
			if NFn_val =:= undefined -> PFn_val;
			   true -> NFn_val
			end,
		    allow_mult =
			if NFallow_mult =:= undefined -> PFallow_mult;
			   true -> NFallow_mult
			end,
		    last_write_wins =
			if NFlast_write_wins =:= undefined -> PFlast_write_wins;
			   true -> NFlast_write_wins
			end,
		    precommit =
			'erlang_++'(PFprecommit, NFprecommit, TrUserData),
		    has_precommit =
			if NFhas_precommit =:= undefined -> PFhas_precommit;
			   true -> NFhas_precommit
			end,
		    postcommit =
			'erlang_++'(PFpostcommit, NFpostcommit, TrUserData),
		    has_postcommit =
			if NFhas_postcommit =:= undefined -> PFhas_postcommit;
			   true -> NFhas_postcommit
			end,
		    chash_keyfun =
			if PFchash_keyfun /= undefined,
			   NFchash_keyfun /= undefined ->
			       merge_msg_rpbmodfun(PFchash_keyfun,
						   NFchash_keyfun, TrUserData);
			   PFchash_keyfun == undefined -> NFchash_keyfun;
			   NFchash_keyfun == undefined -> PFchash_keyfun
			end,
		    linkfun =
			if PFlinkfun /= undefined, NFlinkfun /= undefined ->
			       merge_msg_rpbmodfun(PFlinkfun, NFlinkfun,
						   TrUserData);
			   PFlinkfun == undefined -> NFlinkfun;
			   NFlinkfun == undefined -> PFlinkfun
			end,
		    old_vclock =
			if NFold_vclock =:= undefined -> PFold_vclock;
			   true -> NFold_vclock
			end,
		    young_vclock =
			if NFyoung_vclock =:= undefined -> PFyoung_vclock;
			   true -> NFyoung_vclock
			end,
		    big_vclock =
			if NFbig_vclock =:= undefined -> PFbig_vclock;
			   true -> NFbig_vclock
			end,
		    small_vclock =
			if NFsmall_vclock =:= undefined -> PFsmall_vclock;
			   true -> NFsmall_vclock
			end,
		    pr =
			if NFpr =:= undefined -> PFpr;
			   true -> NFpr
			end,
		    r =
			if NFr =:= undefined -> PFr;
			   true -> NFr
			end,
		    w =
			if NFw =:= undefined -> PFw;
			   true -> NFw
			end,
		    pw =
			if NFpw =:= undefined -> PFpw;
			   true -> NFpw
			end,
		    dw =
			if NFdw =:= undefined -> PFdw;
			   true -> NFdw
			end,
		    rw =
			if NFrw =:= undefined -> PFrw;
			   true -> NFrw
			end,
		    basic_quorum =
			if NFbasic_quorum =:= undefined -> PFbasic_quorum;
			   true -> NFbasic_quorum
			end,
		    notfound_ok =
			if NFnotfound_ok =:= undefined -> PFnotfound_ok;
			   true -> NFnotfound_ok
			end,
		    backend =
			if NFbackend =:= undefined -> PFbackend;
			   true -> NFbackend
			end,
		    search =
			if NFsearch =:= undefined -> PFsearch;
			   true -> NFsearch
			end,
		    repl =
			if NFrepl =:= undefined -> PFrepl;
			   true -> NFrepl
			end,
		    search_index =
			if NFsearch_index =:= undefined -> PFsearch_index;
			   true -> NFsearch_index
			end,
		    datatype =
			if NFdatatype =:= undefined -> PFdatatype;
			   true -> NFdatatype
			end,
		    consistent =
			if NFconsistent =:= undefined -> PFconsistent;
			   true -> NFconsistent
			end,
		    write_once =
			if NFwrite_once =:= undefined -> PFwrite_once;
			   true -> NFwrite_once
			end,
		    hll_precision =
			if NFhll_precision =:= undefined -> PFhll_precision;
			   true -> NFhll_precision
			end,
		    ttl =
			if NFttl =:= undefined -> PFttl;
			   true -> NFttl
			end}.

merge_msg_rpbresetbucketreq(#rpbresetbucketreq{type =
						   PFtype},
			    #rpbresetbucketreq{bucket = NFbucket,
					       type = NFtype},
			    _) ->
    #rpbresetbucketreq{bucket = NFbucket,
		       type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end}.

merge_msg_rpbcsbucketreq(#rpbcsbucketreq{end_key =
					     PFend_key,
					 start_incl = PFstart_incl,
					 end_incl = PFend_incl,
					 continuation = PFcontinuation,
					 max_results = PFmax_results,
					 timeout = PFtimeout, type = PFtype,
					 cover_context = PFcover_context},
			 #rpbcsbucketreq{bucket = NFbucket,
					 start_key = NFstart_key,
					 end_key = NFend_key,
					 start_incl = NFstart_incl,
					 end_incl = NFend_incl,
					 continuation = NFcontinuation,
					 max_results = NFmax_results,
					 timeout = NFtimeout, type = NFtype,
					 cover_context = NFcover_context},
			 _) ->
    #rpbcsbucketreq{bucket = NFbucket,
		    start_key = NFstart_key,
		    end_key =
			if NFend_key =:= undefined -> PFend_key;
			   true -> NFend_key
			end,
		    start_incl =
			if NFstart_incl =:= undefined -> PFstart_incl;
			   true -> NFstart_incl
			end,
		    end_incl =
			if NFend_incl =:= undefined -> PFend_incl;
			   true -> NFend_incl
			end,
		    continuation =
			if NFcontinuation =:= undefined -> PFcontinuation;
			   true -> NFcontinuation
			end,
		    max_results =
			if NFmax_results =:= undefined -> PFmax_results;
			   true -> NFmax_results
			end,
		    timeout =
			if NFtimeout =:= undefined -> PFtimeout;
			   true -> NFtimeout
			end,
		    type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end,
		    cover_context =
			if NFcover_context =:= undefined -> PFcover_context;
			   true -> NFcover_context
			end}.

merge_msg_rpbsetclientidreq(#rpbsetclientidreq{},
			    #rpbsetclientidreq{client_id = NFclient_id}, _) ->
    #rpbsetclientidreq{client_id = NFclient_id}.

merge_msg_rpbcounterupdatereq(#rpbcounterupdatereq{w =
						       PFw,
						   dw = PFdw, pw = PFpw,
						   returnvalue = PFreturnvalue},
			      #rpbcounterupdatereq{bucket = NFbucket,
						   key = NFkey,
						   amount = NFamount, w = NFw,
						   dw = NFdw, pw = NFpw,
						   returnvalue = NFreturnvalue},
			      _) ->
    #rpbcounterupdatereq{bucket = NFbucket, key = NFkey,
			 amount = NFamount,
			 w =
			     if NFw =:= undefined -> PFw;
				true -> NFw
			     end,
			 dw =
			     if NFdw =:= undefined -> PFdw;
				true -> NFdw
			     end,
			 pw =
			     if NFpw =:= undefined -> PFpw;
				true -> NFpw
			     end,
			 returnvalue =
			     if NFreturnvalue =:= undefined -> PFreturnvalue;
				true -> NFreturnvalue
			     end}.

merge_msg_rpblistbucketsreq(#rpblistbucketsreq{timeout =
						   PFtimeout,
					       stream = PFstream,
					       type = PFtype},
			    #rpblistbucketsreq{timeout = NFtimeout,
					       stream = NFstream,
					       type = NFtype},
			    _) ->
    #rpblistbucketsreq{timeout =
			   if NFtimeout =:= undefined -> PFtimeout;
			      true -> NFtimeout
			   end,
		       stream =
			   if NFstream =:= undefined -> PFstream;
			      true -> NFstream
			   end,
		       type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end}.

merge_msg_rpbbucketkeypreflistitem(#rpbbucketkeypreflistitem{},
				   #rpbbucketkeypreflistitem{partition =
								 NFpartition,
							     node = NFnode,
							     primary =
								 NFprimary},
				   _) ->
    #rpbbucketkeypreflistitem{partition = NFpartition,
			      node = NFnode, primary = NFprimary}.

merge_msg_rpbgetbucketkeypreflistresp(#rpbgetbucketkeypreflistresp{preflist
								       =
								       PFpreflist},
				      #rpbgetbucketkeypreflistresp{preflist =
								       NFpreflist},
				      TrUserData) ->
    #rpbgetbucketkeypreflistresp{preflist =
				     'erlang_++'(PFpreflist, NFpreflist,
						 TrUserData)}.

merge_msg_rpblistbucketsresp(#rpblistbucketsresp{buckets
						     = PFbuckets,
						 done = PFdone},
			     #rpblistbucketsresp{buckets = NFbuckets,
						 done = NFdone},
			     TrUserData) ->
    #rpblistbucketsresp{buckets =
			    'erlang_++'(PFbuckets, NFbuckets, TrUserData),
			done =
			    if NFdone =:= undefined -> PFdone;
			       true -> NFdone
			    end}.

merge_msg_rpbputresp(#rpbputresp{content = PFcontent,
				 vclock = PFvclock, key = PFkey},
		     #rpbputresp{content = NFcontent, vclock = NFvclock,
				 key = NFkey},
		     TrUserData) ->
    #rpbputresp{content =
		    'erlang_++'(PFcontent, NFcontent, TrUserData),
		vclock =
		    if NFvclock =:= undefined -> PFvclock;
		       true -> NFvclock
		    end,
		key =
		    if NFkey =:= undefined -> PFkey;
		       true -> NFkey
		    end}.

merge_msg_rpbgetclientidresp(#rpbgetclientidresp{},
			     #rpbgetclientidresp{client_id = NFclient_id}, _) ->
    #rpbgetclientidresp{client_id = NFclient_id}.

merge_msg_rpbcoverageentry(#rpbcoverageentry{keyspace_desc
						 = PFkeyspace_desc},
			   #rpbcoverageentry{ip = NFip, port = NFport,
					     keyspace_desc = NFkeyspace_desc,
					     cover_context = NFcover_context},
			   _) ->
    #rpbcoverageentry{ip = NFip, port = NFport,
		      keyspace_desc =
			  if NFkeyspace_desc =:= undefined -> PFkeyspace_desc;
			     true -> NFkeyspace_desc
			  end,
		      cover_context = NFcover_context}.

merge_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{props
						       = PFprops},
			      #rpbsetbuckettypereq{type = NFtype,
						   props = NFprops},
			      TrUserData) ->
    #rpbsetbuckettypereq{type = NFtype,
			 props =
			     if PFprops /= undefined, NFprops /= undefined ->
				    merge_msg_rpbbucketprops(PFprops, NFprops,
							     TrUserData);
				PFprops == undefined -> NFprops;
				NFprops == undefined -> PFprops
			     end}.

merge_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{},
			      #rpbgetbuckettypereq{type = NFtype}, _) ->
    #rpbgetbuckettypereq{type = NFtype}.

merge_msg_rpbdelreq(#rpbdelreq{rw = PFrw,
			       vclock = PFvclock, r = PFr, w = PFw, pr = PFpr,
			       pw = PFpw, dw = PFdw, timeout = PFtimeout,
			       sloppy_quorum = PFsloppy_quorum, n_val = PFn_val,
			       type = PFtype},
		    #rpbdelreq{bucket = NFbucket, key = NFkey, rw = NFrw,
			       vclock = NFvclock, r = NFr, w = NFw, pr = NFpr,
			       pw = NFpw, dw = NFdw, timeout = NFtimeout,
			       sloppy_quorum = NFsloppy_quorum, n_val = NFn_val,
			       type = NFtype},
		    _) ->
    #rpbdelreq{bucket = NFbucket, key = NFkey,
	       rw =
		   if NFrw =:= undefined -> PFrw;
		      true -> NFrw
		   end,
	       vclock =
		   if NFvclock =:= undefined -> PFvclock;
		      true -> NFvclock
		   end,
	       r =
		   if NFr =:= undefined -> PFr;
		      true -> NFr
		   end,
	       w =
		   if NFw =:= undefined -> PFw;
		      true -> NFw
		   end,
	       pr =
		   if NFpr =:= undefined -> PFpr;
		      true -> NFpr
		   end,
	       pw =
		   if NFpw =:= undefined -> PFpw;
		      true -> NFpw
		   end,
	       dw =
		   if NFdw =:= undefined -> PFdw;
		      true -> NFdw
		   end,
	       timeout =
		   if NFtimeout =:= undefined -> PFtimeout;
		      true -> NFtimeout
		   end,
	       sloppy_quorum =
		   if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
		      true -> NFsloppy_quorum
		   end,
	       n_val =
		   if NFn_val =:= undefined -> PFn_val;
		      true -> NFn_val
		   end,
	       type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end}.

merge_msg_rpbputreq(#rpbputreq{key = PFkey,
			       vclock = PFvclock, content = PFcontent, w = PFw,
			       dw = PFdw, return_body = PFreturn_body,
			       pw = PFpw, if_not_modified = PFif_not_modified,
			       if_none_match = PFif_none_match,
			       return_head = PFreturn_head, timeout = PFtimeout,
			       asis = PFasis, sloppy_quorum = PFsloppy_quorum,
			       n_val = PFn_val, type = PFtype},
		    #rpbputreq{bucket = NFbucket, key = NFkey,
			       vclock = NFvclock, content = NFcontent, w = NFw,
			       dw = NFdw, return_body = NFreturn_body,
			       pw = NFpw, if_not_modified = NFif_not_modified,
			       if_none_match = NFif_none_match,
			       return_head = NFreturn_head, timeout = NFtimeout,
			       asis = NFasis, sloppy_quorum = NFsloppy_quorum,
			       n_val = NFn_val, type = NFtype},
		    TrUserData) ->
    #rpbputreq{bucket = NFbucket,
	       key =
		   if NFkey =:= undefined -> PFkey;
		      true -> NFkey
		   end,
	       vclock =
		   if NFvclock =:= undefined -> PFvclock;
		      true -> NFvclock
		   end,
	       content =
		   if PFcontent /= undefined, NFcontent /= undefined ->
			  merge_msg_rpbcontent(PFcontent, NFcontent,
					       TrUserData);
		      PFcontent == undefined -> NFcontent;
		      NFcontent == undefined -> PFcontent
		   end,
	       w =
		   if NFw =:= undefined -> PFw;
		      true -> NFw
		   end,
	       dw =
		   if NFdw =:= undefined -> PFdw;
		      true -> NFdw
		   end,
	       return_body =
		   if NFreturn_body =:= undefined -> PFreturn_body;
		      true -> NFreturn_body
		   end,
	       pw =
		   if NFpw =:= undefined -> PFpw;
		      true -> NFpw
		   end,
	       if_not_modified =
		   if NFif_not_modified =:= undefined -> PFif_not_modified;
		      true -> NFif_not_modified
		   end,
	       if_none_match =
		   if NFif_none_match =:= undefined -> PFif_none_match;
		      true -> NFif_none_match
		   end,
	       return_head =
		   if NFreturn_head =:= undefined -> PFreturn_head;
		      true -> NFreturn_head
		   end,
	       timeout =
		   if NFtimeout =:= undefined -> PFtimeout;
		      true -> NFtimeout
		   end,
	       asis =
		   if NFasis =:= undefined -> PFasis;
		      true -> NFasis
		   end,
	       sloppy_quorum =
		   if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
		      true -> NFsloppy_quorum
		   end,
	       n_val =
		   if NFn_val =:= undefined -> PFn_val;
		      true -> NFn_val
		   end,
	       type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end}.

merge_msg_rpbgetreq(#rpbgetreq{r = PFr, pr = PFpr,
			       basic_quorum = PFbasic_quorum,
			       notfound_ok = PFnotfound_ok,
			       if_modified = PFif_modified, head = PFhead,
			       deletedvclock = PFdeletedvclock,
			       timeout = PFtimeout,
			       sloppy_quorum = PFsloppy_quorum, n_val = PFn_val,
			       type = PFtype},
		    #rpbgetreq{bucket = NFbucket, key = NFkey, r = NFr,
			       pr = NFpr, basic_quorum = NFbasic_quorum,
			       notfound_ok = NFnotfound_ok,
			       if_modified = NFif_modified, head = NFhead,
			       deletedvclock = NFdeletedvclock,
			       timeout = NFtimeout,
			       sloppy_quorum = NFsloppy_quorum, n_val = NFn_val,
			       type = NFtype},
		    _) ->
    #rpbgetreq{bucket = NFbucket, key = NFkey,
	       r =
		   if NFr =:= undefined -> PFr;
		      true -> NFr
		   end,
	       pr =
		   if NFpr =:= undefined -> PFpr;
		      true -> NFpr
		   end,
	       basic_quorum =
		   if NFbasic_quorum =:= undefined -> PFbasic_quorum;
		      true -> NFbasic_quorum
		   end,
	       notfound_ok =
		   if NFnotfound_ok =:= undefined -> PFnotfound_ok;
		      true -> NFnotfound_ok
		   end,
	       if_modified =
		   if NFif_modified =:= undefined -> PFif_modified;
		      true -> NFif_modified
		   end,
	       head =
		   if NFhead =:= undefined -> PFhead;
		      true -> NFhead
		   end,
	       deletedvclock =
		   if NFdeletedvclock =:= undefined -> PFdeletedvclock;
		      true -> NFdeletedvclock
		   end,
	       timeout =
		   if NFtimeout =:= undefined -> PFtimeout;
		      true -> NFtimeout
		   end,
	       sloppy_quorum =
		   if NFsloppy_quorum =:= undefined -> PFsloppy_quorum;
		      true -> NFsloppy_quorum
		   end,
	       n_val =
		   if NFn_val =:= undefined -> PFn_val;
		      true -> NFn_val
		   end,
	       type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end}.

merge_msg_rpbgetbucketkeypreflistreq(#rpbgetbucketkeypreflistreq{type
								     = PFtype},
				     #rpbgetbucketkeypreflistreq{bucket =
								     NFbucket,
								 key = NFkey,
								 type = NFtype},
				     _) ->
    #rpbgetbucketkeypreflistreq{bucket = NFbucket,
				key = NFkey,
				type =
				    if NFtype =:= undefined -> PFtype;
				       true -> NFtype
				    end}.

merge_msg_rpbindexresp(#rpbindexresp{keys = PFkeys,
				     results = PFresults,
				     continuation = PFcontinuation,
				     done = PFdone},
		       #rpbindexresp{keys = NFkeys, results = NFresults,
				     continuation = NFcontinuation,
				     done = NFdone},
		       TrUserData) ->
    #rpbindexresp{keys =
		      'erlang_++'(PFkeys, NFkeys, TrUserData),
		  results = 'erlang_++'(PFresults, NFresults, TrUserData),
		  continuation =
		      if NFcontinuation =:= undefined -> PFcontinuation;
			 true -> NFcontinuation
		      end,
		  done =
		      if NFdone =:= undefined -> PFdone;
			 true -> NFdone
		      end}.

merge_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node
							 = PFnode,
						     server_version =
							 PFserver_version},
			       #rpbgetserverinforesp{node = NFnode,
						     server_version =
							 NFserver_version},
			       _) ->
    #rpbgetserverinforesp{node =
			      if NFnode =:= undefined -> PFnode;
				 true -> NFnode
			      end,
			  server_version =
			      if NFserver_version =:= undefined ->
				     PFserver_version;
				 true -> NFserver_version
			      end}.

merge_msg_rpbcsbucketresp(#rpbcsbucketresp{objects =
					       PFobjects,
					   continuation = PFcontinuation,
					   done = PFdone},
			  #rpbcsbucketresp{objects = NFobjects,
					   continuation = NFcontinuation,
					   done = NFdone},
			  TrUserData) ->
    #rpbcsbucketresp{objects =
			 'erlang_++'(PFobjects, NFobjects, TrUserData),
		     continuation =
			 if NFcontinuation =:= undefined -> PFcontinuation;
			    true -> NFcontinuation
			 end,
		     done =
			 if NFdone =:= undefined -> PFdone;
			    true -> NFdone
			 end}.

merge_msg_rpbmapredresp(#rpbmapredresp{phase = PFphase,
				       response = PFresponse, done = PFdone},
			#rpbmapredresp{phase = NFphase, response = NFresponse,
				       done = NFdone},
			_) ->
    #rpbmapredresp{phase =
		       if NFphase =:= undefined -> PFphase;
			  true -> NFphase
		       end,
		   response =
		       if NFresponse =:= undefined -> PFresponse;
			  true -> NFresponse
		       end,
		   done =
		       if NFdone =:= undefined -> PFdone;
			  true -> NFdone
		       end}.

merge_msg_rpbcoveragereq(#rpbcoveragereq{type = PFtype,
					 min_partitions = PFmin_partitions,
					 replace_cover = PFreplace_cover,
					 unavailable_cover =
					     PFunavailable_cover},
			 #rpbcoveragereq{type = NFtype, bucket = NFbucket,
					 min_partitions = NFmin_partitions,
					 replace_cover = NFreplace_cover,
					 unavailable_cover =
					     NFunavailable_cover},
			 TrUserData) ->
    #rpbcoveragereq{type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end,
		    bucket = NFbucket,
		    min_partitions =
			if NFmin_partitions =:= undefined -> PFmin_partitions;
			   true -> NFmin_partitions
			end,
		    replace_cover =
			if NFreplace_cover =:= undefined -> PFreplace_cover;
			   true -> NFreplace_cover
			end,
		    unavailable_cover =
			'erlang_++'(PFunavailable_cover, NFunavailable_cover,
				    TrUserData)}.

merge_msg_rpbsetbucketreq(#rpbsetbucketreq{props =
					       PFprops,
					   type = PFtype},
			  #rpbsetbucketreq{bucket = NFbucket, props = NFprops,
					   type = NFtype},
			  TrUserData) ->
    #rpbsetbucketreq{bucket = NFbucket,
		     props =
			 if PFprops /= undefined, NFprops /= undefined ->
				merge_msg_rpbbucketprops(PFprops, NFprops,
							 TrUserData);
			    PFprops == undefined -> NFprops;
			    NFprops == undefined -> PFprops
			 end,
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpbgetbucketreq(#rpbgetbucketreq{type =
					       PFtype},
			  #rpbgetbucketreq{bucket = NFbucket, type = NFtype},
			  _) ->
    #rpbgetbucketreq{bucket = NFbucket,
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpblistkeysresp(#rpblistkeysresp{keys =
					       PFkeys,
					   done = PFdone},
			  #rpblistkeysresp{keys = NFkeys, done = NFdone},
			  TrUserData) ->
    #rpblistkeysresp{keys =
			 'erlang_++'(PFkeys, NFkeys, TrUserData),
		     done =
			 if NFdone =:= undefined -> PFdone;
			    true -> NFdone
			 end}.

merge_msg_rpbindexreq(#rpbindexreq{key = PFkey,
				   range_min = PFrange_min,
				   range_max = PFrange_max,
				   return_terms = PFreturn_terms,
				   stream = PFstream,
				   max_results = PFmax_results,
				   continuation = PFcontinuation,
				   timeout = PFtimeout, type = PFtype,
				   term_regex = PFterm_regex,
				   pagination_sort = PFpagination_sort,
				   cover_context = PFcover_context,
				   return_body = PFreturn_body},
		      #rpbindexreq{bucket = NFbucket, index = NFindex,
				   qtype = NFqtype, key = NFkey,
				   range_min = NFrange_min,
				   range_max = NFrange_max,
				   return_terms = NFreturn_terms,
				   stream = NFstream,
				   max_results = NFmax_results,
				   continuation = NFcontinuation,
				   timeout = NFtimeout, type = NFtype,
				   term_regex = NFterm_regex,
				   pagination_sort = NFpagination_sort,
				   cover_context = NFcover_context,
				   return_body = NFreturn_body},
		      _) ->
    #rpbindexreq{bucket = NFbucket, index = NFindex,
		 qtype = NFqtype,
		 key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 range_min =
		     if NFrange_min =:= undefined -> PFrange_min;
			true -> NFrange_min
		     end,
		 range_max =
		     if NFrange_max =:= undefined -> PFrange_max;
			true -> NFrange_max
		     end,
		 return_terms =
		     if NFreturn_terms =:= undefined -> PFreturn_terms;
			true -> NFreturn_terms
		     end,
		 stream =
		     if NFstream =:= undefined -> PFstream;
			true -> NFstream
		     end,
		 max_results =
		     if NFmax_results =:= undefined -> PFmax_results;
			true -> NFmax_results
		     end,
		 continuation =
		     if NFcontinuation =:= undefined -> PFcontinuation;
			true -> NFcontinuation
		     end,
		 timeout =
		     if NFtimeout =:= undefined -> PFtimeout;
			true -> NFtimeout
		     end,
		 type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end,
		 term_regex =
		     if NFterm_regex =:= undefined -> PFterm_regex;
			true -> NFterm_regex
		     end,
		 pagination_sort =
		     if NFpagination_sort =:= undefined -> PFpagination_sort;
			true -> NFpagination_sort
		     end,
		 cover_context =
		     if NFcover_context =:= undefined -> PFcover_context;
			true -> NFcover_context
		     end,
		 return_body =
		     if NFreturn_body =:= undefined -> PFreturn_body;
			true -> NFreturn_body
		     end}.

merge_msg_rpbcountergetreq(#rpbcountergetreq{r = PFr,
					     pr = PFpr,
					     basic_quorum = PFbasic_quorum,
					     notfound_ok = PFnotfound_ok},
			   #rpbcountergetreq{bucket = NFbucket, key = NFkey,
					     r = NFr, pr = NFpr,
					     basic_quorum = NFbasic_quorum,
					     notfound_ok = NFnotfound_ok},
			   _) ->
    #rpbcountergetreq{bucket = NFbucket, key = NFkey,
		      r =
			  if NFr =:= undefined -> PFr;
			     true -> NFr
			  end,
		      pr =
			  if NFpr =:= undefined -> PFpr;
			     true -> NFpr
			  end,
		      basic_quorum =
			  if NFbasic_quorum =:= undefined -> PFbasic_quorum;
			     true -> NFbasic_quorum
			  end,
		      notfound_ok =
			  if NFnotfound_ok =:= undefined -> PFnotfound_ok;
			     true -> NFnotfound_ok
			  end}.

merge_msg_rpblistkeysreq(#rpblistkeysreq{timeout =
					     PFtimeout,
					 type = PFtype},
			 #rpblistkeysreq{bucket = NFbucket, timeout = NFtimeout,
					 type = NFtype},
			 _) ->
    #rpblistkeysreq{bucket = NFbucket,
		    timeout =
			if NFtimeout =:= undefined -> PFtimeout;
			   true -> NFtimeout
			end,
		    type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end}.

merge_msg_rpbauthreq(#rpbauthreq{},
		     #rpbauthreq{user = NFuser, password = NFpassword}, _) ->
    #rpbauthreq{user = NFuser, password = NFpassword}.

merge_msg_rpbmapredreq(#rpbmapredreq{},
		       #rpbmapredreq{request = NFrequest,
				     content_type = NFcontent_type},
		       _) ->
    #rpbmapredreq{request = NFrequest,
		  content_type = NFcontent_type}.

merge_msg_rpbcounterupdateresp(#rpbcounterupdateresp{value
							 = PFvalue},
			       #rpbcounterupdateresp{value = NFvalue}, _) ->
    #rpbcounterupdateresp{value =
			      if NFvalue =:= undefined -> PFvalue;
				 true -> NFvalue
			      end}.

merge_msg_rpbgetbucketresp(#rpbgetbucketresp{props =
						 PFprops},
			   #rpbgetbucketresp{props = NFprops}, TrUserData) ->
    #rpbgetbucketresp{props =
			  if PFprops /= undefined, NFprops /= undefined ->
				 merge_msg_rpbbucketprops(PFprops, NFprops,
							  TrUserData);
			     PFprops == undefined -> NFprops;
			     NFprops == undefined -> PFprops
			  end}.

merge_msg_rpbcountergetresp(#rpbcountergetresp{value =
						   PFvalue},
			    #rpbcountergetresp{value = NFvalue}, _) ->
    #rpbcountergetresp{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end}.

merge_msg_rpbindexbodyresp(#rpbindexbodyresp{objects =
						 PFobjects,
					     continuation = PFcontinuation,
					     done = PFdone},
			   #rpbindexbodyresp{objects = NFobjects,
					     continuation = NFcontinuation,
					     done = NFdone},
			   TrUserData) ->
    #rpbindexbodyresp{objects =
			  'erlang_++'(PFobjects, NFobjects, TrUserData),
		      continuation =
			  if NFcontinuation =:= undefined -> PFcontinuation;
			     true -> NFcontinuation
			  end,
		      done =
			  if NFdone =:= undefined -> PFdone;
			     true -> NFdone
			  end}.

merge_msg_rpbcoverageresp(#rpbcoverageresp{entries =
					       PFentries},
			  #rpbcoverageresp{entries = NFentries}, TrUserData) ->
    #rpbcoverageresp{entries =
			 'erlang_++'(PFentries, NFentries, TrUserData)}.

merge_msg_rpberrorresp(#rpberrorresp{},
		       #rpberrorresp{errmsg = NFerrmsg, errcode = NFerrcode},
		       _) ->
    #rpberrorresp{errmsg = NFerrmsg, errcode = NFerrcode}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpblink{} -> v_msg_rpblink(Msg, [rpblink], TrUserData);
      #rpbpair{} -> v_msg_rpbpair(Msg, [rpbpair], TrUserData);
      #rpbcontent{} ->
	  v_msg_rpbcontent(Msg, [rpbcontent], TrUserData);
      #rpbgetresp{} ->
	  v_msg_rpbgetresp(Msg, [rpbgetresp], TrUserData);
      #rpbindexobject{} ->
	  v_msg_rpbindexobject(Msg, [rpbindexobject], TrUserData);
      #rpbmodfun{} ->
	  v_msg_rpbmodfun(Msg, [rpbmodfun], TrUserData);
      #rpbcommithook{} ->
	  v_msg_rpbcommithook(Msg, [rpbcommithook], TrUserData);
      #rpbbucketprops{} ->
	  v_msg_rpbbucketprops(Msg, [rpbbucketprops], TrUserData);
      #rpbresetbucketreq{} ->
	  v_msg_rpbresetbucketreq(Msg, [rpbresetbucketreq],
				  TrUserData);
      #rpbcsbucketreq{} ->
	  v_msg_rpbcsbucketreq(Msg, [rpbcsbucketreq], TrUserData);
      #rpbsetclientidreq{} ->
	  v_msg_rpbsetclientidreq(Msg, [rpbsetclientidreq],
				  TrUserData);
      #rpbcounterupdatereq{} ->
	  v_msg_rpbcounterupdatereq(Msg, [rpbcounterupdatereq],
				    TrUserData);
      #rpblistbucketsreq{} ->
	  v_msg_rpblistbucketsreq(Msg, [rpblistbucketsreq],
				  TrUserData);
      #rpbbucketkeypreflistitem{} ->
	  v_msg_rpbbucketkeypreflistitem(Msg,
					 [rpbbucketkeypreflistitem],
					 TrUserData);
      #rpbgetbucketkeypreflistresp{} ->
	  v_msg_rpbgetbucketkeypreflistresp(Msg,
					    [rpbgetbucketkeypreflistresp],
					    TrUserData);
      #rpblistbucketsresp{} ->
	  v_msg_rpblistbucketsresp(Msg, [rpblistbucketsresp],
				   TrUserData);
      #rpbputresp{} ->
	  v_msg_rpbputresp(Msg, [rpbputresp], TrUserData);
      #rpbgetclientidresp{} ->
	  v_msg_rpbgetclientidresp(Msg, [rpbgetclientidresp],
				   TrUserData);
      #rpbcoverageentry{} ->
	  v_msg_rpbcoverageentry(Msg, [rpbcoverageentry],
				 TrUserData);
      #rpbsetbuckettypereq{} ->
	  v_msg_rpbsetbuckettypereq(Msg, [rpbsetbuckettypereq],
				    TrUserData);
      #rpbgetbuckettypereq{} ->
	  v_msg_rpbgetbuckettypereq(Msg, [rpbgetbuckettypereq],
				    TrUserData);
      #rpbdelreq{} ->
	  v_msg_rpbdelreq(Msg, [rpbdelreq], TrUserData);
      #rpbputreq{} ->
	  v_msg_rpbputreq(Msg, [rpbputreq], TrUserData);
      #rpbgetreq{} ->
	  v_msg_rpbgetreq(Msg, [rpbgetreq], TrUserData);
      #rpbgetbucketkeypreflistreq{} ->
	  v_msg_rpbgetbucketkeypreflistreq(Msg,
					   [rpbgetbucketkeypreflistreq],
					   TrUserData);
      #rpbindexresp{} ->
	  v_msg_rpbindexresp(Msg, [rpbindexresp], TrUserData);
      #rpbgetserverinforesp{} ->
	  v_msg_rpbgetserverinforesp(Msg, [rpbgetserverinforesp],
				     TrUserData);
      #rpbcsbucketresp{} ->
	  v_msg_rpbcsbucketresp(Msg, [rpbcsbucketresp],
				TrUserData);
      #rpbmapredresp{} ->
	  v_msg_rpbmapredresp(Msg, [rpbmapredresp], TrUserData);
      #rpbcoveragereq{} ->
	  v_msg_rpbcoveragereq(Msg, [rpbcoveragereq], TrUserData);
      #rpbsetbucketreq{} ->
	  v_msg_rpbsetbucketreq(Msg, [rpbsetbucketreq],
				TrUserData);
      #rpbgetbucketreq{} ->
	  v_msg_rpbgetbucketreq(Msg, [rpbgetbucketreq],
				TrUserData);
      #rpblistkeysresp{} ->
	  v_msg_rpblistkeysresp(Msg, [rpblistkeysresp],
				TrUserData);
      #rpbindexreq{} ->
	  v_msg_rpbindexreq(Msg, [rpbindexreq], TrUserData);
      #rpbcountergetreq{} ->
	  v_msg_rpbcountergetreq(Msg, [rpbcountergetreq],
				 TrUserData);
      #rpblistkeysreq{} ->
	  v_msg_rpblistkeysreq(Msg, [rpblistkeysreq], TrUserData);
      #rpbauthreq{} ->
	  v_msg_rpbauthreq(Msg, [rpbauthreq], TrUserData);
      #rpbmapredreq{} ->
	  v_msg_rpbmapredreq(Msg, [rpbmapredreq], TrUserData);
      #rpbcounterupdateresp{} ->
	  v_msg_rpbcounterupdateresp(Msg, [rpbcounterupdateresp],
				     TrUserData);
      #rpbgetbucketresp{} ->
	  v_msg_rpbgetbucketresp(Msg, [rpbgetbucketresp],
				 TrUserData);
      #rpbcountergetresp{} ->
	  v_msg_rpbcountergetresp(Msg, [rpbcountergetresp],
				  TrUserData);
      #rpbindexbodyresp{} ->
	  v_msg_rpbindexbodyresp(Msg, [rpbindexbodyresp],
				 TrUserData);
      #rpbcoverageresp{} ->
	  v_msg_rpbcoverageresp(Msg, [rpbcoverageresp],
				TrUserData);
      #rpberrorresp{} ->
	  v_msg_rpberrorresp(Msg, [rpberrorresp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_rpblink/3}).
v_msg_rpblink(#rpblink{bucket = F1, key = F2, tag = F3},
	      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [bucket | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [key | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [tag | Path])
    end,
    ok;
v_msg_rpblink(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpblink}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbpair/3}).
v_msg_rpbpair(#rpbpair{key = F1, value = F2}, Path,
	      _) ->
    v_type_bytes(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path])
    end,
    ok;
v_msg_rpbpair(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbpair}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbcontent/3}).
v_msg_rpbcontent(#rpbcontent{value = F1,
			     content_type = F2, charset = F3,
			     content_encoding = F4, vtag = F5, links = F6,
			     last_mod = F7, last_mod_usecs = F8, usermeta = F9,
			     indexes = F10, deleted = F11, ttl = F12},
		 Path, TrUserData) ->
    v_type_bytes(F1, [value | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [content_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [charset | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [content_encoding | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [vtag | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_rpblink(Elem, [links | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpblink}}, F6,
			 Path)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [last_mod | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [last_mod_usecs | Path])
    end,
    if is_list(F9) ->
	   _ = [v_msg_rpbpair(Elem, [usermeta | Path], TrUserData)
		|| Elem <- F9],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbpair}}, F9,
			 Path)
    end,
    if is_list(F10) ->
	   _ = [v_msg_rpbpair(Elem, [indexes | Path], TrUserData)
		|| Elem <- F10],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbpair}}, F10,
			 Path)
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [deleted | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [ttl | Path])
    end,
    ok;
v_msg_rpbcontent(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbcontent}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbgetresp/3}).
v_msg_rpbgetresp(#rpbgetresp{content = F1, vclock = F2,
			     unchanged = F3},
		 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbcontent(Elem, [content | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcontent}}, F1,
			 Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [vclock | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [unchanged | Path])
    end,
    ok;
v_msg_rpbgetresp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbgetresp}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbindexobject/3}).
v_msg_rpbindexobject(#rpbindexobject{key = F1,
				     object = F2},
		     Path, TrUserData) ->
    v_type_bytes(F1, [key | Path]),
    v_msg_rpbgetresp(F2, [object | Path], TrUserData),
    ok;
v_msg_rpbindexobject(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbindexobject}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbmodfun/3}).
v_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Path, _) ->
    v_type_bytes(F1, [module | Path]),
    v_type_bytes(F2, [function | Path]),
    ok;
v_msg_rpbmodfun(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbmodfun}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbcommithook/3}).
v_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_rpbmodfun(F1, [modfun | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [name | Path])
    end,
    ok;
v_msg_rpbcommithook(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbcommithook}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbbucketprops/3}).
v_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28,
				     hll_precision = F29, ttl = F30},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [n_val | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [allow_mult | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [last_write_wins | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_rpbcommithook(Elem, [precommit | Path],
				    TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [has_precommit | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_rpbcommithook(Elem, [postcommit | Path],
				    TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F6, Path)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [has_postcommit | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_rpbmodfun(F8, [chash_keyfun | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_rpbmodfun(F9, [linkfun | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [old_vclock | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [young_vclock | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [big_vclock | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [small_vclock | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [pr | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [r | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [w | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [pw | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [dw | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint32(F19, [rw | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_bool(F20, [basic_quorum | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_bool(F21, [notfound_ok | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_bytes(F22, [backend | Path])
    end,
    if F23 == undefined -> ok;
       true -> v_type_bool(F23, [search | Path])
    end,
    if F24 == undefined -> ok;
       true ->
	   'v_enum_RpbBucketProps.RpbReplMode'(F24, [repl | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_bytes(F25, [search_index | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_bytes(F26, [datatype | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_bool(F27, [consistent | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_bool(F28, [write_once | Path])
    end,
    if F29 == undefined -> ok;
       true -> v_type_uint32(F29, [hll_precision | Path])
    end,
    if F30 == undefined -> ok;
       true -> v_type_uint32(F30, [ttl | Path])
    end,
    ok;
v_msg_rpbbucketprops(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbbucketprops}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbresetbucketreq/3}).
v_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbcsbucketreq/3}).
v_msg_rpbcsbucketreq(#rpbcsbucketreq{bucket = F1,
				     start_key = F2, end_key = F3,
				     start_incl = F4, end_incl = F5,
				     continuation = F6, max_results = F7,
				     timeout = F8, type = F9,
				     cover_context = F10},
		     Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [start_key | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [end_key | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [start_incl | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [end_incl | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [continuation | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [max_results | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [timeout | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bytes(F9, [type | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [cover_context | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbsetclientidreq/3}).
v_msg_rpbsetclientidreq(#rpbsetclientidreq{client_id =
					       F1},
			Path, _) ->
    v_type_bytes(F1, [client_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_rpbcounterupdatereq/3}).
v_msg_rpbcounterupdatereq(#rpbcounterupdatereq{bucket =
						   F1,
					       key = F2, amount = F3, w = F4,
					       dw = F5, pw = F6,
					       returnvalue = F7},
			  Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    v_type_sint64(F3, [amount | Path]),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [w | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [dw | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [pw | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [returnvalue | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpblistbucketsreq/3}).
v_msg_rpblistbucketsreq(#rpblistbucketsreq{timeout = F1,
					   stream = F2, type = F3},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [timeout | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [stream | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbbucketkeypreflistitem/3}).
v_msg_rpbbucketkeypreflistitem(#rpbbucketkeypreflistitem{partition
							     = F1,
							 node = F2,
							 primary = F3},
			       Path, _) ->
    v_type_int64(F1, [partition | Path]),
    v_type_bytes(F2, [node | Path]),
    v_type_bool(F3, [primary | Path]),
    ok;
v_msg_rpbbucketkeypreflistitem(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbbucketkeypreflistitem},
		  X, Path).

-dialyzer({nowarn_function,v_msg_rpbgetbucketkeypreflistresp/3}).
v_msg_rpbgetbucketkeypreflistresp(#rpbgetbucketkeypreflistresp{preflist
								   = F1},
				  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbbucketkeypreflistitem(Elem,
					       [preflist | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, rpbbucketkeypreflistitem}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpblistbucketsresp/3}).
v_msg_rpblistbucketsresp(#rpblistbucketsresp{buckets =
						 F1,
					     done = F2},
			 Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [buckets | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbputresp/3}).
v_msg_rpbputresp(#rpbputresp{content = F1, vclock = F2,
			     key = F3},
		 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbcontent(Elem, [content | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcontent}}, F1,
			 Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [vclock | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [key | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetclientidresp/3}).
v_msg_rpbgetclientidresp(#rpbgetclientidresp{client_id =
						 F1},
			 Path, _) ->
    v_type_bytes(F1, [client_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_rpbcoverageentry/3}).
v_msg_rpbcoverageentry(#rpbcoverageentry{ip = F1,
					 port = F2, keyspace_desc = F3,
					 cover_context = F4},
		       Path, _) ->
    v_type_bytes(F1, [ip | Path]),
    v_type_uint32(F2, [port | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [keyspace_desc | Path])
    end,
    v_type_bytes(F4, [cover_context | Path]),
    ok;
v_msg_rpbcoverageentry(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbcoverageentry}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_rpbsetbuckettypereq/3}).
v_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Path, TrUserData) ->
    v_type_bytes(F1, [type | Path]),
    v_msg_rpbbucketprops(F2, [props | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbuckettypereq/3}).
v_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Path, _) ->
    v_type_bytes(F1, [type | Path]), ok.

-dialyzer({nowarn_function,v_msg_rpbdelreq/3}).
v_msg_rpbdelreq(#rpbdelreq{bucket = F1, key = F2,
			   rw = F3, vclock = F4, r = F5, w = F6, pr = F7,
			   pw = F8, dw = F9, timeout = F10, sloppy_quorum = F11,
			   n_val = F12, type = F13},
		Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rw | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [vclock | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [r | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [w | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [pr | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [pw | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [dw | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [timeout | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [sloppy_quorum | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [n_val | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bytes(F13, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbputreq/3}).
v_msg_rpbputreq(#rpbputreq{bucket = F1, key = F2,
			   vclock = F3, content = F4, w = F5, dw = F6,
			   return_body = F7, pw = F8, if_not_modified = F9,
			   if_none_match = F10, return_head = F11,
			   timeout = F12, asis = F13, sloppy_quorum = F14,
			   n_val = F15, type = F16},
		Path, TrUserData) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [key | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [vclock | Path])
    end,
    v_msg_rpbcontent(F4, [content | Path], TrUserData),
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [w | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [dw | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [return_body | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [pw | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [if_not_modified | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [if_none_match | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [return_head | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [timeout | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [asis | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_bool(F14, [sloppy_quorum | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [n_val | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_bytes(F16, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetreq/3}).
v_msg_rpbgetreq(#rpbgetreq{bucket = F1, key = F2,
			   r = F3, pr = F4, basic_quorum = F5, notfound_ok = F6,
			   if_modified = F7, head = F8, deletedvclock = F9,
			   timeout = F10, sloppy_quorum = F11, n_val = F12,
			   type = F13},
		Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [r | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [pr | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [basic_quorum | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [notfound_ok | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [if_modified | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [head | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [deletedvclock | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [timeout | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [sloppy_quorum | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [n_val | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bytes(F13, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbucketkeypreflistreq/3}).
v_msg_rpbgetbucketkeypreflistreq(#rpbgetbucketkeypreflistreq{bucket
								 = F1,
							     key = F2,
							     type = F3},
				 Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbindexresp/3}).
v_msg_rpbindexresp(#rpbindexresp{keys = F1,
				 results = F2, continuation = F3, done = F4},
		   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [keys | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    if is_list(F2) ->
	   _ = [v_msg_rpbpair(Elem, [results | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbpair}}, F2,
			 Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [continuation | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetserverinforesp/3}).
v_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [node | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [server_version | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbcsbucketresp/3}).
v_msg_rpbcsbucketresp(#rpbcsbucketresp{objects = F1,
				       continuation = F2, done = F3},
		      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbindexobject(Elem, [objects | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbindexobject}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [continuation | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbmapredresp/3}).
v_msg_rpbmapredresp(#rpbmapredresp{phase = F1,
				   response = F2, done = F3},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [phase | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [response | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbcoveragereq/3}).
v_msg_rpbcoveragereq(#rpbcoveragereq{type = F1,
				     bucket = F2, min_partitions = F3,
				     replace_cover = F4,
				     unavailable_cover = F5},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [type | Path])
    end,
    v_type_bytes(F2, [bucket | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [min_partitions | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [replace_cover | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_bytes(Elem, [unavailable_cover | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F5, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbsetbucketreq/3}).
v_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Path, TrUserData) ->
    v_type_bytes(F1, [bucket | Path]),
    v_msg_rpbbucketprops(F2, [props | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbucketreq/3}).
v_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpblistkeysresp/3}).
v_msg_rpblistkeysresp(#rpblistkeysresp{keys = F1,
				       done = F2},
		      Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [keys | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbindexreq/3}).
v_msg_rpbindexreq(#rpbindexreq{bucket = F1, index = F2,
			       qtype = F3, key = F4, range_min = F5,
			       range_max = F6, return_terms = F7, stream = F8,
			       max_results = F9, continuation = F10,
			       timeout = F11, type = F12, term_regex = F13,
			       pagination_sort = F14, cover_context = F15,
			       return_body = F16},
		  Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [index | Path]),
    'v_enum_RpbIndexReq.IndexQueryType'(F3, [qtype | Path]),
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [key | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [range_min | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [range_max | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [return_terms | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [stream | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [max_results | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [continuation | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [timeout | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_bytes(F12, [type | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bytes(F13, [term_regex | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_bool(F14, [pagination_sort | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_bytes(F15, [cover_context | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_bool(F16, [return_body | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbcountergetreq/3}).
v_msg_rpbcountergetreq(#rpbcountergetreq{bucket = F1,
					 key = F2, r = F3, pr = F4,
					 basic_quorum = F5, notfound_ok = F6},
		       Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    v_type_bytes(F2, [key | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [r | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [pr | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [basic_quorum | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [notfound_ok | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpblistkeysreq/3}).
v_msg_rpblistkeysreq(#rpblistkeysreq{bucket = F1,
				     timeout = F2, type = F3},
		     Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [timeout | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbauthreq/3}).
v_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Path, _) ->
    v_type_bytes(F1, [user | Path]),
    v_type_bytes(F2, [password | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rpbmapredreq/3}).
v_msg_rpbmapredreq(#rpbmapredreq{request = F1,
				 content_type = F2},
		   Path, _) ->
    v_type_bytes(F1, [request | Path]),
    v_type_bytes(F2, [content_type | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rpbcounterupdateresp/3}).
v_msg_rpbcounterupdateresp(#rpbcounterupdateresp{value =
						     F1},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_sint64(F1, [value | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbucketresp/3}).
v_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Path, TrUserData) ->
    v_msg_rpbbucketprops(F1, [props | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_rpbcountergetresp/3}).
v_msg_rpbcountergetresp(#rpbcountergetresp{value = F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_sint64(F1, [value | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbindexbodyresp/3}).
v_msg_rpbindexbodyresp(#rpbindexbodyresp{objects = F1,
					 continuation = F2, done = F3},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbindexobject(Elem, [objects | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbindexobject}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [continuation | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [done | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbcoverageresp/3}).
v_msg_rpbcoverageresp(#rpbcoverageresp{entries = F1},
		      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_rpbcoverageentry(Elem, [entries | Path],
				       TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, rpbcoverageentry}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpberrorresp/3}).
v_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Path, _) ->
    v_type_bytes(F1, [errmsg | Path]),
    v_type_uint32(F2, [errcode | Path]),
    ok.

-dialyzer({nowarn_function,'v_enum_RpbIndexReq.IndexQueryType'/2}).
'v_enum_RpbIndexReq.IndexQueryType'(eq, _Path) -> ok;
'v_enum_RpbIndexReq.IndexQueryType'(range, _Path) -> ok;
'v_enum_RpbIndexReq.IndexQueryType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_RpbIndexReq.IndexQueryType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'RpbIndexReq.IndexQueryType'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_RpbBucketProps.RpbReplMode'/2}).
'v_enum_RpbBucketProps.RpbReplMode'('FALSE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('REALTIME',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('FULLSYNC',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('TRUE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_RpbBucketProps.RpbReplMode'(X, Path) ->
    mk_type_error({invalid_enum,
		   'RpbBucketProps.RpbReplMode'},
		  X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint64/2}).
v_type_sint64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_sint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint64, signed, 64},
		  N, Path);
v_type_sint64(X, Path) ->
    mk_type_error({bad_integer, sint64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'RpbIndexReq.IndexQueryType'},
      [{eq, 0}, {range, 1}]},
     {{enum, 'RpbBucketProps.RpbReplMode'},
      [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
       {'TRUE', 3}]},
     {{msg, rpblink},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, tag}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbpair},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbcontent},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, content_type}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, charset}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, content_encoding}, {fnum, 4}, {rnum, 5},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, vtag}, {fnum, 5}, {rnum, 6}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, links}, {fnum, 6}, {rnum, 7},
	{type, {msg, rpblink}}, {occurrence, repeated},
	{opts, []}],
       [{name, last_mod}, {fnum, 7}, {rnum, 8}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, last_mod_usecs}, {fnum, 8}, {rnum, 9},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, usermeta}, {fnum, 9}, {rnum, 10},
	{type, {msg, rpbpair}}, {occurrence, repeated},
	{opts, []}],
       [{name, indexes}, {fnum, 10}, {rnum, 11},
	{type, {msg, rpbpair}}, {occurrence, repeated},
	{opts, []}],
       [{name, deleted}, {fnum, 11}, {rnum, 12}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, ttl}, {fnum, 12}, {rnum, 13}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetresp},
      [[{name, content}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbcontent}}, {occurrence, repeated},
	{opts, []}],
       [{name, vclock}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, unchanged}, {fnum, 3}, {rnum, 4}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbindexobject},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, object}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbgetresp}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpbmodfun},
      [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbcommithook},
      [[{name, modfun}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbbucketprops},
      [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, precommit}, {fnum, 4}, {rnum, 5},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_precommit}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, postcommit}, {fnum, 6}, {rnum, 7},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, linkfun}, {fnum, 9}, {rnum, 10},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, old_vclock}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, young_vclock}, {fnum, 11}, {rnum, 12},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, big_vclock}, {fnum, 12}, {rnum, 13},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, small_vclock}, {fnum, 13}, {rnum, 14},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, repl}, {fnum, 24}, {rnum, 25},
	{type, {enum, 'RpbBucketProps.RpbReplMode'}},
	{occurrence, optional}, {opts, []}],
       [{name, search_index}, {fnum, 25}, {rnum, 26},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, datatype}, {fnum, 26}, {rnum, 27},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, consistent}, {fnum, 27}, {rnum, 28},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, write_once}, {fnum, 28}, {rnum, 29},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, hll_precision}, {fnum, 29}, {rnum, 30},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, ttl}, {fnum, 30}, {rnum, 31}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbresetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbcsbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, start_key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, end_key}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, start_incl}, {fnum, 4}, {rnum, 5}, {type, bool},
	{occurrence, optional}, {opts, [{default, true}]}],
       [{name, end_incl}, {fnum, 5}, {rnum, 6}, {type, bool},
	{occurrence, optional}, {opts, [{default, false}]}],
       [{name, continuation}, {fnum, 6}, {rnum, 7},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, max_results}, {fnum, 7}, {rnum, 8},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 8}, {rnum, 9}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 9}, {rnum, 10}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, cover_context}, {fnum, 10}, {rnum, 11},
	{type, bytes}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbsetclientidreq},
      [[{name, client_id}, {fnum, 1}, {rnum, 2},
	{type, bytes}, {occurrence, required}, {opts, []}]]},
     {{msg, rpbcounterupdatereq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, amount}, {fnum, 3}, {rnum, 4}, {type, sint64},
	{occurrence, required}, {opts, []}],
       [{name, w}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 5}, {rnum, 6}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 6}, {rnum, 7}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, returnvalue}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpblistbucketsreq},
      [[{name, timeout}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, stream}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbbucketkeypreflistitem},
      [[{name, partition}, {fnum, 1}, {rnum, 2},
	{type, int64}, {occurrence, required}, {opts, []}],
       [{name, node}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, primary}, {fnum, 3}, {rnum, 4}, {type, bool},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbgetbucketkeypreflistresp},
      [[{name, preflist}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbbucketkeypreflistitem}},
	{occurrence, repeated}, {opts, []}]]},
     {{msg, rpblistbucketsresp},
      [[{name, buckets}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, done}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbputresp},
      [[{name, content}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbcontent}}, {occurrence, repeated},
	{opts, []}],
       [{name, vclock}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, key}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetclientidresp},
      [[{name, client_id}, {fnum, 1}, {rnum, 2},
	{type, bytes}, {occurrence, required}, {opts, []}]]},
     {{msg, rpbcoverageentry},
      [[{name, ip}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, port}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, required}, {opts, []}],
       [{name, keyspace_desc}, {fnum, 3}, {rnum, 4},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, cover_context}, {fnum, 4}, {rnum, 5},
	{type, bytes}, {occurrence, required}, {opts, []}]]},
     {{msg, rpbsetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpbgetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbdelreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, rw}, {fnum, 3}, {rnum, 4}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, vclock}, {fnum, 4}, {rnum, 5}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, r}, {fnum, 5}, {rnum, 6}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, w}, {fnum, 6}, {rnum, 7}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 7}, {rnum, 8}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 9}, {rnum, 10}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 13}, {rnum, 14}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbputreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, vclock}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, content}, {fnum, 4}, {rnum, 5},
	{type, {msg, rpbcontent}}, {occurrence, required},
	{opts, []}],
       [{name, w}, {fnum, 5}, {rnum, 6}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 6}, {rnum, 7}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, return_body}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, if_not_modified}, {fnum, 9}, {rnum, 10},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, if_none_match}, {fnum, 10}, {rnum, 11},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, return_head}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 12}, {rnum, 13},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, asis}, {fnum, 13}, {rnum, 14}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 14}, {rnum, 15},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 15}, {rnum, 16}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 16}, {rnum, 17}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, r}, {fnum, 3}, {rnum, 4}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 6}, {rnum, 7},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, if_modified}, {fnum, 7}, {rnum, 8},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, head}, {fnum, 8}, {rnum, 9}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, deletedvclock}, {fnum, 9}, {rnum, 10},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 13}, {rnum, 14}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetbucketkeypreflistreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbindexresp},
      [[{name, keys}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, results}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbpair}}, {occurrence, repeated},
	{opts, []}],
       [{name, continuation}, {fnum, 3}, {rnum, 4},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, done}, {fnum, 4}, {rnum, 5}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetserverinforesp},
      [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, server_version}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbcsbucketresp},
      [[{name, objects}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbindexobject}}, {occurrence, repeated},
	{opts, []}],
       [{name, continuation}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbmapredresp},
      [[{name, phase}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, response}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbcoveragereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, bucket}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, min_partitions}, {fnum, 3}, {rnum, 4},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, replace_cover}, {fnum, 4}, {rnum, 5},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, unavailable_cover}, {fnum, 5}, {rnum, 6},
	{type, bytes}, {occurrence, repeated}, {opts, []}]]},
     {{msg, rpbsetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpblistkeysresp},
      [[{name, keys}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, repeated}, {opts, []}],
       [{name, done}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbindexreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, index}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, qtype}, {fnum, 3}, {rnum, 4},
	{type, {enum, 'RpbIndexReq.IndexQueryType'}},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 4}, {rnum, 5}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, range_min}, {fnum, 5}, {rnum, 6}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, range_max}, {fnum, 6}, {rnum, 7}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, return_terms}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, stream}, {fnum, 8}, {rnum, 9}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, max_results}, {fnum, 9}, {rnum, 10},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, continuation}, {fnum, 10}, {rnum, 11},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, timeout}, {fnum, 11}, {rnum, 12},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 12}, {rnum, 13}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, term_regex}, {fnum, 13}, {rnum, 14},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, pagination_sort}, {fnum, 14}, {rnum, 15},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, cover_context}, {fnum, 15}, {rnum, 16},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, return_body}, {fnum, 16}, {rnum, 17},
	{type, bool}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbcountergetreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, r}, {fnum, 3}, {rnum, 4}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 4}, {rnum, 5}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 6}, {rnum, 7},
	{type, bool}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpblistkeysreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, timeout}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbauthreq},
      [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbmapredreq},
      [[{name, request}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, content_type}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, required}, {opts, []}]]},
     {{msg, rpbcounterupdateresp},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, sint64},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetbucketresp},
      [[{name, props}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpbcountergetresp},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, sint64},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbindexbodyresp},
      [[{name, objects}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbindexobject}}, {occurrence, repeated},
	{opts, []}],
       [{name, continuation}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbcoverageresp},
      [[{name, entries}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbcoverageentry}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, rpberrorresp},
      [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, required}, {opts, []}]]}].


get_msg_names() ->
    [rpblink, rpbpair, rpbcontent, rpbgetresp,
     rpbindexobject, rpbmodfun, rpbcommithook,
     rpbbucketprops, rpbresetbucketreq, rpbcsbucketreq,
     rpbsetclientidreq, rpbcounterupdatereq,
     rpblistbucketsreq, rpbbucketkeypreflistitem,
     rpbgetbucketkeypreflistresp, rpblistbucketsresp,
     rpbputresp, rpbgetclientidresp, rpbcoverageentry,
     rpbsetbuckettypereq, rpbgetbuckettypereq, rpbdelreq,
     rpbputreq, rpbgetreq, rpbgetbucketkeypreflistreq,
     rpbindexresp, rpbgetserverinforesp, rpbcsbucketresp,
     rpbmapredresp, rpbcoveragereq, rpbsetbucketreq,
     rpbgetbucketreq, rpblistkeysresp, rpbindexreq,
     rpbcountergetreq, rpblistkeysreq, rpbauthreq,
     rpbmapredreq, rpbcounterupdateresp, rpbgetbucketresp,
     rpbcountergetresp, rpbindexbodyresp, rpbcoverageresp,
     rpberrorresp].


get_enum_names() ->
    ['RpbIndexReq.IndexQueryType',
     'RpbBucketProps.RpbReplMode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(rpblink) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, tag}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbpair) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcontent) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, content_type}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, charset}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, content_encoding}, {fnum, 4}, {rnum, 5},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, vtag}, {fnum, 5}, {rnum, 6}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, links}, {fnum, 6}, {rnum, 7},
      {type, {msg, rpblink}}, {occurrence, repeated},
      {opts, []}],
     [{name, last_mod}, {fnum, 7}, {rnum, 8}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, last_mod_usecs}, {fnum, 8}, {rnum, 9},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, usermeta}, {fnum, 9}, {rnum, 10},
      {type, {msg, rpbpair}}, {occurrence, repeated},
      {opts, []}],
     [{name, indexes}, {fnum, 10}, {rnum, 11},
      {type, {msg, rpbpair}}, {occurrence, repeated},
      {opts, []}],
     [{name, deleted}, {fnum, 11}, {rnum, 12}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, ttl}, {fnum, 12}, {rnum, 13}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetresp) ->
    [[{name, content}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbcontent}}, {occurrence, repeated},
      {opts, []}],
     [{name, vclock}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, unchanged}, {fnum, 3}, {rnum, 4}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbindexobject) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, object}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbgetresp}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpbmodfun) ->
    [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbcommithook) ->
    [[{name, modfun}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbbucketprops) ->
    [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, precommit}, {fnum, 4}, {rnum, 5},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_precommit}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, postcommit}, {fnum, 6}, {rnum, 7},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, linkfun}, {fnum, 9}, {rnum, 10},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, old_vclock}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, young_vclock}, {fnum, 11}, {rnum, 12},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, big_vclock}, {fnum, 12}, {rnum, 13},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, small_vclock}, {fnum, 13}, {rnum, 14},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, repl}, {fnum, 24}, {rnum, 25},
      {type, {enum, 'RpbBucketProps.RpbReplMode'}},
      {occurrence, optional}, {opts, []}],
     [{name, search_index}, {fnum, 25}, {rnum, 26},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, datatype}, {fnum, 26}, {rnum, 27},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, consistent}, {fnum, 27}, {rnum, 28},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, write_once}, {fnum, 28}, {rnum, 29},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, hll_precision}, {fnum, 29}, {rnum, 30},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, ttl}, {fnum, 30}, {rnum, 31}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbresetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcsbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, start_key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, end_key}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, start_incl}, {fnum, 4}, {rnum, 5}, {type, bool},
      {occurrence, optional}, {opts, [{default, true}]}],
     [{name, end_incl}, {fnum, 5}, {rnum, 6}, {type, bool},
      {occurrence, optional}, {opts, [{default, false}]}],
     [{name, continuation}, {fnum, 6}, {rnum, 7},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, max_results}, {fnum, 7}, {rnum, 8},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 8}, {rnum, 9}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 9}, {rnum, 10}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, cover_context}, {fnum, 10}, {rnum, 11},
      {type, bytes}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsetclientidreq) ->
    [[{name, client_id}, {fnum, 1}, {rnum, 2},
      {type, bytes}, {occurrence, required}, {opts, []}]];
find_msg_def(rpbcounterupdatereq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, amount}, {fnum, 3}, {rnum, 4}, {type, sint64},
      {occurrence, required}, {opts, []}],
     [{name, w}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 5}, {rnum, 6}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 6}, {rnum, 7}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, returnvalue}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpblistbucketsreq) ->
    [[{name, timeout}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, stream}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbbucketkeypreflistitem) ->
    [[{name, partition}, {fnum, 1}, {rnum, 2},
      {type, int64}, {occurrence, required}, {opts, []}],
     [{name, node}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, primary}, {fnum, 3}, {rnum, 4}, {type, bool},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbgetbucketkeypreflistresp) ->
    [[{name, preflist}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbbucketkeypreflistitem}},
      {occurrence, repeated}, {opts, []}]];
find_msg_def(rpblistbucketsresp) ->
    [[{name, buckets}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, done}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbputresp) ->
    [[{name, content}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbcontent}}, {occurrence, repeated},
      {opts, []}],
     [{name, vclock}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, key}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetclientidresp) ->
    [[{name, client_id}, {fnum, 1}, {rnum, 2},
      {type, bytes}, {occurrence, required}, {opts, []}]];
find_msg_def(rpbcoverageentry) ->
    [[{name, ip}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, port}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, required}, {opts, []}],
     [{name, keyspace_desc}, {fnum, 3}, {rnum, 4},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, cover_context}, {fnum, 4}, {rnum, 5},
      {type, bytes}, {occurrence, required}, {opts, []}]];
find_msg_def(rpbsetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpbgetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbdelreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, rw}, {fnum, 3}, {rnum, 4}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, vclock}, {fnum, 4}, {rnum, 5}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, r}, {fnum, 5}, {rnum, 6}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, w}, {fnum, 6}, {rnum, 7}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 7}, {rnum, 8}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 9}, {rnum, 10}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 13}, {rnum, 14}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbputreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, vclock}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, content}, {fnum, 4}, {rnum, 5},
      {type, {msg, rpbcontent}}, {occurrence, required},
      {opts, []}],
     [{name, w}, {fnum, 5}, {rnum, 6}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 6}, {rnum, 7}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, return_body}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 8}, {rnum, 9}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, if_not_modified}, {fnum, 9}, {rnum, 10},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, if_none_match}, {fnum, 10}, {rnum, 11},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, return_head}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 12}, {rnum, 13},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, asis}, {fnum, 13}, {rnum, 14}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 14}, {rnum, 15},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 15}, {rnum, 16}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 16}, {rnum, 17}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, r}, {fnum, 3}, {rnum, 4}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 6}, {rnum, 7},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, if_modified}, {fnum, 7}, {rnum, 8},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, head}, {fnum, 8}, {rnum, 9}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, deletedvclock}, {fnum, 9}, {rnum, 10},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, sloppy_quorum}, {fnum, 11}, {rnum, 12},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, n_val}, {fnum, 12}, {rnum, 13}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 13}, {rnum, 14}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetbucketkeypreflistreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbindexresp) ->
    [[{name, keys}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, results}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbpair}}, {occurrence, repeated},
      {opts, []}],
     [{name, continuation}, {fnum, 3}, {rnum, 4},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, done}, {fnum, 4}, {rnum, 5}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetserverinforesp) ->
    [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, server_version}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcsbucketresp) ->
    [[{name, objects}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbindexobject}}, {occurrence, repeated},
      {opts, []}],
     [{name, continuation}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbmapredresp) ->
    [[{name, phase}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, response}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcoveragereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, bucket}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, min_partitions}, {fnum, 3}, {rnum, 4},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, replace_cover}, {fnum, 4}, {rnum, 5},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, unavailable_cover}, {fnum, 5}, {rnum, 6},
      {type, bytes}, {occurrence, repeated}, {opts, []}]];
find_msg_def(rpbsetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpblistkeysresp) ->
    [[{name, keys}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, repeated}, {opts, []}],
     [{name, done}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbindexreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, index}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, qtype}, {fnum, 3}, {rnum, 4},
      {type, {enum, 'RpbIndexReq.IndexQueryType'}},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 4}, {rnum, 5}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, range_min}, {fnum, 5}, {rnum, 6}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, range_max}, {fnum, 6}, {rnum, 7}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, return_terms}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, stream}, {fnum, 8}, {rnum, 9}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, max_results}, {fnum, 9}, {rnum, 10},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, continuation}, {fnum, 10}, {rnum, 11},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, timeout}, {fnum, 11}, {rnum, 12},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 12}, {rnum, 13}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, term_regex}, {fnum, 13}, {rnum, 14},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, pagination_sort}, {fnum, 14}, {rnum, 15},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, cover_context}, {fnum, 15}, {rnum, 16},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, return_body}, {fnum, 16}, {rnum, 17},
      {type, bool}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcountergetreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, key}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, r}, {fnum, 3}, {rnum, 4}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 4}, {rnum, 5}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 6}, {rnum, 7},
      {type, bool}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpblistkeysreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, timeout}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbauthreq) ->
    [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbmapredreq) ->
    [[{name, request}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, content_type}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, required}, {opts, []}]];
find_msg_def(rpbcounterupdateresp) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, sint64},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetbucketresp) ->
    [[{name, props}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpbcountergetresp) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, sint64},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbindexbodyresp) ->
    [[{name, objects}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbindexobject}}, {occurrence, repeated},
      {opts, []}],
     [{name, continuation}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, done}, {fnum, 3}, {rnum, 4}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbcoverageresp) ->
    [[{name, entries}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbcoverageentry}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(rpberrorresp) ->
    [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, required}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('RpbIndexReq.IndexQueryType') ->
    [{eq, 0}, {range, 1}];
find_enum_def('RpbBucketProps.RpbReplMode') ->
    [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
     {'TRUE', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('RpbIndexReq.IndexQueryType',
		     Value) ->
    'enum_symbol_by_value_RpbIndexReq.IndexQueryType'(Value);
enum_symbol_by_value('RpbBucketProps.RpbReplMode',
		     Value) ->
    'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(Value).


enum_value_by_symbol('RpbIndexReq.IndexQueryType',
		     Sym) ->
    'enum_value_by_symbol_RpbIndexReq.IndexQueryType'(Sym);
enum_value_by_symbol('RpbBucketProps.RpbReplMode',
		     Sym) ->
    'enum_value_by_symbol_RpbBucketProps.RpbReplMode'(Sym).


'enum_symbol_by_value_RpbIndexReq.IndexQueryType'(0) ->
    eq;
'enum_symbol_by_value_RpbIndexReq.IndexQueryType'(1) ->
    range.


'enum_value_by_symbol_RpbIndexReq.IndexQueryType'(eq) ->
    0;
'enum_value_by_symbol_RpbIndexReq.IndexQueryType'(range) ->
    1.

'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(0) ->
    'FALSE';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(1) ->
    'REALTIME';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(2) ->
    'FULLSYNC';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(3) ->
    'TRUE'.


'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FALSE') ->
    0;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('REALTIME') ->
    1;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FULLSYNC') ->
    2;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('TRUE') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
