%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(riak_pb).

-export([encode_msg/1, encode_msg/2]).
-export([encode/1]). %% epb compatibility
-export([encode_rpbmodfun/1]).
-export([encode_rpbcommithook/1]).
-export([encode_rpbbucketprops/1]).
-export([encode_rpbpair/1]).
-export([encode_rpbresetbucketreq/1]).
-export([encode_rpbsetbuckettypereq/1]).
-export([encode_rpbgetbuckettypereq/1]).
-export([encode_rpbgetserverinforesp/1]).
-export([encode_rpbsetbucketreq/1]).
-export([encode_rpbgetbucketreq/1]).
-export([encode_rpbauthreq/1]).
-export([encode_rpbgetbucketresp/1]).
-export([encode_rpberrorresp/1]).

-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([decode/2]). %% epb compatibility
-export([decode_rpbmodfun/1]).
-export([decode_rpbcommithook/1]).
-export([decode_rpbbucketprops/1]).
-export([decode_rpbpair/1]).
-export([decode_rpbresetbucketreq/1]).
-export([decode_rpbsetbuckettypereq/1]).
-export([decode_rpbgetbuckettypereq/1]).
-export([decode_rpbgetserverinforesp/1]).
-export([decode_rpbsetbucketreq/1]).
-export([decode_rpbgetbucketreq/1]).
-export([decode_rpbauthreq/1]).
-export([decode_rpbgetbucketresp/1]).
-export([decode_rpberrorresp/1]).

-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_RpbBucketProps.RpbReplMode'/1, 'enum_value_by_symbol_RpbBucketProps.RpbReplMode'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("riak_pb.hrl").

%% enumerated types
-type 'RpbBucketProps.RpbReplMode'() :: 'FALSE' | 'REALTIME' | 'FULLSYNC' | 'TRUE'.
-export_type(['RpbBucketProps.RpbReplMode'/0]).

%% message types
-type rpbmodfun() :: #rpbmodfun{}.
-type rpbcommithook() :: #rpbcommithook{}.
-type rpbbucketprops() :: #rpbbucketprops{}.
-type rpbpair() :: #rpbpair{}.
-type rpbresetbucketreq() :: #rpbresetbucketreq{}.
-type rpbsetbuckettypereq() :: #rpbsetbuckettypereq{}.
-type rpbgetbuckettypereq() :: #rpbgetbuckettypereq{}.
-type rpbgetserverinforesp() :: #rpbgetserverinforesp{}.
-type rpbsetbucketreq() :: #rpbsetbucketreq{}.
-type rpbgetbucketreq() :: #rpbgetbucketreq{}.
-type rpbauthreq() :: #rpbauthreq{}.
-type rpbgetbucketresp() :: #rpbgetbucketresp{}.
-type rpberrorresp() :: #rpberrorresp{}.
-export_type(['rpbmodfun'/0, 'rpbcommithook'/0, 'rpbbucketprops'/0, 'rpbpair'/0, 'rpbresetbucketreq'/0, 'rpbsetbuckettypereq'/0, 'rpbgetbuckettypereq'/0, 'rpbgetserverinforesp'/0, 'rpbsetbucketreq'/0, 'rpbgetbucketreq'/0, 'rpbauthreq'/0, 'rpbgetbucketresp'/0, 'rpberrorresp'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpbmodfun{} -> e_msg_rpbmodfun(Msg, TrUserData);
      #rpbcommithook{} ->
	  e_msg_rpbcommithook(Msg, TrUserData);
      #rpbbucketprops{} ->
	  e_msg_rpbbucketprops(Msg, TrUserData);
      #rpbpair{} -> e_msg_rpbpair(Msg, TrUserData);
      #rpbresetbucketreq{} ->
	  e_msg_rpbresetbucketreq(Msg, TrUserData);
      #rpbsetbuckettypereq{} ->
	  e_msg_rpbsetbuckettypereq(Msg, TrUserData);
      #rpbgetbuckettypereq{} ->
	  e_msg_rpbgetbuckettypereq(Msg, TrUserData);
      #rpbgetserverinforesp{} ->
	  e_msg_rpbgetserverinforesp(Msg, TrUserData);
      #rpbsetbucketreq{} ->
	  e_msg_rpbsetbucketreq(Msg, TrUserData);
      #rpbgetbucketreq{} ->
	  e_msg_rpbgetbucketreq(Msg, TrUserData);
      #rpbauthreq{} -> e_msg_rpbauthreq(Msg, TrUserData);
      #rpbgetbucketresp{} ->
	  e_msg_rpbgetbucketresp(Msg, TrUserData);
      #rpberrorresp{} -> e_msg_rpberrorresp(Msg, TrUserData)
    end.


%% epb compatibility
-spec encode(_) -> binary().
encode(Msg) -> encode_msg(Msg).

-spec encode_rpbmodfun(_) -> binary().
encode_rpbmodfun(Msg) -> encode_msg(Msg).

-spec encode_rpbcommithook(_) -> binary().
encode_rpbcommithook(Msg) -> encode_msg(Msg).

-spec encode_rpbbucketprops(_) -> binary().
encode_rpbbucketprops(Msg) -> encode_msg(Msg).

-spec encode_rpbpair(_) -> binary().
encode_rpbpair(Msg) -> encode_msg(Msg).

-spec encode_rpbresetbucketreq(_) -> binary().
encode_rpbresetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbsetbuckettypereq(_) -> binary().
encode_rpbsetbuckettypereq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbuckettypereq(_) -> binary().
encode_rpbgetbuckettypereq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetserverinforesp(_) -> binary().
encode_rpbgetserverinforesp(Msg) -> encode_msg(Msg).

-spec encode_rpbsetbucketreq(_) -> binary().
encode_rpbsetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketreq(_) -> binary().
encode_rpbgetbucketreq(Msg) -> encode_msg(Msg).

-spec encode_rpbauthreq(_) -> binary().
encode_rpbauthreq(Msg) -> encode_msg(Msg).

-spec encode_rpbgetbucketresp(_) -> binary().
encode_rpbgetbucketresp(Msg) -> encode_msg(Msg).

-spec encode_rpberrorresp(_) -> binary().
encode_rpberrorresp(Msg) -> encode_msg(Msg).


e_msg_rpbmodfun(Msg, TrUserData) ->
    e_msg_rpbmodfun(Msg, <<>>, TrUserData).


e_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_rpbcommithook(Msg, TrUserData) ->
    e_msg_rpbcommithook(Msg, <<>>, TrUserData).


e_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_rpbcommithook_modfun(TrF1, <<Bin/binary, 10>>,
						TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbbucketprops(Msg, TrUserData) ->
    e_msg_rpbbucketprops(Msg, <<>>, TrUserData).


e_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28,
				     hll_precision = F29, ttl = F30},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bool(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_rpbbucketprops_precommit(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_rpbbucketprops_postcommit(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_mfield_rpbbucketprops_chash_keyfun(TrF8,
						       <<B7/binary, 66>>,
						       TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_mfield_rpbbucketprops_linkfun(TrF9, <<B8/binary, 74>>,
						  TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_varint(TrF10, <<B9/binary, 80>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_varint(TrF11, <<B10/binary, 88>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_varint(TrF12, <<B11/binary, 96>>)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_varint(TrF13, <<B12/binary, 104>>)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_varint(TrF14, <<B13/binary, 112>>)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_varint(TrF15, <<B14/binary, 120>>)
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   e_varint(TrF16, <<B15/binary, 128, 1>>)
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   e_varint(TrF17, <<B16/binary, 136, 1>>)
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   e_varint(TrF18, <<B17/binary, 144, 1>>)
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   e_varint(TrF19, <<B18/binary, 152, 1>>)
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   e_type_bool(TrF20, <<B19/binary, 160, 1>>)
		 end
	  end,
    B21 = if F21 == undefined -> B20;
	     true ->
		 begin
		   TrF21 = id(F21, TrUserData),
		   e_type_bool(TrF21, <<B20/binary, 168, 1>>)
		 end
	  end,
    B22 = if F22 == undefined -> B21;
	     true ->
		 begin
		   TrF22 = id(F22, TrUserData),
		   e_type_bytes(TrF22, <<B21/binary, 178, 1>>)
		 end
	  end,
    B23 = if F23 == undefined -> B22;
	     true ->
		 begin
		   TrF23 = id(F23, TrUserData),
		   e_type_bool(TrF23, <<B22/binary, 184, 1>>)
		 end
	  end,
    B24 = if F24 == undefined -> B23;
	     true ->
		 begin
		   TrF24 = id(F24, TrUserData),
		   'e_enum_RpbBucketProps.RpbReplMode'(TrF24,
						       <<B23/binary, 192, 1>>)
		 end
	  end,
    B25 = if F25 == undefined -> B24;
	     true ->
		 begin
		   TrF25 = id(F25, TrUserData),
		   e_type_bytes(TrF25, <<B24/binary, 202, 1>>)
		 end
	  end,
    B26 = if F26 == undefined -> B25;
	     true ->
		 begin
		   TrF26 = id(F26, TrUserData),
		   e_type_bytes(TrF26, <<B25/binary, 210, 1>>)
		 end
	  end,
    B27 = if F27 == undefined -> B26;
	     true ->
		 begin
		   TrF27 = id(F27, TrUserData),
		   e_type_bool(TrF27, <<B26/binary, 216, 1>>)
		 end
	  end,
    B28 = if F28 == undefined -> B27;
	     true ->
		 begin
		   TrF28 = id(F28, TrUserData),
		   e_type_bool(TrF28, <<B27/binary, 224, 1>>)
		 end
	  end,
    B29 = if F29 == undefined -> B28;
	     true ->
		 begin
		   TrF29 = id(F29, TrUserData),
		   e_varint(TrF29, <<B28/binary, 232, 1>>)
		 end
	  end,
    if F30 == undefined -> B29;
       true ->
	   begin
	     TrF30 = id(F30, TrUserData),
	     e_varint(TrF30, <<B29/binary, 240, 1>>)
	   end
    end.

e_msg_rpbpair(Msg, TrUserData) ->
    e_msg_rpbpair(Msg, <<>>, TrUserData).


e_msg_rpbpair(#rpbpair{key = F1, value = F2}, Bin,
	      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbresetbucketreq(Msg, TrUserData) ->
    e_msg_rpbresetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbsetbuckettypereq(Msg, TrUserData) ->
    e_msg_rpbsetbuckettypereq(Msg, <<>>, TrUserData).


e_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_rpbsetbuckettypereq_props(TrF2,
					 <<B1/binary, 18>>, TrUserData)
    end.

e_msg_rpbgetbuckettypereq(Msg, TrUserData) ->
    e_msg_rpbgetbuckettypereq(Msg, <<>>, TrUserData).


e_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_rpbgetserverinforesp(Msg, TrUserData) ->
    e_msg_rpbgetserverinforesp(Msg, <<>>, TrUserData).


e_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bytes(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbsetbucketreq(Msg, TrUserData) ->
    e_msg_rpbsetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_rpbsetbucketreq_props(TrF2, <<B1/binary, 18>>,
					  TrUserData)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_rpbgetbucketreq(Msg, TrUserData) ->
    e_msg_rpbgetbucketreq(Msg, <<>>, TrUserData).


e_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_rpbauthreq(Msg, TrUserData) ->
    e_msg_rpbauthreq(Msg, <<>>, TrUserData).


e_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_rpbgetbucketresp(Msg, TrUserData) ->
    e_msg_rpbgetbucketresp(Msg, <<>>, TrUserData).


e_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_rpbgetbucketresp_props(TrF1,
				      <<Bin/binary, 10>>, TrUserData)
    end.

e_msg_rpberrorresp(Msg, TrUserData) ->
    e_msg_rpberrorresp(Msg, <<>>, TrUserData).


e_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_mfield_rpbcommithook_modfun(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_precommit(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_precommit([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_rpbbucketprops_precommit(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_rpbbucketprops_precommit(Rest, Bin3,
				     TrUserData);
e_field_rpbbucketprops_precommit([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_rpbbucketprops_postcommit(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_rpbcommithook(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rpbbucketprops_postcommit([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_rpbbucketprops_postcommit(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_rpbbucketprops_postcommit(Rest, Bin3,
				      TrUserData);
e_field_rpbbucketprops_postcommit([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_rpbbucketprops_chash_keyfun(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbbucketprops_linkfun(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbmodfun(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbsetbuckettypereq_props(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbsetbucketreq_props(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rpbgetbucketresp_props(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rpbbucketprops(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_RpbBucketProps.RpbReplMode'('FALSE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_RpbBucketProps.RpbReplMode'('REALTIME', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_RpbBucketProps.RpbReplMode'('FULLSYNC', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_RpbBucketProps.RpbReplMode'('TRUE', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_RpbBucketProps.RpbReplMode'(V, Bin) ->
    e_varint(V, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      rpbmodfun -> d_msg_rpbmodfun(Bin, TrUserData);
      rpbcommithook -> d_msg_rpbcommithook(Bin, TrUserData);
      rpbbucketprops -> d_msg_rpbbucketprops(Bin, TrUserData);
      rpbpair -> d_msg_rpbpair(Bin, TrUserData);
      rpbresetbucketreq ->
	  d_msg_rpbresetbucketreq(Bin, TrUserData);
      rpbsetbuckettypereq ->
	  d_msg_rpbsetbuckettypereq(Bin, TrUserData);
      rpbgetbuckettypereq ->
	  d_msg_rpbgetbuckettypereq(Bin, TrUserData);
      rpbgetserverinforesp ->
	  d_msg_rpbgetserverinforesp(Bin, TrUserData);
      rpbsetbucketreq ->
	  d_msg_rpbsetbucketreq(Bin, TrUserData);
      rpbgetbucketreq ->
	  d_msg_rpbgetbucketreq(Bin, TrUserData);
      rpbauthreq -> d_msg_rpbauthreq(Bin, TrUserData);
      rpbgetbucketresp ->
	  d_msg_rpbgetbucketresp(Bin, TrUserData);
      rpberrorresp -> d_msg_rpberrorresp(Bin, TrUserData)
    end.


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    decode_msg(Bin, MsgName).

decode_rpbmodfun(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbmodfun).

decode_rpbcommithook(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbcommithook).

decode_rpbbucketprops(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbbucketprops).

decode_rpbpair(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbpair).

decode_rpbresetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbresetbucketreq).

decode_rpbsetbuckettypereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbsetbuckettypereq).

decode_rpbgetbuckettypereq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbuckettypereq).

decode_rpbgetserverinforesp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetserverinforesp).

decode_rpbsetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbsetbucketreq).

decode_rpbgetbucketreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketreq).

decode_rpbauthreq(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbauthreq).

decode_rpbgetbucketresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpbgetbucketresp).

decode_rpberrorresp(Bin) when is_binary(Bin) ->
    decode_msg(Bin, rpberrorresp).



d_msg_rpbmodfun(Bin, TrUserData) ->
    dfp_read_field_def_rpbmodfun(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbmodfun(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_rpbmodfun_module(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_rpbmodfun(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_rpbmodfun_function(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2, _) ->
    #rpbmodfun{module = F1, function = F2};
dfp_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_rpbmodfun(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_rpbmodfun(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbmodfun(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_rpbmodfun(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbmodfun_module(Rest, 0, 0, F1, F2,
				   TrUserData);
      18 ->
	  d_field_rpbmodfun_function(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbmodfun(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_rpbmodfun(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbmodfun(<<>>, 0, 0, F1, F2, _) ->
    #rpbmodfun{module = F1, function = F2}.

d_field_rpbmodfun_module(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmodfun_module(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_rpbmodfun_module(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_rpbmodfun_function(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbmodfun_function(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rpbmodfun_function(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_rpbmodfun(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_rpbmodfun(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rpbmodfun(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_rpbmodfun(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbmodfun(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbmodfun(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbmodfun(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_rpbmodfun(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_rpbmodfun(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_rpbmodfun(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_rpbcommithook(Bin, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbcommithook(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbcommithook_modfun(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpbcommithook(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbcommithook_name(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2,
				 _) ->
    #rpbcommithook{modfun = F1, name = F2};
dfp_read_field_def_rpbcommithook(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_rpbcommithook(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_rpbcommithook(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbcommithook(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbcommithook(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbcommithook_modfun(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_rpbcommithook_name(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbcommithook(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_rpbcommithook(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbcommithook(Rest, 0, 0, F1, F2,
						    TrUserData);
	    5 ->
		skip_32_rpbcommithook(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbcommithook(<<>>, 0, 0, F1, F2,
				_) ->
    #rpbcommithook{modfun = F1, name = F2}.

d_field_rpbcommithook_modfun(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbcommithook_modfun(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpbcommithook_modfun(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0,
				     if F1 == undefined -> NewFValue;
					true ->
					    merge_msg_rpbmodfun(F1, NewFValue,
								TrUserData)
				     end,
				     F2, TrUserData).


d_field_rpbcommithook_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbcommithook_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_rpbcommithook_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_rpbcommithook(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_rpbcommithook(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_rpbcommithook(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_rpbcommithook(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbcommithook(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbcommithook(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbcommithook(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_32_rpbcommithook(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_rpbcommithook(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_rpbcommithook(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_rpbbucketprops(Bin, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id([], TrUserData), id(false, TrUserData),
				      id([], TrUserData), id(false, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbbucketprops(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_n_val(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28, F29, F30,
				 TrUserData);
dfp_read_field_def_rpbbucketprops(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_allow_mult(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_last_write_wins(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30,
					   TrUserData);
dfp_read_field_def_rpbbucketprops(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_precommit(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_has_precommit(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<50, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_postcommit(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_has_postcommit(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30,
					  TrUserData);
dfp_read_field_def_rpbbucketprops(<<66, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_chash_keyfun(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<74, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_linkfun(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28, F29, F30,
				   TrUserData);
dfp_read_field_def_rpbbucketprops(<<80, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_old_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<88, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_young_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<96, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_big_vclock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<104, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_small_vclock(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<112, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_pr(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<120, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_r(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<128, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_w(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			     F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<136, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_pw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<144, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_dw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<152, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_rw(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			      F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			      F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<160, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_basic_quorum(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<168, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_notfound_ok(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<178, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_backend(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28, F29, F30,
				   TrUserData);
dfp_read_field_def_rpbbucketprops(<<184, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_search(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21, F22,
				  F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData);
dfp_read_field_def_rpbbucketprops(<<192, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_repl(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19, F20, F21, F22, F23,
				F24, F25, F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<202, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_search_index(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<210, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_datatype(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
dfp_read_field_def_rpbbucketprops(<<216, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_consistent(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<224, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_write_once(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<232, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_hll_precision(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<240, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    d_field_rpbbucketprops_ttl(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28, F29, F30, TrUserData);
dfp_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3,
		    precommit = lists_reverse(F4, TrUserData),
		    has_precommit = F5,
		    postcommit = lists_reverse(F6, TrUserData),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28, hll_precision = F29,
		    ttl = F30};
dfp_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  TrUserData) ->
    dg_read_field_def_rpbbucketprops(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, TrUserData).

dg_read_field_def_rpbbucketprops(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbbucketprops(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, TrUserData);
dg_read_field_def_rpbbucketprops(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rpbbucketprops_n_val(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19, F20, F21,
				       F22, F23, F24, F25, F26, F27, F28, F29,
				       F30, TrUserData);
      16 ->
	  d_field_rpbbucketprops_allow_mult(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      24 ->
	  d_field_rpbbucketprops_last_write_wins(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, TrUserData);
      34 ->
	  d_field_rpbbucketprops_precommit(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28, F29, F30, TrUserData);
      40 ->
	  d_field_rpbbucketprops_has_precommit(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, TrUserData);
      50 ->
	  d_field_rpbbucketprops_postcommit(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      56 ->
	  d_field_rpbbucketprops_has_postcommit(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28, F29, F30, TrUserData);
      66 ->
	  d_field_rpbbucketprops_chash_keyfun(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      74 ->
	  d_field_rpbbucketprops_linkfun(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27, F28,
					 F29, F30, TrUserData);
      80 ->
	  d_field_rpbbucketprops_old_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      88 ->
	  d_field_rpbbucketprops_young_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      96 ->
	  d_field_rpbbucketprops_big_vclock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      104 ->
	  d_field_rpbbucketprops_small_vclock(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      112 ->
	  d_field_rpbbucketprops_pr(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      120 ->
	  d_field_rpbbucketprops_r(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28, F29, F30, TrUserData);
      128 ->
	  d_field_rpbbucketprops_w(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
				   F16, F17, F18, F19, F20, F21, F22, F23, F24,
				   F25, F26, F27, F28, F29, F30, TrUserData);
      136 ->
	  d_field_rpbbucketprops_pw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      144 ->
	  d_field_rpbbucketprops_dw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      152 ->
	  d_field_rpbbucketprops_rw(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				    F15, F16, F17, F18, F19, F20, F21, F22, F23,
				    F24, F25, F26, F27, F28, F29, F30,
				    TrUserData);
      160 ->
	  d_field_rpbbucketprops_basic_quorum(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      168 ->
	  d_field_rpbbucketprops_notfound_ok(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30,
					     TrUserData);
      178 ->
	  d_field_rpbbucketprops_backend(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27, F28,
					 F29, F30, TrUserData);
      184 ->
	  d_field_rpbbucketprops_search(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, F22, F23, F24, F25, F26, F27, F28,
					F29, F30, TrUserData);
      192 ->
	  d_field_rpbbucketprops_repl(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13,
				      F14, F15, F16, F17, F18, F19, F20, F21,
				      F22, F23, F24, F25, F26, F27, F28, F29,
				      F30, TrUserData);
      202 ->
	  d_field_rpbbucketprops_search_index(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30,
					      TrUserData);
      210 ->
	  d_field_rpbbucketprops_datatype(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28, F29, F30, TrUserData);
      216 ->
	  d_field_rpbbucketprops_consistent(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      224 ->
	  d_field_rpbbucketprops_write_once(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30,
					    TrUserData);
      232 ->
	  d_field_rpbbucketprops_hll_precision(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, TrUserData);
      240 ->
	  d_field_rpbbucketprops_ttl(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, F15, F16, F17, F18, F19, F20, F21,
				     F22, F23, F24, F25, F26, F27, F28, F29,
				     F30, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28, F29, F30, TrUserData);
	    1 ->
		skip_64_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       TrUserData);
	    2 ->
		skip_length_delimited_rpbbucketprops(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, TrUserData);
	    5 ->
		skip_32_rpbbucketprops(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       TrUserData)
	  end
    end;
dg_read_field_def_rpbbucketprops(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28, F29, F30,
				 TrUserData) ->
    #rpbbucketprops{n_val = F1, allow_mult = F2,
		    last_write_wins = F3,
		    precommit = lists_reverse(F4, TrUserData),
		    has_precommit = F5,
		    postcommit = lists_reverse(F6, TrUserData),
		    has_postcommit = F7, chash_keyfun = F8, linkfun = F9,
		    old_vclock = F10, young_vclock = F11, big_vclock = F12,
		    small_vclock = F13, pr = F14, r = F15, w = F16,
		    pw = F17, dw = F18, rw = F19, basic_quorum = F20,
		    notfound_ok = F21, backend = F22, search = F23,
		    repl = F24, search_index = F25, datatype = F26,
		    consistent = F27, write_once = F28, hll_precision = F29,
		    ttl = F30}.

d_field_rpbbucketprops_n_val(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			     TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_n_val(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19, F20,
				 F21, F22, F23, F24, F25, F26, F27, F28, F29,
				 F30, TrUserData);
d_field_rpbbucketprops_n_val(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			     F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			     TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_allow_mult(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_allow_mult(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_allow_mult(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, F6, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_last_write_wins(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_last_write_wins(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, TrUserData);
d_field_rpbbucketprops_last_write_wins(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30,
				       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_precommit(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_precommit(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_precommit(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcommithook(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, cons(NewFValue, F4, TrUserData), F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15, F16, F17, F18, F19, F20, F21, F22,
				      F23, F24, F25, F26, F27, F28, F29, F30,
				      TrUserData).


d_field_rpbbucketprops_has_precommit(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_has_precommit(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
d_field_rpbbucketprops_has_precommit(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_postcommit(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_postcommit(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_postcommit(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbcommithook(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5,
				      cons(NewFValue, F6, TrUserData), F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_has_postcommit(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_has_postcommit(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27, F28,
					  F29, F30, TrUserData);
d_field_rpbbucketprops_has_postcommit(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_chash_keyfun(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_chash_keyfun(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_chash_keyfun(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7,
				      if F8 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F8, NewFValue,
								 TrUserData)
				      end,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_linkfun(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_linkfun(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_linkfun(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbmodfun(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8,
				      if F9 == undefined -> NewFValue;
					 true ->
					     merge_msg_rpbmodfun(F9, NewFValue,
								 TrUserData)
				      end,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_old_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_old_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_old_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				  F11, F12, F13, F14, F15, F16, F17, F18, F19,
				  F20, F21, F22, F23, F24, F25, F26, F27, F28,
				  F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_young_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_young_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_young_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, _, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      NewFValue, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_big_vclock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_big_vclock(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_big_vclock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      NewFValue, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_small_vclock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_small_vclock(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_small_vclock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, _, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      NewFValue, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_pr(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_pr(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_pr(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, _, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, NewFValue, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_r(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_r(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_r(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, _, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, NewFValue, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_w(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_w(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14, F15, F16, F17, F18, F19, F20, F21, F22, F23,
			     F24, F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_w(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, _, F17, F18, F19, F20, F21, F22, F23,
			 F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, NewFValue, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_pw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_pw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_pw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, _, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, NewFValue, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_dw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_dw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_dw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, _, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, NewFValue, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_rw(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_rw(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
			      F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData);
d_field_rpbbucketprops_rw(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14, F15, F16, F17, F18, _, F20, F21, F22,
			  F23, F24, F25, F26, F27, F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, NewFValue,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_basic_quorum(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_basic_quorum(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_basic_quorum(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, _, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      NewFValue, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, TrUserData).


d_field_rpbbucketprops_notfound_ok(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_notfound_ok(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30,
				       TrUserData);
d_field_rpbbucketprops_notfound_ok(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, _, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      NewFValue, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_backend(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_backend(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_backend(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, _, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, NewFValue, F23, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_search(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_search(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, F22, F23, F24, F25, F26,
				  F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_search(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, _, F24, F25, F26, F27, F28, F29, F30,
			      TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, NewFValue, F24, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_repl(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			    TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_repl(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13, F14, F15, F16, F17, F18, F19, F20,
				F21, F22, F23, F24, F25, F26, F27, F28, F29,
				F30, TrUserData);
d_field_rpbbucketprops_repl(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			    F21, F22, F23, _, F25, F26, F27, F28, F29, F30,
			    TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_RpbBucketProps.RpbReplMode'(Tmp),
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, NewFValue, F25, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_search_index(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_search_index(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					TrUserData);
d_field_rpbbucketprops_search_index(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, _, F26, F27,
				    F28, F29, F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, NewFValue, F26, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_datatype(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_datatype(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_datatype(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, _, F27, F28, F29,
				F30, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, NewFValue, F27,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_consistent(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_consistent(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_consistent(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, _,
				  F28, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, NewFValue,
				      F28, F29, F30, TrUserData).


d_field_rpbbucketprops_write_once(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_write_once(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, TrUserData);
d_field_rpbbucketprops_write_once(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  _, F29, F30, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27,
				      NewFValue, F29, F30, TrUserData).


d_field_rpbbucketprops_hll_precision(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_hll_precision(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
d_field_rpbbucketprops_hll_precision(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, _, F30, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      NewFValue, F30, TrUserData).


d_field_rpbbucketprops_ttl(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData)
    when N < 57 ->
    d_field_rpbbucketprops_ttl(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			       F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       TrUserData);
d_field_rpbbucketprops_ttl(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, _,
			   TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpbbucketprops(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, NewFValue, TrUserData).


skip_varint_rpbbucketprops(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData) ->
    skip_varint_rpbbucketprops(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28, F29, F30, TrUserData);
skip_varint_rpbbucketprops(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30,
			   TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_length_delimited_rpbbucketprops(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbbucketprops(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 TrUserData);
skip_length_delimited_rpbbucketprops(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbbucketprops(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_32_rpbbucketprops(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


skip_64_rpbbucketprops(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, TrUserData) ->
    dfp_read_field_def_rpbbucketprops(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, TrUserData).


d_msg_rpbpair(Bin, TrUserData) ->
    dfp_read_field_def_rpbpair(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbpair(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rpbpair_key(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbpair(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_rpbpair_value(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbpair(<<>>, 0, 0, F1, F2, _) ->
    #rpbpair{key = F1, value = F2};
dfp_read_field_def_rpbpair(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_rpbpair(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_rpbpair(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbpair(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_rpbpair(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbpair_key(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_rpbpair_value(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbpair(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbpair(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbpair(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_rpbpair(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbpair(<<>>, 0, 0, F1, F2, _) ->
    #rpbpair{key = F1, value = F2}.

d_field_rpbpair_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbpair_key(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_rpbpair_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_rpbpair_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbpair_value(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_rpbpair_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_rpbpair(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_rpbpair(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_rpbpair(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_rpbpair(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbpair(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbpair(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbpair(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_rpbpair(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_rpbpair(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_rpbpair(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_rpbresetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbresetbucketreq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbresetbucketreq_bucket(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_rpbresetbucketreq(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbresetbucketreq_type(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1, F2,
				     _) ->
    #rpbresetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_rpbresetbucketreq(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_rpbresetbucketreq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbresetbucketreq(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbresetbucketreq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbresetbucketreq_bucket(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_rpbresetbucketreq_type(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_rpbresetbucketreq(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_rpbresetbucketreq(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_rpbresetbucketreq(<<>>, 0, 0, F1, F2,
				    _) ->
    #rpbresetbucketreq{bucket = F1, type = F2}.

d_field_rpbresetbucketreq_bucket(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbresetbucketreq_bucket(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbresetbucketreq_bucket(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_rpbresetbucketreq_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbresetbucketreq_type(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbresetbucketreq_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_rpbresetbucketreq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbresetbucketreq(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_rpbresetbucketreq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_rpbresetbucketreq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbresetbucketreq(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbresetbucketreq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbresetbucketreq(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_rpbresetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_rpbresetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_rpbresetbucketreq(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_rpbsetbuckettypereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_rpbsetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbsetbuckettypereq_type(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_rpbsetbuckettypereq(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbsetbuckettypereq_props(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				       F2, _) ->
    #rpbsetbuckettypereq{type = F1, props = F2};
dfp_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2,
				       F1, F2, TrUserData) ->
    dg_read_field_def_rpbsetbuckettypereq(Other, Z1, Z2, F1,
					  F2, TrUserData).

dg_read_field_def_rpbsetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbsetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbuckettypereq_type(Rest, 0, 0, F1, F2,
					   TrUserData);
      18 ->
	  d_field_rpbsetbuckettypereq_props(Rest, 0, 0, F1, F2,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
						TrUserData);
	    1 ->
		skip_64_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    2 ->
		skip_length_delimited_rpbsetbuckettypereq(Rest, 0, 0,
							  F1, F2, TrUserData);
	    5 ->
		skip_32_rpbsetbuckettypereq(Rest, 0, 0, F1, F2,
					    TrUserData)
	  end
    end;
dg_read_field_def_rpbsetbuckettypereq(<<>>, 0, 0, F1,
				      F2, _) ->
    #rpbsetbuckettypereq{type = F1, props = F2}.

d_field_rpbsetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbsetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0,
					   NewFValue, F2, TrUserData).


d_field_rpbsetbuckettypereq_props(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbsetbuckettypereq_props(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbsetbuckettypereq_props(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  merge_msg_rpbbucketprops(F2,
									   NewFValue,
									   TrUserData)
					   end,
					   TrUserData).


skip_varint_rpbsetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbsetbuckettypereq(Rest, Z1, Z2, F1, F2,
				    TrUserData);
skip_varint_rpbsetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_length_delimited_rpbsetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbsetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
skip_length_delimited_rpbsetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbuckettypereq(Rest2, 0, 0, F1,
					   F2, TrUserData).


skip_32_rpbsetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_64_rpbsetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbsetbuckettypereq(Rest, Z1, Z2, F1,
					   F2, TrUserData).


d_msg_rpbgetbuckettypereq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_rpbgetbuckettypereq(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetbuckettypereq_type(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0, F1,
				       _) ->
    #rpbgetbuckettypereq{type = F1};
dfp_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_rpbgetbuckettypereq(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_rpbgetbuckettypereq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbuckettypereq(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbgetbuckettypereq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbuckettypereq_type(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbuckettypereq(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_rpbgetbuckettypereq(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbuckettypereq(Rest, 0, 0,
							  F1, TrUserData);
	    5 ->
		skip_32_rpbgetbuckettypereq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbuckettypereq(<<>>, 0, 0, F1,
				      _) ->
    #rpbgetbuckettypereq{type = F1}.

d_field_rpbgetbuckettypereq_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetbuckettypereq_type(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_rpbgetbuckettypereq_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0,
					   NewFValue, TrUserData).


skip_varint_rpbgetbuckettypereq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_rpbgetbuckettypereq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_rpbgetbuckettypereq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbuckettypereq(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbgetbuckettypereq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbuckettypereq(Rest2, 0, 0, F1,
					   TrUserData).


skip_32_rpbgetbuckettypereq(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_rpbgetbuckettypereq(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbuckettypereq(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_rpbgetserverinforesp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_rpbgetserverinforesp(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetserverinforesp_node(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_rpbgetserverinforesp(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetserverinforesp_server_version(Rest, Z1,
						Z2, F1, F2, TrUserData);
dfp_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
					F2, _) ->
    #rpbgetserverinforesp{node = F1, server_version = F2};
dfp_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					F1, F2, TrUserData) ->
    dg_read_field_def_rpbgetserverinforesp(Other, Z1, Z2,
					   F1, F2, TrUserData).

dg_read_field_def_rpbgetserverinforesp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetserverinforesp(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbgetserverinforesp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetserverinforesp_node(Rest, 0, 0, F1, F2,
					    TrUserData);
      18 ->
	  d_field_rpbgetserverinforesp_server_version(Rest, 0, 0,
						      F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
						 TrUserData);
	    1 ->
		skip_64_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
					     TrUserData);
	    2 ->
		skip_length_delimited_rpbgetserverinforesp(Rest, 0, 0,
							   F1, F2, TrUserData);
	    5 ->
		skip_32_rpbgetserverinforesp(Rest, 0, 0, F1, F2,
					     TrUserData)
	  end
    end;
dg_read_field_def_rpbgetserverinforesp(<<>>, 0, 0, F1,
				       F2, _) ->
    #rpbgetserverinforesp{node = F1, server_version = F2}.

d_field_rpbgetserverinforesp_node(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetserverinforesp_node(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbgetserverinforesp_node(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0,
					    NewFValue, F2, TrUserData).


d_field_rpbgetserverinforesp_server_version(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetserverinforesp_server_version(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
d_field_rpbgetserverinforesp_server_version(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    NewFValue, TrUserData).


skip_varint_rpbgetserverinforesp(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbgetserverinforesp(Rest, Z1, Z2, F1, F2,
				     TrUserData);
skip_varint_rpbgetserverinforesp(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_length_delimited_rpbgetserverinforesp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetserverinforesp(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
skip_length_delimited_rpbgetserverinforesp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetserverinforesp(Rest2, 0, 0, F1,
					    F2, TrUserData).


skip_32_rpbgetserverinforesp(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


skip_64_rpbgetserverinforesp(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetserverinforesp(Rest, Z1, Z2,
					    F1, F2, TrUserData).


d_msg_rpbsetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbsetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_bucket(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_props(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_rpbsetbucketreq_type(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3};
dfp_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_rpbsetbucketreq(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_rpbsetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbsetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_rpbsetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbsetbucketreq_bucket(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      18 ->
	  d_field_rpbsetbucketreq_props(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      26 ->
	  d_field_rpbsetbucketreq_type(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_rpbsetbucketreq(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_rpbsetbucketreq(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_rpbsetbucketreq(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #rpbsetbucketreq{bucket = F1, props = F2, type = F3}.

d_field_rpbsetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_rpbsetbucketreq_props(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_props(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_props(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1,
				       if F2 == undefined -> NewFValue;
					  true ->
					      merge_msg_rpbbucketprops(F2,
								       NewFValue,
								       TrUserData)
				       end,
				       F3, TrUserData).


d_field_rpbsetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_rpbsetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_rpbsetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_rpbsetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_rpbsetbucketreq(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_rpbsetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_rpbsetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbsetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_rpbsetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbsetbucketreq(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_rpbsetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_rpbsetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_rpbsetbucketreq(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_rpbgetbucketreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetbucketreq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetbucketreq_bucket(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_rpbgetbucketreq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_rpbgetbucketreq_type(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1, F2,
				   _) ->
    #rpbgetbucketreq{bucket = F1, type = F2};
dfp_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_rpbgetbucketreq(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_rpbgetbucketreq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketreq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpbgetbucketreq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketreq_bucket(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_rpbgetbucketreq_type(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketreq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_rpbgetbucketreq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketreq(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_rpbgetbucketreq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketreq(<<>>, 0, 0, F1, F2,
				  _) ->
    #rpbgetbucketreq{bucket = F1, type = F2}.

d_field_rpbgetbucketreq_bucket(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketreq_bucket(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_rpbgetbucketreq_bucket(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_rpbgetbucketreq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketreq_type(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpbgetbucketreq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1,
				       NewFValue, TrUserData).


skip_varint_rpbgetbucketreq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_rpbgetbucketreq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_rpbgetbucketreq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketreq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbgetbucketreq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketreq(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_rpbgetbucketreq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_rpbgetbucketreq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_rpbgetbucketreq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_rpbauthreq(Bin, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbauthreq(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_rpbauthreq_user(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_rpbauthreq(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_rpbauthreq_password(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2, _) ->
    #rpbauthreq{user = F1, password = F2};
dfp_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_rpbauthreq(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_rpbauthreq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbauthreq(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_rpbauthreq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbauthreq_user(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_rpbauthreq_password(Rest, 0, 0, F1, F2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpbauthreq(Rest, 0, 0, F1, F2,
						 TrUserData);
	    5 -> skip_32_rpbauthreq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpbauthreq(<<>>, 0, 0, F1, F2, _) ->
    #rpbauthreq{user = F1, password = F2}.

d_field_rpbauthreq_user(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbauthreq_user(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_rpbauthreq_user(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, NewFValue,
				  F2, TrUserData).


d_field_rpbauthreq_password(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpbauthreq_password(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_rpbauthreq_password(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1,
				  NewFValue, TrUserData).


skip_varint_rpbauthreq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_rpbauthreq(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_rpbauthreq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_rpbauthreq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbauthreq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpbauthreq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbauthreq(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_32_rpbauthreq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_rpbauthreq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_rpbauthreq(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_rpbgetbucketresp(Bin, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpbgetbucketresp(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_rpbgetbucketresp_props(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1,
				    _) ->
    #rpbgetbucketresp{props = F1};
dfp_read_field_def_rpbgetbucketresp(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_rpbgetbucketresp(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_rpbgetbucketresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpbgetbucketresp(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_rpbgetbucketresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpbgetbucketresp_props(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpbgetbucketresp(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_rpbgetbucketresp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_rpbgetbucketresp(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_rpbgetbucketresp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_rpbgetbucketresp(<<>>, 0, 0, F1, _) ->
    #rpbgetbucketresp{props = F1}.

d_field_rpbgetbucketresp_props(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_rpbgetbucketresp_props(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_rpbgetbucketresp_props(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_rpbbucketprops(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_rpbbucketprops(F1,
									NewFValue,
									TrUserData)
					end,
					TrUserData).


skip_varint_rpbgetbucketresp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_rpbgetbucketresp(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_rpbgetbucketresp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_rpbgetbucketresp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpbgetbucketresp(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_rpbgetbucketresp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpbgetbucketresp(Rest2, 0, 0, F1,
					TrUserData).


skip_32_rpbgetbucketresp(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_rpbgetbucketresp(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_rpbgetbucketresp(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_rpberrorresp(Bin, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rpberrorresp(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpberrorresp_errmsg(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_rpberrorresp(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_rpberrorresp_errcode(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2,
				_) ->
    #rpberrorresp{errmsg = F1, errcode = F2};
dfp_read_field_def_rpberrorresp(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_rpberrorresp(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_rpberrorresp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rpberrorresp(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_rpberrorresp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rpberrorresp_errmsg(Rest, 0, 0, F1, F2,
				      TrUserData);
      16 ->
	  d_field_rpberrorresp_errcode(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rpberrorresp(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_rpberrorresp(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_rpberrorresp(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_rpberrorresp(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_rpberrorresp(<<>>, 0, 0, F1, F2, _) ->
    #rpberrorresp{errmsg = F1, errcode = F2}.

d_field_rpberrorresp_errmsg(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpberrorresp_errmsg(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_rpberrorresp_errmsg(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_rpberrorresp_errcode(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_rpberrorresp_errcode(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_rpberrorresp_errcode(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_rpberrorresp(Rest, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_rpberrorresp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_rpberrorresp(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_rpberrorresp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_rpberrorresp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rpberrorresp(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_rpberrorresp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rpberrorresp(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_rpberrorresp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_rpberrorresp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_rpberrorresp(Rest, Z1, Z2, F1, F2,
				    TrUserData).




'd_enum_RpbBucketProps.RpbReplMode'(0) -> 'FALSE';
'd_enum_RpbBucketProps.RpbReplMode'(1) -> 'REALTIME';
'd_enum_RpbBucketProps.RpbReplMode'(2) -> 'FULLSYNC';
'd_enum_RpbBucketProps.RpbReplMode'(3) -> 'TRUE';
'd_enum_RpbBucketProps.RpbReplMode'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #rpbmodfun{} ->
	  merge_msg_rpbmodfun(Prev, New, TrUserData);
      #rpbcommithook{} ->
	  merge_msg_rpbcommithook(Prev, New, TrUserData);
      #rpbbucketprops{} ->
	  merge_msg_rpbbucketprops(Prev, New, TrUserData);
      #rpbpair{} -> merge_msg_rpbpair(Prev, New, TrUserData);
      #rpbresetbucketreq{} ->
	  merge_msg_rpbresetbucketreq(Prev, New, TrUserData);
      #rpbsetbuckettypereq{} ->
	  merge_msg_rpbsetbuckettypereq(Prev, New, TrUserData);
      #rpbgetbuckettypereq{} ->
	  merge_msg_rpbgetbuckettypereq(Prev, New, TrUserData);
      #rpbgetserverinforesp{} ->
	  merge_msg_rpbgetserverinforesp(Prev, New, TrUserData);
      #rpbsetbucketreq{} ->
	  merge_msg_rpbsetbucketreq(Prev, New, TrUserData);
      #rpbgetbucketreq{} ->
	  merge_msg_rpbgetbucketreq(Prev, New, TrUserData);
      #rpbauthreq{} ->
	  merge_msg_rpbauthreq(Prev, New, TrUserData);
      #rpbgetbucketresp{} ->
	  merge_msg_rpbgetbucketresp(Prev, New, TrUserData);
      #rpberrorresp{} ->
	  merge_msg_rpberrorresp(Prev, New, TrUserData)
    end.

merge_msg_rpbmodfun(#rpbmodfun{},
		    #rpbmodfun{module = NFmodule, function = NFfunction},
		    _) ->
    #rpbmodfun{module = NFmodule, function = NFfunction}.

merge_msg_rpbcommithook(#rpbcommithook{modfun =
					   PFmodfun,
				       name = PFname},
			#rpbcommithook{modfun = NFmodfun, name = NFname},
			TrUserData) ->
    #rpbcommithook{modfun =
		       if PFmodfun /= undefined, NFmodfun /= undefined ->
			      merge_msg_rpbmodfun(PFmodfun, NFmodfun,
						  TrUserData);
			  PFmodfun == undefined -> NFmodfun;
			  NFmodfun == undefined -> PFmodfun
		       end,
		   name =
		       if NFname =:= undefined -> PFname;
			  true -> NFname
		       end}.

merge_msg_rpbbucketprops(#rpbbucketprops{n_val =
					     PFn_val,
					 allow_mult = PFallow_mult,
					 last_write_wins = PFlast_write_wins,
					 precommit = PFprecommit,
					 has_precommit = PFhas_precommit,
					 postcommit = PFpostcommit,
					 has_postcommit = PFhas_postcommit,
					 chash_keyfun = PFchash_keyfun,
					 linkfun = PFlinkfun,
					 old_vclock = PFold_vclock,
					 young_vclock = PFyoung_vclock,
					 big_vclock = PFbig_vclock,
					 small_vclock = PFsmall_vclock,
					 pr = PFpr, r = PFr, w = PFw, pw = PFpw,
					 dw = PFdw, rw = PFrw,
					 basic_quorum = PFbasic_quorum,
					 notfound_ok = PFnotfound_ok,
					 backend = PFbackend, search = PFsearch,
					 repl = PFrepl,
					 search_index = PFsearch_index,
					 datatype = PFdatatype,
					 consistent = PFconsistent,
					 write_once = PFwrite_once,
					 hll_precision = PFhll_precision,
					 ttl = PFttl},
			 #rpbbucketprops{n_val = NFn_val,
					 allow_mult = NFallow_mult,
					 last_write_wins = NFlast_write_wins,
					 precommit = NFprecommit,
					 has_precommit = NFhas_precommit,
					 postcommit = NFpostcommit,
					 has_postcommit = NFhas_postcommit,
					 chash_keyfun = NFchash_keyfun,
					 linkfun = NFlinkfun,
					 old_vclock = NFold_vclock,
					 young_vclock = NFyoung_vclock,
					 big_vclock = NFbig_vclock,
					 small_vclock = NFsmall_vclock,
					 pr = NFpr, r = NFr, w = NFw, pw = NFpw,
					 dw = NFdw, rw = NFrw,
					 basic_quorum = NFbasic_quorum,
					 notfound_ok = NFnotfound_ok,
					 backend = NFbackend, search = NFsearch,
					 repl = NFrepl,
					 search_index = NFsearch_index,
					 datatype = NFdatatype,
					 consistent = NFconsistent,
					 write_once = NFwrite_once,
					 hll_precision = NFhll_precision,
					 ttl = NFttl},
			 TrUserData) ->
    #rpbbucketprops{n_val =
			if NFn_val =:= undefined -> PFn_val;
			   true -> NFn_val
			end,
		    allow_mult =
			if NFallow_mult =:= undefined -> PFallow_mult;
			   true -> NFallow_mult
			end,
		    last_write_wins =
			if NFlast_write_wins =:= undefined -> PFlast_write_wins;
			   true -> NFlast_write_wins
			end,
		    precommit =
			'erlang_++'(PFprecommit, NFprecommit, TrUserData),
		    has_precommit =
			if NFhas_precommit =:= undefined -> PFhas_precommit;
			   true -> NFhas_precommit
			end,
		    postcommit =
			'erlang_++'(PFpostcommit, NFpostcommit, TrUserData),
		    has_postcommit =
			if NFhas_postcommit =:= undefined -> PFhas_postcommit;
			   true -> NFhas_postcommit
			end,
		    chash_keyfun =
			if PFchash_keyfun /= undefined,
			   NFchash_keyfun /= undefined ->
			       merge_msg_rpbmodfun(PFchash_keyfun,
						   NFchash_keyfun, TrUserData);
			   PFchash_keyfun == undefined -> NFchash_keyfun;
			   NFchash_keyfun == undefined -> PFchash_keyfun
			end,
		    linkfun =
			if PFlinkfun /= undefined, NFlinkfun /= undefined ->
			       merge_msg_rpbmodfun(PFlinkfun, NFlinkfun,
						   TrUserData);
			   PFlinkfun == undefined -> NFlinkfun;
			   NFlinkfun == undefined -> PFlinkfun
			end,
		    old_vclock =
			if NFold_vclock =:= undefined -> PFold_vclock;
			   true -> NFold_vclock
			end,
		    young_vclock =
			if NFyoung_vclock =:= undefined -> PFyoung_vclock;
			   true -> NFyoung_vclock
			end,
		    big_vclock =
			if NFbig_vclock =:= undefined -> PFbig_vclock;
			   true -> NFbig_vclock
			end,
		    small_vclock =
			if NFsmall_vclock =:= undefined -> PFsmall_vclock;
			   true -> NFsmall_vclock
			end,
		    pr =
			if NFpr =:= undefined -> PFpr;
			   true -> NFpr
			end,
		    r =
			if NFr =:= undefined -> PFr;
			   true -> NFr
			end,
		    w =
			if NFw =:= undefined -> PFw;
			   true -> NFw
			end,
		    pw =
			if NFpw =:= undefined -> PFpw;
			   true -> NFpw
			end,
		    dw =
			if NFdw =:= undefined -> PFdw;
			   true -> NFdw
			end,
		    rw =
			if NFrw =:= undefined -> PFrw;
			   true -> NFrw
			end,
		    basic_quorum =
			if NFbasic_quorum =:= undefined -> PFbasic_quorum;
			   true -> NFbasic_quorum
			end,
		    notfound_ok =
			if NFnotfound_ok =:= undefined -> PFnotfound_ok;
			   true -> NFnotfound_ok
			end,
		    backend =
			if NFbackend =:= undefined -> PFbackend;
			   true -> NFbackend
			end,
		    search =
			if NFsearch =:= undefined -> PFsearch;
			   true -> NFsearch
			end,
		    repl =
			if NFrepl =:= undefined -> PFrepl;
			   true -> NFrepl
			end,
		    search_index =
			if NFsearch_index =:= undefined -> PFsearch_index;
			   true -> NFsearch_index
			end,
		    datatype =
			if NFdatatype =:= undefined -> PFdatatype;
			   true -> NFdatatype
			end,
		    consistent =
			if NFconsistent =:= undefined -> PFconsistent;
			   true -> NFconsistent
			end,
		    write_once =
			if NFwrite_once =:= undefined -> PFwrite_once;
			   true -> NFwrite_once
			end,
		    hll_precision =
			if NFhll_precision =:= undefined -> PFhll_precision;
			   true -> NFhll_precision
			end,
		    ttl =
			if NFttl =:= undefined -> PFttl;
			   true -> NFttl
			end}.

merge_msg_rpbpair(#rpbpair{value = PFvalue},
		  #rpbpair{key = NFkey, value = NFvalue}, _) ->
    #rpbpair{key = NFkey,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end}.

merge_msg_rpbresetbucketreq(#rpbresetbucketreq{type =
						   PFtype},
			    #rpbresetbucketreq{bucket = NFbucket,
					       type = NFtype},
			    _) ->
    #rpbresetbucketreq{bucket = NFbucket,
		       type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end}.

merge_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{props
						       = PFprops},
			      #rpbsetbuckettypereq{type = NFtype,
						   props = NFprops},
			      TrUserData) ->
    #rpbsetbuckettypereq{type = NFtype,
			 props =
			     if PFprops /= undefined, NFprops /= undefined ->
				    merge_msg_rpbbucketprops(PFprops, NFprops,
							     TrUserData);
				PFprops == undefined -> NFprops;
				NFprops == undefined -> PFprops
			     end}.

merge_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{},
			      #rpbgetbuckettypereq{type = NFtype}, _) ->
    #rpbgetbuckettypereq{type = NFtype}.

merge_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node
							 = PFnode,
						     server_version =
							 PFserver_version},
			       #rpbgetserverinforesp{node = NFnode,
						     server_version =
							 NFserver_version},
			       _) ->
    #rpbgetserverinforesp{node =
			      if NFnode =:= undefined -> PFnode;
				 true -> NFnode
			      end,
			  server_version =
			      if NFserver_version =:= undefined ->
				     PFserver_version;
				 true -> NFserver_version
			      end}.

merge_msg_rpbsetbucketreq(#rpbsetbucketreq{props =
					       PFprops,
					   type = PFtype},
			  #rpbsetbucketreq{bucket = NFbucket, props = NFprops,
					   type = NFtype},
			  TrUserData) ->
    #rpbsetbucketreq{bucket = NFbucket,
		     props =
			 if PFprops /= undefined, NFprops /= undefined ->
				merge_msg_rpbbucketprops(PFprops, NFprops,
							 TrUserData);
			    PFprops == undefined -> NFprops;
			    NFprops == undefined -> PFprops
			 end,
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpbgetbucketreq(#rpbgetbucketreq{type =
					       PFtype},
			  #rpbgetbucketreq{bucket = NFbucket, type = NFtype},
			  _) ->
    #rpbgetbucketreq{bucket = NFbucket,
		     type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

merge_msg_rpbauthreq(#rpbauthreq{},
		     #rpbauthreq{user = NFuser, password = NFpassword}, _) ->
    #rpbauthreq{user = NFuser, password = NFpassword}.

merge_msg_rpbgetbucketresp(#rpbgetbucketresp{props =
						 PFprops},
			   #rpbgetbucketresp{props = NFprops}, TrUserData) ->
    #rpbgetbucketresp{props =
			  if PFprops /= undefined, NFprops /= undefined ->
				 merge_msg_rpbbucketprops(PFprops, NFprops,
							  TrUserData);
			     PFprops == undefined -> NFprops;
			     NFprops == undefined -> PFprops
			  end}.

merge_msg_rpberrorresp(#rpberrorresp{},
		       #rpberrorresp{errmsg = NFerrmsg, errcode = NFerrcode},
		       _) ->
    #rpberrorresp{errmsg = NFerrmsg, errcode = NFerrcode}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #rpbmodfun{} ->
	  v_msg_rpbmodfun(Msg, [rpbmodfun], TrUserData);
      #rpbcommithook{} ->
	  v_msg_rpbcommithook(Msg, [rpbcommithook], TrUserData);
      #rpbbucketprops{} ->
	  v_msg_rpbbucketprops(Msg, [rpbbucketprops], TrUserData);
      #rpbpair{} -> v_msg_rpbpair(Msg, [rpbpair], TrUserData);
      #rpbresetbucketreq{} ->
	  v_msg_rpbresetbucketreq(Msg, [rpbresetbucketreq],
				  TrUserData);
      #rpbsetbuckettypereq{} ->
	  v_msg_rpbsetbuckettypereq(Msg, [rpbsetbuckettypereq],
				    TrUserData);
      #rpbgetbuckettypereq{} ->
	  v_msg_rpbgetbuckettypereq(Msg, [rpbgetbuckettypereq],
				    TrUserData);
      #rpbgetserverinforesp{} ->
	  v_msg_rpbgetserverinforesp(Msg, [rpbgetserverinforesp],
				     TrUserData);
      #rpbsetbucketreq{} ->
	  v_msg_rpbsetbucketreq(Msg, [rpbsetbucketreq],
				TrUserData);
      #rpbgetbucketreq{} ->
	  v_msg_rpbgetbucketreq(Msg, [rpbgetbucketreq],
				TrUserData);
      #rpbauthreq{} ->
	  v_msg_rpbauthreq(Msg, [rpbauthreq], TrUserData);
      #rpbgetbucketresp{} ->
	  v_msg_rpbgetbucketresp(Msg, [rpbgetbucketresp],
				 TrUserData);
      #rpberrorresp{} ->
	  v_msg_rpberrorresp(Msg, [rpberrorresp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_rpbmodfun/3}).
v_msg_rpbmodfun(#rpbmodfun{module = F1, function = F2},
		Path, _) ->
    v_type_bytes(F1, [module | Path]),
    v_type_bytes(F2, [function | Path]),
    ok;
v_msg_rpbmodfun(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbmodfun}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbcommithook/3}).
v_msg_rpbcommithook(#rpbcommithook{modfun = F1,
				   name = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_rpbmodfun(F1, [modfun | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [name | Path])
    end,
    ok;
v_msg_rpbcommithook(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbcommithook}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbbucketprops/3}).
v_msg_rpbbucketprops(#rpbbucketprops{n_val = F1,
				     allow_mult = F2, last_write_wins = F3,
				     precommit = F4, has_precommit = F5,
				     postcommit = F6, has_postcommit = F7,
				     chash_keyfun = F8, linkfun = F9,
				     old_vclock = F10, young_vclock = F11,
				     big_vclock = F12, small_vclock = F13,
				     pr = F14, r = F15, w = F16, pw = F17,
				     dw = F18, rw = F19, basic_quorum = F20,
				     notfound_ok = F21, backend = F22,
				     search = F23, repl = F24,
				     search_index = F25, datatype = F26,
				     consistent = F27, write_once = F28,
				     hll_precision = F29, ttl = F30},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [n_val | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [allow_mult | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [last_write_wins | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_rpbcommithook(Elem, [precommit | Path],
				    TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F4, Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [has_precommit | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_rpbcommithook(Elem, [postcommit | Path],
				    TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, rpbcommithook}},
			 F6, Path)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [has_postcommit | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_rpbmodfun(F8, [chash_keyfun | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_rpbmodfun(F9, [linkfun | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [old_vclock | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [young_vclock | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [big_vclock | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [small_vclock | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [pr | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [r | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [w | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [pw | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [dw | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint32(F19, [rw | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_bool(F20, [basic_quorum | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_bool(F21, [notfound_ok | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_bytes(F22, [backend | Path])
    end,
    if F23 == undefined -> ok;
       true -> v_type_bool(F23, [search | Path])
    end,
    if F24 == undefined -> ok;
       true ->
	   'v_enum_RpbBucketProps.RpbReplMode'(F24, [repl | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_bytes(F25, [search_index | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_bytes(F26, [datatype | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_bool(F27, [consistent | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_bool(F28, [write_once | Path])
    end,
    if F29 == undefined -> ok;
       true -> v_type_uint32(F29, [hll_precision | Path])
    end,
    if F30 == undefined -> ok;
       true -> v_type_uint32(F30, [ttl | Path])
    end,
    ok;
v_msg_rpbbucketprops(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rpbbucketprops}, X, Path).

-dialyzer({nowarn_function,v_msg_rpbpair/3}).
v_msg_rpbpair(#rpbpair{key = F1, value = F2}, Path,
	      _) ->
    v_type_bytes(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [value | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbresetbucketreq/3}).
v_msg_rpbresetbucketreq(#rpbresetbucketreq{bucket = F1,
					   type = F2},
			Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbsetbuckettypereq/3}).
v_msg_rpbsetbuckettypereq(#rpbsetbuckettypereq{type =
						   F1,
					       props = F2},
			  Path, TrUserData) ->
    v_type_bytes(F1, [type | Path]),
    v_msg_rpbbucketprops(F2, [props | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbuckettypereq/3}).
v_msg_rpbgetbuckettypereq(#rpbgetbuckettypereq{type =
						   F1},
			  Path, _) ->
    v_type_bytes(F1, [type | Path]), ok.

-dialyzer({nowarn_function,v_msg_rpbgetserverinforesp/3}).
v_msg_rpbgetserverinforesp(#rpbgetserverinforesp{node =
						     F1,
						 server_version = F2},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [node | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [server_version | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbsetbucketreq/3}).
v_msg_rpbsetbucketreq(#rpbsetbucketreq{bucket = F1,
				       props = F2, type = F3},
		      Path, TrUserData) ->
    v_type_bytes(F1, [bucket | Path]),
    v_msg_rpbbucketprops(F2, [props | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbucketreq/3}).
v_msg_rpbgetbucketreq(#rpbgetbucketreq{bucket = F1,
				       type = F2},
		      Path, _) ->
    v_type_bytes(F1, [bucket | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_rpbauthreq/3}).
v_msg_rpbauthreq(#rpbauthreq{user = F1, password = F2},
		 Path, _) ->
    v_type_bytes(F1, [user | Path]),
    v_type_bytes(F2, [password | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_rpbgetbucketresp/3}).
v_msg_rpbgetbucketresp(#rpbgetbucketresp{props = F1},
		       Path, TrUserData) ->
    v_msg_rpbbucketprops(F1, [props | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_rpberrorresp/3}).
v_msg_rpberrorresp(#rpberrorresp{errmsg = F1,
				 errcode = F2},
		   Path, _) ->
    v_type_bytes(F1, [errmsg | Path]),
    v_type_uint32(F2, [errcode | Path]),
    ok.

-dialyzer({nowarn_function,'v_enum_RpbBucketProps.RpbReplMode'/2}).
'v_enum_RpbBucketProps.RpbReplMode'('FALSE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('REALTIME',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('FULLSYNC',
				    _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'('TRUE', _Path) ->
    ok;
'v_enum_RpbBucketProps.RpbReplMode'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_RpbBucketProps.RpbReplMode'(X, Path) ->
    mk_type_error({invalid_enum,
		   'RpbBucketProps.RpbReplMode'},
		  X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'RpbBucketProps.RpbReplMode'},
      [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
       {'TRUE', 3}]},
     {{msg, rpbmodfun},
      [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbcommithook},
      [[{name, modfun}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbbucketprops},
      [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, precommit}, {fnum, 4}, {rnum, 5},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_precommit}, {fnum, 5}, {rnum, 6},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, postcommit}, {fnum, 6}, {rnum, 7},
	{type, {msg, rpbcommithook}}, {occurrence, repeated},
	{opts, []}],
       [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
	{type, bool}, {occurrence, optional},
	{opts, [{default, false}]}],
       [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, linkfun}, {fnum, 9}, {rnum, 10},
	{type, {msg, rpbmodfun}}, {occurrence, optional},
	{opts, []}],
       [{name, old_vclock}, {fnum, 10}, {rnum, 11},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, young_vclock}, {fnum, 11}, {rnum, 12},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, big_vclock}, {fnum, 12}, {rnum, 13},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, small_vclock}, {fnum, 13}, {rnum, 14},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
	{occurrence, optional}, {opts, []}],
       [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
	{occurrence, optional}, {opts, []}],
       [{name, repl}, {fnum, 24}, {rnum, 25},
	{type, {enum, 'RpbBucketProps.RpbReplMode'}},
	{occurrence, optional}, {opts, []}],
       [{name, search_index}, {fnum, 25}, {rnum, 26},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, datatype}, {fnum, 26}, {rnum, 27},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, consistent}, {fnum, 27}, {rnum, 28},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, write_once}, {fnum, 28}, {rnum, 29},
	{type, bool}, {occurrence, optional}, {opts, []}],
       [{name, hll_precision}, {fnum, 29}, {rnum, 30},
	{type, uint32}, {occurrence, optional}, {opts, []}],
       [{name, ttl}, {fnum, 30}, {rnum, 31}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbpair},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbresetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbsetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpbgetbuckettypereq},
      [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbgetserverinforesp},
      [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, server_version}, {fnum, 2}, {rnum, 3},
	{type, bytes}, {occurrence, optional}, {opts, []}]]},
     {{msg, rpbsetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, props}, {fnum, 2}, {rnum, 3},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbgetbucketreq},
      [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rpbauthreq},
      [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, required}, {opts, []}]]},
     {{msg, rpbgetbucketresp},
      [[{name, props}, {fnum, 1}, {rnum, 2},
	{type, {msg, rpbbucketprops}}, {occurrence, required},
	{opts, []}]]},
     {{msg, rpberrorresp},
      [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, required}, {opts, []}],
       [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
	{occurrence, required}, {opts, []}]]}].


get_msg_names() ->
    [rpbmodfun, rpbcommithook, rpbbucketprops, rpbpair,
     rpbresetbucketreq, rpbsetbuckettypereq,
     rpbgetbuckettypereq, rpbgetserverinforesp,
     rpbsetbucketreq, rpbgetbucketreq, rpbauthreq,
     rpbgetbucketresp, rpberrorresp].


get_enum_names() -> ['RpbBucketProps.RpbReplMode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(rpbmodfun) ->
    [[{name, module}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, function}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbcommithook) ->
    [[{name, modfun}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, name}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbbucketprops) ->
    [[{name, n_val}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, allow_mult}, {fnum, 2}, {rnum, 3}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, last_write_wins}, {fnum, 3}, {rnum, 4},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, precommit}, {fnum, 4}, {rnum, 5},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_precommit}, {fnum, 5}, {rnum, 6},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, postcommit}, {fnum, 6}, {rnum, 7},
      {type, {msg, rpbcommithook}}, {occurrence, repeated},
      {opts, []}],
     [{name, has_postcommit}, {fnum, 7}, {rnum, 8},
      {type, bool}, {occurrence, optional},
      {opts, [{default, false}]}],
     [{name, chash_keyfun}, {fnum, 8}, {rnum, 9},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, linkfun}, {fnum, 9}, {rnum, 10},
      {type, {msg, rpbmodfun}}, {occurrence, optional},
      {opts, []}],
     [{name, old_vclock}, {fnum, 10}, {rnum, 11},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, young_vclock}, {fnum, 11}, {rnum, 12},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, big_vclock}, {fnum, 12}, {rnum, 13},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, small_vclock}, {fnum, 13}, {rnum, 14},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, pr}, {fnum, 14}, {rnum, 15}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, r}, {fnum, 15}, {rnum, 16}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, w}, {fnum, 16}, {rnum, 17}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, pw}, {fnum, 17}, {rnum, 18}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, dw}, {fnum, 18}, {rnum, 19}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, rw}, {fnum, 19}, {rnum, 20}, {type, uint32},
      {occurrence, optional}, {opts, []}],
     [{name, basic_quorum}, {fnum, 20}, {rnum, 21},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, notfound_ok}, {fnum, 21}, {rnum, 22},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, backend}, {fnum, 22}, {rnum, 23}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, search}, {fnum, 23}, {rnum, 24}, {type, bool},
      {occurrence, optional}, {opts, []}],
     [{name, repl}, {fnum, 24}, {rnum, 25},
      {type, {enum, 'RpbBucketProps.RpbReplMode'}},
      {occurrence, optional}, {opts, []}],
     [{name, search_index}, {fnum, 25}, {rnum, 26},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, datatype}, {fnum, 26}, {rnum, 27},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, consistent}, {fnum, 27}, {rnum, 28},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, write_once}, {fnum, 28}, {rnum, 29},
      {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, hll_precision}, {fnum, 29}, {rnum, 30},
      {type, uint32}, {occurrence, optional}, {opts, []}],
     [{name, ttl}, {fnum, 30}, {rnum, 31}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbpair) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, value}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbresetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpbgetbuckettypereq) ->
    [[{name, type}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbgetserverinforesp) ->
    [[{name, node}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, server_version}, {fnum, 2}, {rnum, 3},
      {type, bytes}, {occurrence, optional}, {opts, []}]];
find_msg_def(rpbsetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, props}, {fnum, 2}, {rnum, 3},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbgetbucketreq) ->
    [[{name, bucket}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, type}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rpbauthreq) ->
    [[{name, user}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, password}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, required}, {opts, []}]];
find_msg_def(rpbgetbucketresp) ->
    [[{name, props}, {fnum, 1}, {rnum, 2},
      {type, {msg, rpbbucketprops}}, {occurrence, required},
      {opts, []}]];
find_msg_def(rpberrorresp) ->
    [[{name, errmsg}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, required}, {opts, []}],
     [{name, errcode}, {fnum, 2}, {rnum, 3}, {type, uint32},
      {occurrence, required}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('RpbBucketProps.RpbReplMode') ->
    [{'FALSE', 0}, {'REALTIME', 1}, {'FULLSYNC', 2},
     {'TRUE', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('RpbBucketProps.RpbReplMode',
		     Value) ->
    'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(Value).


enum_value_by_symbol('RpbBucketProps.RpbReplMode',
		     Sym) ->
    'enum_value_by_symbol_RpbBucketProps.RpbReplMode'(Sym).


'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(0) ->
    'FALSE';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(1) ->
    'REALTIME';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(2) ->
    'FULLSYNC';
'enum_symbol_by_value_RpbBucketProps.RpbReplMode'(3) ->
    'TRUE'.


'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FALSE') ->
    0;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('REALTIME') ->
    1;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('FULLSYNC') ->
    2;
'enum_value_by_symbol_RpbBucketProps.RpbReplMode'('TRUE') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
